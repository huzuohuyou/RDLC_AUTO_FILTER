<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Functions Library</name>
    </assembly>
    <members>
        <member name="T:App.FunctionLibrary.DynamicComputer">
            <summary>
            动态函数计算器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicComputer.#ctor(App.FunctionLibrary.CompileType)">
            <summary>
            动态函数计算器
            </summary>
            <param name="codeType">代码类型</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicComputer.#ctor(App.FunctionLibrary.CompileType,System.String)">
            <summary>
            动态函数计算器
            </summary>
            <param name="codeType">代码类型</param>
            <param name="coding">动态编译的代码</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicComputer.#ctor(App.FunctionLibrary.CompileType,System.String,App.FunctionLibrary.DynamicDomain)">
            <summary>
            动态函数计算器
            </summary>
            <param name="codeType">代码类型</param>
            <param name="coding">动态编译的代码</param>
            <param name="domain">在动态程序域中编译</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicComputer.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicComputer.IsDisposed">
            <summary>
            动态函数编译器是否已销毁。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicComputer.Dispose">
            <summary>
            卸载并销毁动态生成的程序集。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicComputer.CodeType">
            <summary>
            需要动态编译的代码类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicComputer.Coding">
            <summary>
            动态编译的代码
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicComputer.BaseType">
            <summary>
            动态编译代码的声明类继承的基类类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicComputer.AddNamespace(System.String[])">
            <summary>
            追加动态编译代码脚本导入的命名空间(默认已经导入:System)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicComputer.AddReference(System.String[])">
            <summary>
            追加编译器引用的程序集(默认已经包括:mscorlib.dll、System.dll)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicComputer.Invoke(App.FunctionLibrary.Pair{System.Object}[])">
            <summary>
            委托调用动态编译方法
            </summary>
            <param name="params">调用动态方法传入的参数组(Name表示参数名称，Value表示参数值)</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicComputer.Invoke``1(App.FunctionLibrary.Pair{System.Object}[])">
            <summary>
            委托调用动态编译函数并且返回调用结果。
            </summary>
            <typeparam name="T">函数结果泛型类型</typeparam>
            <param name="params">调用动态函数传入的参数组(Name表示参数名称，Value表示参数值)</param>
        </member>
        <member name="T:App.FunctionLibrary.DbFactoryEventArgs">
            <summary>
            数据工厂事件参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DbFactoryEventArgs.ConnectionType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DbFactoryEventArgs.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DbFactoryEventArgs.ParameterChar">
            <summary>
            参数标识字符
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DbFactoryEventArgs.ElapsedTime">
            <summary>
            操作耗时
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DbFactoryEventArgs.AcceptTime">
            <summary>
            提交时间
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DbFactoryEventArgs.TableName">
            <summary>
            操作的数据表名称(子查询和存储过程时为空)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DbFactoryEventArgs.Script">
            <summary>
            操作脚本
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DbFactoryEventArgs.Parameters">
            <summary>
            操作使用的参数集
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.CacheInvalidIndexer`2">
            <summary>
            缓冲器失效索引器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CacheInvalidIndexer`2.Item(`0)">
            <summary>
            获取缓存名的缓存器是否失效
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.PointerIndexer`1">
            <summary>
            获取或设置相对指针给定偏移量的值。
            </summary>
            <typeparam name="T">值泛型类型</typeparam>
        </member>
        <member name="P:App.FunctionLibrary.PointerIndexer`1.Item(System.Int32)">
            <summary>
            获取或设置相对当前指针非托管内存中给定偏移量的泛型类型值。
            </summary>
            <param name="index">给定的额外字节偏移量(0表示当前指针地址)。</param>
        </member>
        <member name="P:App.FunctionLibrary.PointerIndexer`1.Item(System.Int32,System.Int32)">
            <summary>
            获取当前指针非托管内存中的泛型类型值。
            </summary>
            <param name="length">获取泛型类型值的长度。</param>
            <param name="index">相对于当前指针的偏移量(0表示当前指针地址)。</param>
        </member>
        <member name="T:App.FunctionLibrary.AdoDotNet">
            <summary>
            <para>基于OleDb引擎模式的ADO.Net数据连接、事务、数据集、数据表、数据行等相关的数据库操作对象。</para>
            <para>离线式本地数据浏览操作方式，不占用网络资源、加速数据的访问效率。</para>
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.#ctor">
            <summary>
            实例化 AdoDotNet 对象(在使用对象访问数据库之前一定要设置连接对象或者连接字符串)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.#ctor(System.Data.DataTable)">
            <summary>
            用指定的数据表 DataTable 实例化 AdoDotNet 对象(在使用对象访问数据库之前一定要设置连接对象或者连接字符串)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.#ctor(System.Data.DataColumn[])">
            <summary>
            实例化 AdoDotNet 对象(在使用对象访问数据库之前一定要设置连接对象或者连接字符串)。
            </summary>
            <param name="columns">>创建DataTable表结构的列对象</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.#ctor(System.String[])">
            <summary>
            实例化 AdoDotNet 对象(在使用对象访问数据库之前一定要设置连接对象或者连接字符串)。
            </summary>
            <param name="columnNames">创建DataTable表结构的列名称(列对象数据类型为String)。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.#ctor(System.String)">
            <summary>
            实例化 AdoDotNet 对象。
            </summary>
            <param name="connectionString">访问数据库的连接字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.#ctor(System.Data.Common.DbConnection)">
            <summary>
            实例化 AdoDotNet 对象。
            </summary>
            <param name="connection">访问数据库的连接对象</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.#ctor(System.Data.Common.DbTransaction)">
            <summary>
            实例化 AdoDotNet 对象。
            </summary>
            <param name="transaction">设置数据事务对象</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.#ctor(App.FunctionLibrary.AdoDotNet,System.Data.DataTable)">
            <summary>
            由数据操作对象的连接和事务初始化为一个新的数据操作对象。
            </summary>
            <param name="db">用于初始化的数据操作对象(仅包括连接和事务)。</param>
            <param name="table">用于初始化数据工厂的数据表.</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Clone">
            <summary>
            创建一个仅包含连接和事务的副本。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.IsDisposed">
            <summary>
            是否已销毁。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.SelectScript">
            <summary>
            查询脚本
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DeleteScript">
            <summary>
            删除脚本
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.UpdateScript">
            <summary>
            更新脚本
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.InserScript">
            <summary>
            新增脚本
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Item(System.Data.ConnectionState)">
            <summary>
            数据库连接对象(根据State参数设置改变当前的连接状态)。
            </summary>
            <param name="state">数据库连接对象的打开状态。</param>
            <value>设置数据库连接对象，不改变当前的连接状态。</value>
            <returns>获取数据库连接对象，根据State参数改变当前的连接状态。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.CreateConnection">
            <summary>
            使用默认连接字符串创建数据库连接(如未设置连接 Connection 时，默认按照 OleDbConnection 类型进行连接创建)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.CreateConnection(System.String)">
            <summary>
            创建数据库连接(未设置连接 Connection 时，默认按照 OleDbConnection 类型进行连接创建)。
            </summary>
            <param name="connectionString">创建数据库连接使用的连接字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.openConnect(System.Data.Common.DbConnection)">
            <summary>
            打开连接
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.closeConnect(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            关闭连接(不销毁对象)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Server">
            <summary>
            当前连接字符串表示的数据库服务器计算机名称或网络IP地址(Server属性值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataSource">
            <summary>
            当前连接字符串表示的数据源名称(Data Source属性值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataBase">
            <summary>
            当前连接字符串表示的数据库名称(Initial Catalog属性值或者数据库文件名称)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.UserID">
            <summary>
            当前连接字符串表示的数据库登录用户名(User ID属性值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Password">
            <summary>
            当前连接字符串表示的数据库登录密码(Password属性值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Timeout">
            <summary>
            当前连接字符串表示的连接超时秒数(Connect Timeout属性值)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.TryConnect(System.Boolean)">
            <summary>
            连接测试(连接成功返回True、失败返回False，测试超时时间为连接字符串中指定的超时时间。)
            </summary>
            <param name="tryPing">是否Ping测试数据库服务器</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.TryConnect(System.Int32,System.Boolean)">
            <summary>
            连接测试(连接成功返回True、失败返回False。)
            </summary>
            <param name="timeout">测试连接的超时时间：秒钟(1～60之间的值)。</param> 
            <param name="tryPing">是否Ping测试数据库服务器</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.TryConnect(System.String@,System.Boolean)">
            <summary>
            连接测试(连接成功返回True、失败返回False，测试超时时间为连接字符串中指定的超时时间。)
            </summary> 
            <param name="message">测试连接失败的描述信息。</param>
            <param name="tryPing">是否Ping测试数据库服务器</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.TryConnect(System.Int32,System.String@,System.Boolean)">
            <summary>
            连接测试(连接成功返回True、失败返回False。)
            </summary>
            <param name="timeout">测试连接的超时时间：秒钟(1～60之间的值)。</param>
            <param name="message">测试连接失败的描述信息。</param> 
            <param name="tryPing">是否Ping测试数据库服务器</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.BeginTry(System.String,System.Int32,System.Data.Common.DbConnection,System.Boolean,System.String@)">
            <summary>
            开始委托测试
            </summary>
            <param name="serverName">数据库服务器名称或者地址</param>
            <param name="timeout">超时时间(秒钟)</param>
            <param name="connect">数据库连接</param>
            <param name="tryPing">是否进行Ping测试服务器</param>
            <param name="messsage">输出测试结果</param>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Command">
            <summary>
            数据库操作命令
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.CommandBy(System.String,System.Object[])">
            <summary>
            获取或者创建Command对象(仅返回对象，不执行脚本CommandText)。
            </summary>
            <param name="commandText">数据访问命令脚本字符串。</param>
            <param name="formatArgs">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <returns>返回数据命令对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.CommandBy(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            获取或者创建Command对象(仅返回对象，不执行脚本CommandText)。
            </summary>
            <param name="commandText">数据访问命令脚本字符串。</param>
            <param name="params">参数列表</param>
            <returns>返回数据命令对象</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.CommandText">
            <summary>
            数据访问命令脚本字符串
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.CreateCommand(System.Data.Common.DbConnection)">
            <summary>
            创建数据命令
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.correctParameter(App.FunctionLibrary.ParameterBuilder@)">
            <summary>
            修正校验参数组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.assignParameter(System.Collections.Generic.IList{System.String},App.FunctionLibrary.ParameterBuilder)">
            <summary>
            对Command对象分配参数值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.cloneParameter(System.Data.Common.DbParameter)">
            <summary>
            复制一个DbParameter的精确副本
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.replumeParameter(System.String@,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            重新整理参数组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.replumeParameter(App.FunctionLibrary.ParameterBuilder)">
            <summary>
            重新整理参数组
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Transing">
            <summary>
            数据事务处理状态。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Transaction">
            <summary>
            数据事务对象
            </summary>
            <value>设置数据事务对象(当两个对象进行事务同步时使用)。</value>
            <returns>返回当前数据事务对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            开启数据事务(销毁对象时未提交的事务将自动进行回滚；事务处理的隔离级别，默认隔离级别 IsolationLevel.ReadCommitted，事务内修改了数据后，外部不能读不能改。)
            </summary> 
            <param name="isolation">事务处理的隔离级别，默认可以进行脏读，不发布共享锁，也不接受独占锁。</param>
            <returns>成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.CommitTrans">
            <summary>
            提交数据事务
            </summary>
            <returns>成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.RollbackTrans">
            <summary>
            放弃数据事务(销毁对象时未提交的事务将自动进行回滚)。
            </summary>
            <returns>成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Execute(System.String,System.Object[])">
            <summary>
            执行Transact-SQL脚本语句，并且返回受影响的行数。
            </summary>
            <param name="commandText">需要执行的SQL脚本语句字符串</param> 
            <param name="formatArgs">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Execute(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            执行Transact-SQL脚本语句，并且返回受影响的行数。
            </summary>
            <param name="commandText">需要执行的SQL脚本语句字符串</param> 
            <param name="params">参数列表</param>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataSet">
            <summary>
            数据集对象
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataSets">
            <summary>
            获取数据集包含的数据表
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.AdoDotNet.DataSetIndexer">
            <summary>
            数据集索引器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataSetIndexer.Item(System.String)">
            <summary>
            根据数据表名称从数据集中返回数据表
            </summary>
            <param name="name">数据表限定名</param>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataSetIndexer.Item(System.Int32)">
            <summary>
            根据数据表在数据集中的索引从数据集中返回数据表
            </summary>
            <param name="index">数据表在数据集中的索引</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataSetNew(System.String,System.String)">
            <summary>
            由查询字符串和定义的数据表名称重新建立数据集
            </summary>
            <param name="queryScript">建立数据表的查询字符串</param>
            <param name="name">数据表限定名</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataSetBy(System.String,System.String)">
            <summary>
            由查询字符串向数据集中追加数据表，并且返回数据集对象。
            </summary>
            <param name="queryScript">追加数据表的查询字符串</param>
            <param name="name">数据表限定名</param>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.EditMode">
            <summary>
            当前数据行的编辑模式、修改状态。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataRow">
            <summary>
            返回或者设置当前数据行，改变当前数据行。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataRows">
            <summary>
            针对于当前数据表的数据行。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.RowIndex">
            <summary>
            返回或者设置数据行的行索引，改变当前数据行DataRow
            </summary>
            <value>设置行索引，并且设置当前行。</value>
            <returns>返回当前行索引</returns>
        </member>
        <member name="T:App.FunctionLibrary.AdoDotNet.DataRowIndexer">
            <summary />
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataRowIndexer.Item(System.Int32)">
            <summary>
            返回或者设置数据行对象，不改变当前数据行。
            </summary>
            <param name="index">当前表中的数据行索引</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataRowBy(System.String,System.Object[])">
            <summary>
            由查询字符串直接返回数据行对象，改变当前数据行DataRow，同时改变当前数据表DataTable。
            </summary>
            <param name="queryScript">查询字符串</param>
            <param name="formatArgs">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataRowBy(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            由查询字符串直接返回数据行对象，改变当前数据行DataRow，同时改变当前数据表DataTable。
            </summary>
            <param name="queryScript">查询字符串</param>
            <param name="params">参数集(可选参数，如果没有参数需要传入不填)。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataRowBy(System.String,System.Int32)">
            <summary>
            由查询字符串直接返回数据行对象，改变当前数据行DataRow，同时改变当前数据表DataTable。
            </summary>
            <param name="queryScript">查询字符串</param>
            <param name="index">数据行的行索引</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataRowBy``1(System.String,System.Object[])">
            <summary>
            由查询字符串直接返回数据实体，不改变当前数据行DataRow和数据表DataTable。
            </summary>
            <param name="queryScript">查询字符串</param>
            <param name="formatArgs">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataRowBy``1(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            由查询字符串直接返回数据实体，不改变当前数据行DataRow和数据表DataTable。
            </summary>
            <param name="queryScript">查询字符串</param>
            <param name="params">参数集(可选参数，如果没有参数需要传入不填)。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataRowBy``1(System.String,System.Int32)">
            <summary>
            由查询字符串直接返回数据实体，不改变当前数据行DataRow和数据表DataTable。
            </summary>
            <param name="queryScript">查询字符串</param>
            <param name="index">数据行的行索引</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataRowCopy(System.Data.DataRow)">
            <summary>
            拷贝目标数据行数据到当前数据行中并且返回当前数据行。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataRowCopy``1(``0)">
            <summary>
            拷贝目标数据实体到当前数据行中并且返回当前数据行。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.EditRow(System.Int32)">
            <summary>
            编辑数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="index">编辑的数据行行索引</param>
            <returns>返回编辑的当前数据行对象，不改变行索引RowIndex。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.EditRow(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            编辑数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="oldRow">被编辑的原数据行。</param>
            <param name="editedRow">已经完成数据编辑的新行(如缺省必须对被编辑行进行数据赋值)。</param>
            <returns>返回编辑的当前数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.EditRow(System.Data.DataRow,System.Object[])">
            <summary>
            编辑数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="oldValues">被编辑的原行数据组。</param>
            <param name="editedRow">已经完成数据编辑的行。</param>
            <returns>返回编辑的当前数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.EditRow">
            <summary>
            编辑当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <returns>返回当前数据行对象，如果当前数据行为Nothing则使用当前数据表的第0行，如果当前数据表也同时为空，则返回Nothing。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.EditRow(System.String)">
            <summary>
            修改指定表名称的表数据(不允许使用 DataRow 对列进行赋值，要求调用AcceptChanges提交修改、或者RejectChanges放弃修改，提交修改时必须指定修改条件)。
            </summary>
            <param name="tableName">用于获取表结构的名称</param>
            <returns>返回新修改的数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.NewRow">
            <summary>
            追加数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <returns>返回新追加的数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.NewRow(System.String)">
            <summary>
            根据数据库表名称追加数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="tableName">用于获取表结构的名称</param>
            <returns>返回新追加的数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.NewRow(System.Data.DataTable)">
            <summary>
            根据数据表追加数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="table">追加到其中的数据表</param>
            <returns>返回新追加的数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.NewRow(System.Data.DataRow)">
            <summary>
            新增新行
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Remove">
            <summary>
            删除当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改。)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Remove(System.Data.DataRow)">
            <summary>
            删除指定的数据行，不改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Remove(System.Int32)">
            <summary>
            删除指定索引的数据行，不改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="index">需要删除的数据行索引</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Remove(System.String)">
            <summary>
            删除指定索引的数据行，不改变当前数据行(要求调用AcceptChanges提交删除、或者RejectChanges放弃删除,提交删除时必须指定删除条件)。
            </summary>
            <param name="tableName">用于获取表结构的名称</param>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Item(System.String)">
            <summary>
            返回或者设置当前数据行的列值(DbNull值已经处理为空字符串)。
            </summary>
            <param name="columnName">需要操作列值的列名称</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Item(System.Int32)">
            <summary>
            返回或者设置当前数据行的列值(DbNull值已经处理为空字符串)。
            </summary>
            <param name="columnIndex">需要操作列值的列索引</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Item(System.Int32,System.String)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="rowIndex">需要操作列值的行索引</param>
            <param name="columnName">需要操作列值的列名称</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Item(System.Int32,System.Int32)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="rowIndex">需要操作列值的行索引</param>
            <param name="columnIndex">需要操作列值的列索引</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Item(System.Data.DataRow,System.String)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="row">需要操作列值的数据行</param>
            <param name="columnName">需要操作列值的列名称</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Item(System.Data.DataRow,System.Int32)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="row">需要操作列值的数据行</param>
            <param name="columnIndex">需要操作列值的列索引</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Value">
            <summary>
            获取或设置当前数据行字段值。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.AdoDotNet.ValueIndexer">
            <summary>
            字段值索引器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.ValueIndexer.Item(System.String)">
            <summary>
            返回或者设置当前数据行的列值(DbNull值已经处理为空字符串)。
            </summary>
            <param name="columnName">需要操作列值的列名称</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.ValueIndexer.Item(System.Int32)">
            <summary>
            返回或者设置当前数据行的列值(DbNull值已经处理为空字符串)。
            </summary>
            <param name="columnIndex">需要操作列值的列索引</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.ValueIndexer.Item(System.Int32,System.String)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="rowIndex">需要操作列值的行索引</param>
            <param name="columnName">需要操作列值的列名称</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.ValueIndexer.Item(System.Int32,System.Int32)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="rowIndex">需要操作列值的行索引</param>
            <param name="columnIndex">需要操作列值的列索引</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.ValueIndexer.Item(System.Data.DataRow,System.String)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="row">需要操作列值的数据行</param>
            <param name="columnName">需要操作列值的列名称</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.ValueIndexer.Item(System.Data.DataRow,System.Int32)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="row">需要操作列值的数据行</param>
            <param name="columnIndex">需要操作列值的列索引</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataTable">
            <summary>
            当前数据表对象
            </summary>
            <value>设置当前数据表DataTable，同时重置当前数据行DataRow为当前数据表DataTable的第一行。</value>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataTableBy(System.String,System.Object[])">
            <summary>
            返回由queryScript查询字符串建立的数据表DataTable，
            同时设置为当前数据表DataTable，
            并且设置当前数据行DataRow为当前数据表DataTable的第一行。
            </summary>
            <param name="queryScript">复合格式查询字符串，如果为空字符串则返回当前数据表DataTable。</param>
            <param name="formatArgs">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <returns>返回查询获得的数据表对象，同时设置当前数据行DataRow默认为DataTable的第一行。</returns>
            <remarks>
            <para>
            如果查询字符串不为空，查询结果将重置数据视图及数据行。
            </para>
            <para>
            如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。
            </para>
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataTableBy(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            返回由queryScript查询字符串建立的数据表DataTable，
            同时设置为当前数据表DataTable，
            并且设置当前数据行DataRow为当前数据表DataTable的第一行。
            </summary>
            <param name="queryScript">查询字符串，如果为空字符串则返回当前数据表DataTable。</param>
            <param name="params">参数集(可选参数，如果没有参数需要传入不填)。</param>
            <returns>返回查询获得的数据表对象，同时设置当前数据行DataRow默认为DataTable的第一行。</returns>
            <remarks>
            <para>
            如果查询字符串不为空，查询结果将重置数据视图及数据行。
            </para>
            <para>
            如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。
            </para>
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataTableBy(System.Data.Common.DbDataReader)">
            <summary>
            由数据阅读器返回数据表并且修改当前数据表(连接必须为打开状态)。
            </summary>
            <param name="reader">数据阅读器</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataTableByCreate(System.String[])">
            <summary>
            由指定的列名称组创建当前数据表并且返回该表(改变当前数据表DataTable)。
            </summary>
            <param name="columnNames">指定的列名称组。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataTableByCreate(System.Data.DataColumn[])">
            <summary>
            由指定的数据列组创建当前数据表并且返回该表(改变当前数据表DataTable)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Sort(System.String)">
            <summary>
            排序当前数据表，并且返回排序后的数据表(不改变当前数据表DataTable)。
            </summary>
            <param name="orders">排序条件字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.query(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            返回由queryScript查询字符串建立的数据表DataTable。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.query(System.Data.IDataReader)">
            <summary>
            由数据阅读器返回数据表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.getSchemaTable(System.Data.IDataReader)">
            <summary>
            由数据阅读器创建架构表(重名的字段自动重命名)。
            </summary>
            <param name="reader">数据阅读器</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.AcceptChanges(System.Boolean)">
            <summary>
            提交分布式修改数据对数据表数据的修改(仅支持单表结构，不支持子查询)。
            </summary>
            <param name="modifyDataBase">是否提交数据到数据库中(True表示提交，False表示仅修改当前数据表DataTable中的内容，不提交到数据库表中)。</param>
            <returns>提交到数据库中时受影响的行数,否则为-1。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.AcceptChanges(System.String)">
            <summary>
            提交分布式修改数据表对数据表数据的修改(仅支持单表结构，不支持子查询)。
            </summary>
            <param name="tableName">指明的提交到数据库中的表名称(如果空表名则不提交到数据库中)。</param>
            <returns>提交到数据库中时受影响的行数,否则为-1。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.AcceptChanges(App.FunctionLibrary.WhereBuilder)">
            <summary>
            提交分布式修改/删除数据的修改(仅支持通过 EditRow(tableName)或Remove(tableName) 方式修改数据的单表结构，不支持子查询)。
            </summary>
            <param name="wb">修改表数据的条件语句</param>
            <returns>提交到数据库中时受影响的行数,否则为-1。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.RejectChanges">
            <summary>
            放弃分布式修改数据表对数据表数据的修改。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Clear">
            <summary>
            清空/复位当前数据表内数据，不改变数据表结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.insertData(System.String)">
            <summary>
            根据当前行往数据库中添加数据
            </summary>
            <param name="tableName">需要插入到数据库中的表名称(缺省表示使用上一次查询数据库时查询脚本中的表名称)。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.updateData(System.String)">
            <summary>
            修改当前行的数据到数据库
            </summary>
            <param name="tableName">需要插入到数据库中的表名称(缺省表示使用上一次查询数据库时查询脚本中的表名称)。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.updateData(App.FunctionLibrary.WhereBuilder)">
            <summary>
            修改当前行的数据到数据库
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.removeData(System.String)">
            <summary>
            从数据库中删除当前数据
            </summary>
            <param name="tableName">需要插入到数据库中的表名称(缺省表示使用上一次查询数据库时查询脚本中的表名称)。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.removeData(App.FunctionLibrary.WhereBuilder)">
            <summary>
            从数据库中删除当前数据
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.columnValueExpress(System.Data.DataColumn,System.Boolean)">
            <summary>
            数据库脚本中字段值的字符串表达式
            </summary>
            <param name="column">当前数据行DataRow中的列</param>
            <param name="aswhere">是否为条件类型(条件类型取DataValues的值，否则取DataRow的值)。</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.columnValueBinary(System.Data.DataColumn)">
            <summary>
            列二进制流值
            </summary>
            <param name="column">当前数据行DataRow中的列</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.getValueString(System.Data.DataColumn,System.Object)">
            <summary>
            获取值的脚本表达式字符串
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.getTableName(System.String)">
            <summary>
            获取指明查询脚本的表名称
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.stepGroup(System.Collections.Generic.List{App.FunctionLibrary.Pair},System.String,System.Int32)">
            <summary>
            对列表进行分组
            </summary>
            <param name="list">需要分组的列表</param> 
            <param name="delimiter">分隔列表项的字符</param>
            <param name="stepLength">分组的步长</param>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Rows">
            <summary>
            获取当前数据表DataTable的数据行集合。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.Columns">
            <summary>
            获取当前数据表DataTable的数据列集合。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.RowCount">
            <summary>
            获取当前数据表DataTable的总行数。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.ColumnCount">
            <summary>
            获取当前数据表DataTable的总列数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.ToArray">
            <summary>
            由当前数据表返回二维数组
            </summary>
            <returns>返回的二维数组，第一维为行、第二维为列。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.ToArray``1(System.String)">
            <summary>
            将当前数据表中指定的字段值复制到新数组中。
            </summary>
            <param name="columnName">字段限定名</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.ToArray``1(System.Func{System.Data.DataRow,``0})">
            <summary>
            对当前数据表中的行集合输出数组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.ToString">
            <summary>
            返回当前数据表DataTable的格式化字符串(列分隔符号为Tab制表符，行分隔符号为CrLf回车换行符。)
            </summary> 
            <returns>返回格式化的数据表字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.ToString(System.String,System.String,System.Boolean)">
            <summary>
            返回当前数据表DataTable的格式化字符串。
            </summary>
            <param name="columnDelimiter">列分隔符号。</param>
            <param name="rowDelimiter">行分隔符号。</param>
            <param name="includeColumnName">是否包括列名称。</param>
            <returns>返回格式化的数据表字符串。</returns>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DataView">
            <summary>
            当前数据表的默认数据试图
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.CreateParameters">
            <summary>
            数据映射参数集生成器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.ToEntity``1">
            <summary>
            由当前DataTable创建数据实体列表
            </summary>
            <typeparam name="T">指定的实例类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataEntityBy``1(System.Data.DataRow)">
            <summary>
            由指定的DataRow返回数据实体类项目
            </summary>
            <typeparam name="T">指定的实例类型</typeparam>
            <param name="row">指定的DataRow</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataEntityBy``1(System.String,System.Object[])">
            <summary>
            由指定的数据库查询字符串返回数据实体列表(不改变当前DataTable)
            </summary>
            <typeparam name="T">指定的实例类型</typeparam>
            <param name="queryScript">指定的数据库查询字符串</param>
            <param name="formatArgs">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <remarks>
            如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataEntityBy``1(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            由指定的数据库查询字符串返回数据实体列表(不改变当前DataTable)
            </summary>
            <typeparam name="T">指定的实例类型</typeparam>
            <param name="queryScript">指定的数据库查询字符串</param>
            <param name="params">参数集(可选参数，如果没有参数需要传入不填)。</param>
            <remarks>
            如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataEntityBy``1(System.Data.DataTable)">
            <summary>
            由指定的DataTable返回数据实体列表
            </summary>
            <typeparam name="T">指定的实例类型</typeparam>
            <param name="table">指定的DataTable数据源</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataValueBy(System.String,System.Object[])">
            <summary>
            由查询字符串直接返回数据表首行首列字段值(不改变当前数据表DataTable)。
            </summary>
            <param name="queryScript">查询字符串，如果为空字符串则使用当前数据表DataTable。</param>
            <param name="formatArgs">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <remarks>如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataValueBy``1(System.String,System.Object[])">
            <summary>
            由查询字符串直接返回数据表首行首列字段值(不改变当前数据表DataTable)。
            </summary>
            <typeparam name="T">返回查询值的泛型类型。</typeparam>
            <param name="queryScript">查询字符串，如果为空字符串则使用当前数据表DataTable。</param>
            <param name="formatArgs">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <remarks>如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataValueBy(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            由查询字符串直接返回数据表首行首列字段值(不改变当前数据表DataTable)。
            </summary>
            <param name="queryScript">查询字符串，如果为空字符串则使用当前数据表DataTable。</param>
            <param name="params">参数集(可选参数，如果没有参数需要传入不填)。</param>
            <remarks>如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.DataValueBy``1(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            由查询字符串直接返回数据表首行首列字段值(不改变当前数据表DataTable)。
            </summary>
            <typeparam name="T">返回查询值的泛型类型。</typeparam>
            <param name="queryScript">查询字符串，如果为空字符串则使用当前数据表DataTable。</param>
            <param name="params">参数集(可选参数，如果没有参数需要传入不填)。</param>
            <remarks>如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。</remarks>
        </member>
        <member name="F:App.FunctionLibrary.AdoDotNet.LastTickDate">
            <summary>
            上一次获取到时刻
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.AdoDotNet.TickDifference">
            <summary>
            时间差
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.AdoDotNet.TimeChangedEventHandled">
            <summary>
            时间改变事件是否已经激活
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.AdoDotNet.locker">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AdoDotNet.DateTime">
            <summary>
            获取数据库当前时刻,如果未设置连接字符串则返回本机时间(单位:毫秒，自动隔离数据库，1分钟内不重复取数据库时间)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.FindTable(System.String)">
            <summary>
            过滤符合条件的数据行并且返回数据表DataTable
            </summary>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合过滤条件的数据表</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.FindTable(System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合多个列条件的数据行并且返回数据表
            </summary>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">查找比较操作符。</param>
            <returns>返回符合过滤条件的数据表</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.FindTable(System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合多个列条件的数据行并且返回数据表
            </summary>
            <param name="columnName">过滤的列名称。</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">查找比较操作符。</param>
            <returns>返回符合过滤条件的数据表</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.FindAll(System.String)">
            <summary>
             过滤符合条件的数据行并且返回数据行列表
            </summary>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合过滤条件的数据行索引数组</returns>
            <remarks>如果没有匹配条件的数据行，则返回长度为0的数组</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.FindAll(System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary> 
            过滤单个多个列条件的数据行并且返回数据行列表
            </summary>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值数组</param>
            <param name="matching">搜索比较操作符。</param>
            <returns>返回符合筛选条件的数据行索引数组</returns>
            <remarks>如果没有匹配条件的数据行，则返回长度为0的数组</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.FindAll(System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤单个多个列条件的数据行并且返回数据行列表
            </summary>
            <param name="columnName">过滤的列名称数组</param>
            <param name="value">匹配过滤列名称的列值数组</param>
            <param name="matching">搜索比较操作符</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Find(System.String)">
            <summary>
            查找符合条件的第一个数据行。
            </summary>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合筛选条件的第一个数据行。</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Find(System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            查找符合条件的第一个数据行。
            </summary>
            <param name="columnName">过滤的列名称数组</param>
            <param name="value">匹配过滤列名称的列值数组</param>
            <param name="matching">搜索比较操作符</param>
            <returns>返回符合筛选条件的第一个数据行。</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.Find(System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合单个列条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">搜索比较操作符</param>
            <returns>返回符合筛选条件的第一个数据行。</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.FindIndex(System.String)">
            <summary>
            查找符合条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合筛选条件的第一个数据行索引</returns>
            <remarks>如果没有匹配条件的数据行，则返回-1</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.FindIndex(System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合单个列条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">搜索比较操作符。</param>
            <returns>返回符合过滤条件的第一个数据行索引</returns>
            <remarks>如果没有匹配条件的数据行，则返回-1</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.FindIndex(System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合单个列条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="columnName">过滤的列名称</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">搜索比较操作符。</param>
            <returns>返回符合过滤条件的第一个数据行索引</returns>
            <remarks>如果没有匹配条件的数据行，则返回-1</remarks>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.ForEach(System.Action{System.Data.DataRow})">
            <summary>
            对当前数据表 DataTable 的数据行集合进行循环。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.SumValue(System.String)">
            <summary>
            对指定数据表中指定列进行数字累计加合计
            </summary>
            <param name="columnName">指定的列名称。</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.SumValue(System.Int32)">
            <summary>
            对当前数据表中指定列进行数字累计加合计
            </summary>
            <param name="columnIndex">指定的列索引</param>
        </member>
        <member name="M:App.FunctionLibrary.AdoDotNet.SumValue(System.Data.DataColumn)">
            <summary>
            对指定数据表中指定列进行数字累计加合计
            </summary>
            <param name="column">指定的列对象</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="T:App.FunctionLibrary.BindingAttribute">
            <summary>
            枚举值绑定属性类
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.BindingAttribute.Code">
            <summary>
            枚举值绑定的编码信息
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.BindingAttribute.Summary">
            <summary>
            枚举绑定的摘要信息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BindingAttribute.#ctor(System.String)">
            <summary>
            枚举值绑定属性类
            </summary>
            <param name="summary">枚举绑定的摘要信息</param>
        </member>
        <member name="M:App.FunctionLibrary.BindingAttribute.#ctor(System.String,System.String)">
            <summary>
            枚举值绑定属性类
            </summary>
            <param name="code">枚举绑定的编码信息</param>
            <param name="summary">枚举绑定的摘要信息</param>
        </member>
        <member name="T:App.FunctionLibrary.ParamAttribute">
            <summary>
            参数名称定义
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ParamAttribute.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ParamAttribute.Remark">
            <summary>
            参数注释
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParamAttribute.#ctor(System.String,System.String)">
            <summary>
            定时参数属性配置
            </summary>
            <param name="name">参数名称</param>
            <param name="remark">参数注释</param>
        </member>
        <member name="M:App.FunctionLibrary.ParamAttribute.#ctor(System.String)">
            <summary>
            定时参数属性配置
            </summary>
            <param name="name">参数名称</param>
        </member>
        <member name="T:App.FunctionLibrary.ArrayEqualityComparer`1">
            <summary>
            数组元素相同比较器
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.IgnoreCaseComparer`1">
            <summary>
            不区分大小写的比较器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IgnoreCaseComparer`1.Compare(`0,`0)">
            <summary>
            对两个比较值进行不区分大小写的比较，并返回一个整数，指示二者在排序顺序中的相对位置,比较时忽略字符串的大小写。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IgnoreCaseComparer`1.Equals(`0,`0)">
            <summary>
            两个比较值是否相等,比较时忽略字符串的大小写。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IgnoreCaseComparer`1.GetHashCode(`0)">
            <summary>
            获取比较值的哈希代码。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.QuickSorter.QuickSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,App.FunctionLibrary.Sorter[]})">
            <summary>
            快速排序(折半算法,多字段排序时使用 Sorter[] 数组返回值,分别对各个字段指定排序方式)
            </summary>
            <remarks>经百万数据测试，没有系统带的排序快</remarks>
        </member>
        <member name="T:App.FunctionLibrary.SortComparer`1">
            <summary>
            排序比较器
            </summary>
            <typeparam name="T">参与排序比较的实体类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.SortComparer`1.#ctor(System.Func{`0,App.FunctionLibrary.Sorter[]})">
            <summary>
            排序比较器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SortComparer`1.Selector">
            <summary>
            比较器取值委托器(Nothing表示按T对象值比较)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SortComparer`1.Compare(`0,`0)">
            <summary>
            对同一类型的两个对象执行不区分大小写的比较，并返回一个值，指示其中一个对象是小于、等于还是大于另一个对象。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Configuration">
            <summary>
            应用程序配置文件管理器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Configuration.File">
            <summary>
            配置文件(默认:Config.xml)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Configuration.Exists">
            <summary>
            配置文件是否存在
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Configuration.IsDebugging">
            <summary>
            当前运行环境是否处于调试运行期(开发环境代码调试运行)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Configuration.Values">
            <summary>
            配置值列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Configuration.Nodes">
            <summary>
            配置项列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Configuration.Document">
            <summary>
            配置文件(Config.xml)的Xml文档。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Configuration.NodeIndexer">
            <summary>
            配置项索引器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Configuration.NodeIndexer.Item(System.String[])">
            <summary>
            根据配置项名称获取或设置配置项节点。
            </summary>
            <param name="names">配置项名称组(忽略大小写,忽略根节点)</param>
        </member>
        <member name="M:App.FunctionLibrary.Configuration.Find(System.String[])">
            <summary>
            在配置Xml文档中查找符合名称组条件的第一个子节点(忽略大小写)。
            </summary>
            <param name="names">搜索的子节点名称组(忽略大小写,忽略根节点)</param>
        </member>
        <member name="M:App.FunctionLibrary.Configuration.FindAll(System.String[])">
            <summary>
            在配置Xml文档中查找所有符合名称组条件的子节点(忽略大小写)。
            </summary>
            <param name="names">搜索的子节点名称组(忽略大小写,忽略根节点)</param>
        </member>
        <member name="M:App.FunctionLibrary.Configuration.FindCreate(System.String[])">
            <summary>
            在配置Xml文档中查找符合名称组条件的第一个子节点,如果未找到子节点时则自动创建该节点(忽略大小写)。
            </summary>
            <param name="names">搜索的子节点名称组(忽略大小写,忽略根节点)</param>
        </member>
        <member name="M:App.FunctionLibrary.Configuration.Save(System.Boolean)">
            <summary>
            保存配置文件
            </summary>
            <param name="ignoreChangedEvent">是否忽略 Changed 事件。</param>
        </member>
        <member name="P:App.FunctionLibrary.Configuration.IsSuspendedSave">
            <summary>
            配置文件的保存事件是否已经挂起。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Configuration.SuspendSave">
            <summary>
            挂起配置文件的保存功能
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Configuration.ResumeSave(System.Boolean)">
            <summary>
            恢复配置文件的保存功能
            </summary>
            <param name="saveOnce">恢复时是否立即保存一次文件</param>
        </member>
        <member name="E:App.FunctionLibrary.Configuration.Changed">
            <summary>
            配置内容改变事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Configuration.OnChanged">
            <summary>
            激活内容改变事件
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DBFactory">
            <summary>
            数据工厂
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.#ctor(System.Data.DataTable)">
            <summary>
            数据工厂初始化
            </summary>
            <param name="table">初始化数据工厂的数据表</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.#ctor">
            <summary>
            数据工厂初始化
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.#ctor(System.Data.DataColumn[])">
            <summary>
            数据工厂初始化
            </summary>
            <param name="columns">初始化数据表的数据列数组</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.#ctor(System.String[])">
            <summary>
            数据工厂初始化
            </summary>
            <param name="columnNames">创建DataTable表结构的列名称(列对象数据类型为String)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.#ctor(System.String)">
            <summary>
            数据工厂初始化
            </summary>
            <param name="connectionString">访问数据库的连接字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.#ctor(System.Data.Common.DbConnection)">
            <summary>
            数据工厂初始化
            </summary>
            <param name="connection">访问数据库的连接对象</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.#ctor(System.Data.Common.DbTransaction)">
            <summary>
            数据工厂初始化
            </summary>
            <param name="trans">数据库事务控制对象</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.#ctor(App.FunctionLibrary.DBFactory,System.Data.DataTable)">
            <summary>
            数据工厂初始化
            </summary>
            <param name="db">用于初始化的数据操作对象(仅包括连接和事务)。</param>
            <param name="table">用于初始化数据工厂的数据表。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.#ctor(System.Data.DataTable,App.FunctionLibrary.DBFactory)">
            <summary>
            数据工厂初始化
            </summary>
            <param name="db">用于初始化的数据操作对象(仅包括连接和事务)。</param>
            <param name="table">用于初始化数据工厂的数据表。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Clone">
            <summary>
            创建一个仅包含连接和事务的数据工厂副本。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Create(System.Type,System.String,System.Char)">
            <summary>
            创建数据工厂
            </summary>
            <param name="connectionType">数据库连接类型</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="parameterChar">标识参数的标记字符(默认:@)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Create_SQL(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            创建 SQLServer 数据工厂
            </summary>
            <param name="source">数据源</param>
            <param name="base">数据库</param>
            <param name="userId">用户名</param>
            <param name="password">密码</param>
            <param name="timeout">连接超时时间(秒钟)</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Create_OleDb(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Char)">
            <summary>
            创建 OleDb 数据工厂
            </summary>
            <param name="provider">数据引擎</param>
            <param name="source">数据源</param>
            <param name="base">数据库</param>
            <param name="userId">用户名</param>
            <param name="password">密码</param>
            <param name="timeout">连接超时时间(秒钟)</param>
            <param name="parameterChar">参数界定字符</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Create_OleDb(System.String,System.Char)">
            <summary>
            创建 OleDb 数据工厂
            </summary>
            <param name="parameterChar">参数界定字符</param>
            <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CreateTable(System.String[])">
            <summary>
            由指定的列名称组创建当前数据表并且返回该表(改变当前数据表DataTable)。
            </summary>
            <param name="columnNames">指定的列名称组。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CreateTable(System.Data.DataColumn[])">
            <summary>
            由指定的数据列组创建当前数据表并且返回该表(改变当前数据表DataTable)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Dispose">
            <summary>
            销毁,自动回滚未提交的事务
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Symbol">
            <summary>
            在脚本中标识参数的标记字符(默认:@)。
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.DBFactory.SelectCompleted">
            <summary>
            数据工厂查询事件(不考虑事务是否提交)
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.DBFactory.InsertCompleted">
            <summary>
            数据工厂新增事件(不考虑事务是否提交)
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.DBFactory.UpdateCompleted">
            <summary>
            数据工厂更新事件(不考虑事务是否提交)
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.DBFactory.DeleteCompleted">
            <summary>
            数据工厂更新事件(不考虑事务是否提交)
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.DBFactory.ProcedureCompleted">
            <summary>
            数据工厂存储过程事件(不考虑事务是否提交)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.OnDbFactoryCompleted(System.String,App.FunctionLibrary.ParameterBuilder,System.TimeSpan)">
            <summary>
            激活数据工厂执行完毕事件
            </summary>
            <param name="script">操作脚本</param>
            <param name="parameters">查询参数</param>
            <param name="elapsed">操作耗时</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.OnSelectCompleted(System.String,App.FunctionLibrary.ParameterBuilder,System.TimeSpan)">
            <summary>
            激活数据工厂查询事件
            </summary>
            <param name="script">查询脚本</param>
            <param name="parameters">查询参数</param>
            <param name="elapsed">操作耗时</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.OnInsertCompleted(System.String,App.FunctionLibrary.ParameterBuilder,System.TimeSpan)">
            <summary>
            数据工厂新增事件
            </summary>
            <param name="script">新增脚本</param>
            <param name="parameters">新增参数</param>
            <param name="elapsed">操作耗时</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.OnUpdateCompleted(System.String,App.FunctionLibrary.ParameterBuilder,System.TimeSpan)">
            <summary>
            数据工厂更新事件
            </summary>
            <param name="script">更新脚本</param>
            <param name="parameters">更新参数</param>
            <param name="elapsed">操作耗时</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.OnDeleteCompleted(System.String,App.FunctionLibrary.ParameterBuilder,System.TimeSpan)">
            <summary>
            数据工厂删除事件
            </summary>
            <param name="script">删除脚本</param>
            <param name="parameters">删除参数</param>
            <param name="elapsed">操作耗时</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.OnProcedureCompleted(System.String,App.FunctionLibrary.ParameterBuilder,System.TimeSpan)">
            <summary>
            数据工厂存储过程事件
            </summary>
            <param name="script">存储过程脚本</param>
            <param name="parameters">存储过程参数</param>
            <param name="elapsed">操作耗时</param>
        </member>
        <member name="F:App.FunctionLibrary.DBFactory.isInnerCreate">
            <summary>
            内部创建的连接
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DBFactory.isInnerOpened">
            <summary>
            内部打开的连接
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.DBFactory.ConnectionChanged">
            <summary>
            数据库连接改变事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.OnConnectionChanged">
            <summary>
            激活数据库连接改变事件
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.ConnectionType">
            <summary>
            数据连接对象类型(默认:OleDbConnection)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.ConnectionString">
            <summary>
            数据连接字符串
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Connection">
            <summary>
            数据连接
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CreateConnection">
            <summary>
            使用默认连接字符串创建数据连接(如未设置连接 Connection 时，默认按照 OleDbConnection 类型进行连接创建)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CreateConnection``1">
            <summary>
            使用默认连接字符串创建数据连接
            </summary>
            <typeparam name="T">创建的连接类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CreateConnection(System.String)">
            <summary>
            创建数据连接(未设置连接 Connection 时，默认按照 OleDbConnection 类型进行连接创建)。
            </summary>
            <param name="connectionString">创建数据库连接使用的连接字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CreateConnection(System.Type,System.String)">
            <summary>
            创建数据连接
            </summary>
            <param name="connectionType">数据连接实例的类型</param>
            <param name="connectionString">数据连接字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.OpenConnect">
            <summary>
            打开数据库连接(使用默认连接字符串创建连接对象)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CloseConnect">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DBFactory.isInnerTrans">
            <summary>
            内部打开的事务
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Transaction">
            <summary>
            数据事务实例
            </summary>
            <value>设置数据事务对象(当两个对象进行事务同步时使用)。</value>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            开启数据事务(销毁对象时未提交的事务将自动进行回滚；事务处理的隔离级别，默认隔离级别 IsolationLevel.ReadCommitted，事务内修改了数据后，外部不能读不能改。)
            </summary> 
            <param name="isolation">事务处理的隔离级别，默认可以进行脏读，不发布共享锁，也不接受独占锁。</param>
            <returns>成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CommitTrans">
            <summary>
            提交数据事务
            </summary>
            <returns>成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.RollbackTrans">
            <summary>
            放弃数据事务(销毁对象时未提交的事务将自动进行回滚)。
            </summary>
            <returns>成功返回True，否则返回False。</returns>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Command">
            <summary>
            数据操作命令
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CommandBy(System.String,System.Object[])">
            <summary>
            获取或者创建Command对象(仅返回对象，不执行脚本CommandText)。
            </summary>
            <param name="commandText">数据访问命令脚本字符串。</param>
            <param name="formatArgs">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <returns>返回数据命令对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CommandBy(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            获取或者创建Command对象(仅返回对象，不执行脚本CommandText)。
            </summary>
            <param name="commandText">数据访问命令脚本字符串。</param>
            <param name="parameters">参数列表</param>
            <returns>返回数据命令对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Execute(System.String,System.Object[])">
            <summary>
            执行Transact-SQL脚本语句，并且返回受影响的行数。
            </summary>
            <param name="commandText">需要执行的SQL脚本语句字符串</param> 
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Execute(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            执行Transact-SQL脚本语句，并且返回受影响的行数。
            </summary>
            <param name="commandText">需要执行的SQL脚本语句字符串</param> 
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Execute(System.String,App.FunctionLibrary.WhereBuilder)">
            <summary>
            执行Transact-SQL脚本语句，并且返回受影响的行数。
            </summary>
            <param name="commandText">不包含 Where 关键字的SQL脚本语句字符串(条件表达式用 {0} 占位标识，缺省{0}时表示自动追加到查询脚本的末尾行)</param>
            <param name="wb">条件表达式</param>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Table">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Rows">
            <summary>
            获取当前数据表DataTable的数据行集合。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Columns">
            <summary>
            获取当前数据表DataTable的数据列集合。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.RowCount">
            <summary>
            获取当前数据表DataTable的总行数。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.ColumnCount">
            <summary>
            获取当前数据表DataTable的总列数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Query(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            返回由查询脚本 script 建立的数据表 DataTable，同时设置为当前数据表 Table。
            </summary>
            <param name="script">查询脚本字符串表达式，如果为空字符串则返回当前数据表 Table。</param>
            <param name="parameters">参数集(可选参数，如果没有参数需要传入不填)。</param>
            <returns>返回查询获得的数据表对象，同时设置当前数据行DataRow默认为DataTable的第一行。</returns>
            <remarks>
            <para>
            如果查询字符串不为空，查询结果将重置数据视图及数据行。
            </para>
            <para>
            如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。
            </para>
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Query(System.String,System.Object[])">
            <summary>
            返回由查询脚本 script 建立的数据表 DataTable，同时设置为当前数据表 Table。
            </summary>
            <param name="script">复合格式查询字符串，如果为空字符串则返回当前数据表DataTable。</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <returns>返回查询获得的数据表对象，同时设置当前数据行DataRow默认为DataTable的第一行。</returns>
            <remarks>
            <para>
            如果查询字符串不为空，查询结果将重置数据视图及数据行。
            </para>
            <para>
            如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。
            </para>
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Query(System.String,App.FunctionLibrary.WhereBuilder)">
            <summary>
            返回由查询脚本 script 建立的数据表 DataTable，同时设置为当前数据表 Table。
            </summary>
            <param name="script">不包含 Where 关键字的查询脚本字符串表达式(条件表达式用 {0} 占位标识，缺省{0}时表示自动追加到查询脚本的末尾行)</param>
            <param name="wb">查询条件表达式</param>
            <returns>返回查询获得的数据表对象，同时设置当前数据行DataRow默认为DataTable的第一行。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Query``1(System.String,System.Object[])">
            <summary>
            由指定的数据库查询字符串返回数据实体列表(不改变当前 Table)。
            </summary>
            <typeparam name="T">指定的实例类型</typeparam>
            <param name="script">指定的数据库查询字符串</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <remarks>
            如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Query``1(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            由指定的数据库查询字符串返回数据实体列表(不改变当前 Table)。
            </summary>
            <typeparam name="T">指定的实例类型</typeparam>
            <param name="script">指定的数据库查询字符串</param>
            <param name="parameters">参数集(可选参数，如果没有参数需要传入不填)。</param>
            <remarks>
            如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Query``1(System.String,App.FunctionLibrary.WhereBuilder)">
            <summary>
            返回由查询的表名称获取的数据实体列表(不改变当前 Table)。
            </summary>
            <param name="script">不包含 Where 关键字的查询脚本字符串表达式(条件表达式用 {0} 占位标识，缺省{0}时表示自动追加到查询脚本的末尾行)</param>
            <param name="wb">查询条件表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.ConvertQuery``1(``0[])">
            <summary>
            查询结果转换的重写函数
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.OperateMode">
            <summary>
            数据行的操作状态
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.DataRow">
            <summary>
            数据行
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Insert">
            <summary>
            追加数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <returns>返回新追加的数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Insert(System.String)">
            <summary>
            根据数据库表名称追加数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="tableName">用于获取表结构的名称</param>
            <returns>返回新追加的数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Insert(System.Data.DataTable)">
            <summary>
            根据数据表追加数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="table">追加到其中的数据表</param>
            <returns>返回新追加的数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Insert(System.Data.DataRow)">
            <summary>
            新增新行
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Update(System.Int32)">
            <summary>
            编辑数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="index">编辑的数据行行索引</param>
            <returns>返回编辑的当前数据行对象，不改变行索引RowIndex。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Update(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            编辑数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="oldRow">被编辑的原数据行。</param>
            <param name="editedRow">已经完成数据编辑的新行(如缺省必须对被编辑行进行数据赋值)。</param>
            <returns>返回编辑的当前数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Update(System.Data.DataRow,System.Object[])">
            <summary>
            编辑数据行，改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="oldValues">被编辑的原行数据组。</param>
            <param name="editedRow">已经完成数据编辑的行。</param>
            <returns>返回编辑的当前数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Update">
            <summary>
            编辑当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <returns>返回当前数据行对象，如果当前数据行为Nothing则使用当前数据表的第0行，如果当前数据表也同时为空，则返回Nothing。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Update(System.String)">
            <summary>
            修改指定表名称的表数据(不允许使用 DataRow 对列进行赋值，要求调用AcceptChanges提交修改、或者RejectChanges放弃修改，提交修改时必须指定修改条件)。
            </summary>
            <param name="tableName">用于获取表结构的名称</param>
            <returns>返回新修改的数据行对象</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Delete">
            <summary>
            删除当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Delete(System.Data.DataRow)">
            <summary>
            删除指定的数据行，不改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Delete(System.Int32)">
            <summary>
            删除指定索引的数据行，不改变当前数据行(要求调用AcceptChanges提交修改、或者RejectChanges放弃修改)。
            </summary>
            <param name="index">需要删除的数据行索引</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Delete(System.String)">
            <summary>
            删除指定名称的表中的数据，不改变当前数据行(要求调用AcceptChanges提交删除、或者RejectChanges放弃删除,提交删除时必须指定删除条件表达式)。
            </summary>
            <param name="tableName">用于获取表结构的名称</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Delete(System.String,App.FunctionLibrary.WhereBuilder)">
            <summary>
            删除指定名称的表中的数据，不改变当前数据行(依据条件表达式作为删除条件)。
            </summary>
            <param name="tableName">用于获取表结构的名称</param>
            <param name="wb">条件表达式</param>
            <returns>提交到数据库中时受影响的行数,否则为-1。</returns>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Item(System.String)">
            <summary>
            返回或者设置当前数据行的列值(DbNull值已经处理为空字符串)。
            </summary>
            <param name="columnName">需要操作列值的列名称</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Item(System.Int32)">
            <summary>
            返回或者设置当前数据行的列值(DbNull值已经处理为空字符串)。
            </summary>
            <param name="columnIndex">需要操作列值的列索引</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Item(System.Int32,System.String)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="rowIndex">需要操作列值的行索引</param>
            <param name="columnName">需要操作列值的列名称</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Item(System.Int32,System.Int32)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="rowIndex">需要操作列值的行索引</param>
            <param name="columnIndex">需要操作列值的列索引</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Item(System.Data.DataRow,System.String)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="row">需要操作列值的数据行</param>
            <param name="columnName">需要操作列值的列名称</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.ConvertToDbValue(System.Object)">
            <summary>
            值转换为数据字段值重载函数
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DBFactory.Item(System.Data.DataRow,System.Int32)">
            <summary>
            返回或者设置数据行的列值,不改变当前行(DbNull值已经处理为空字符串)。
            </summary>
            <param name="row">需要操作列值的数据行</param>
            <param name="columnIndex">需要操作列值的列索引</param>
            <value>设置的列值</value>
            <returns>返回的列值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.ToArray">
            <summary>
            由当前数据表返回二维数组
            </summary>
            <returns>返回的二维数组，第一维为行、第二维为列。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.ToArray``1(System.String)">
            <summary>
            将当前数据表中指定的字段值复制到新数组中。
            </summary>
            <param name="columnName">字段限定名</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.ToArray``1(System.Func{System.Data.DataRow,``0})">
            <summary>
            对当前数据表中的行集合输出数组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.ToString">
            <summary>
            返回当前数据表DataTable的格式化字符串(列分隔符号为Tab制表符，行分隔符号为CrLf回车换行符。)
            </summary> 
            <returns>返回格式化的数据表字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.ToString(System.String,System.String,System.Boolean)">
            <summary>
            返回当前数据表DataTable的格式化字符串。
            </summary>
            <param name="columnDelimiter">列分隔符号。</param>
            <param name="rowDelimiter">行分隔符号。</param>
            <param name="includeColumnName">是否包括列名称。</param>
            <returns>返回格式化的数据表字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.QueryValue(System.String,System.Object[])">
            <summary>
            由查询字符串直接返回数据表首行首列字段值(不改变当前数据表 Table)。
            </summary>
            <param name="script">查询字符串</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.QueryValue(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            由查询字符串直接返回数据表首行首列字段值(不改变当前数据表 Table)。
            </summary>
            <param name="script">查询字符串</param>
            <param name="parameters">参数集(可选参数，如果没有参数需要传入不填)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.QueryValue(System.String,App.FunctionLibrary.WhereBuilder)">
            <summary>
            由查询字符串和条件表达式直接返回数据表首行首列字段值(不改变当前数据表 Table)。
            </summary>
            <param name="script">不包含 Where 关键字的查询脚本字符串表达式(条件表达式用 {0} 占位标识，缺省{0}时表示自动追加到查询脚本的末尾行)</param>
            <param name="wb">查询条件表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.QueryValue``1(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            由查询字符串直接返回数据表首行首列字段值(不改变当前数据表 Table)。
            </summary>
            <typeparam name="T">返回查询值的泛型类型。</typeparam>
            <param name="script">查询字符串。</param>
            <param name="parameters">参数集(可选参数，如果没有参数需要传入不填)。</param>
            <remarks>如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.QueryValue``1(System.String,System.Object[])">
            <summary>
            由查询字符串直接返回数据表首行首列字段值(不改变当前数据表 Table)。
            </summary>
            <typeparam name="T">返回查询值的泛型类型。</typeparam>
            <param name="script">查询字符串。</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <remarks>如果查询字符串以 Select 开始被认定为"SQL文本命令"，否则视为"存储过程"，不支持"表名称"的形式。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.QueryValue``1(System.String,App.FunctionLibrary.WhereBuilder)">
            <summary>
            由查询字符串和条件表达式直接返回数据表首行首列字段值(不改变当前数据表 Table)。
            </summary>
            <param name="script">不包含 Where 关键字的查询脚本字符串表达式(条件表达式用 {0} 占位标识，缺省{0}时表示自动追加到查询脚本的末尾行)</param>
            <param name="wb">查询条件表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.ConvertQueryValue``1(``0)">
            <summary>
            查询值转换的重写函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Exists(System.String,App.FunctionLibrary.WhereBuilder)">
            <summary>
            判断指定的条件在表中是否存在数据。
            </summary>
            <param name="wb">查询条件</param>
            <param name="tableName">查询的表名称(也可以是子查询脚本)</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Exists(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            判断指定的条件在表中是否存在数据。
            </summary>
            <param name="tableName">查询的表名称(也可以是子查询脚本)</param>
            <param name="columnName">查询的条件字段名称</param>
            <param name="value">查询的字段值</param>
            <param name="keep">是否保持空值条件表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Exists(System.String,System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            判断指定的条件在表中是否存在数据。
            </summary>
            <param name="tableName">查询的表名称(也可以是子查询脚本)</param>
            <param name="columnName">查询的条件字段名称</param>
            <param name="value">查询的字段值</param>
            <param name="match">比较匹配操作模式</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Exists(System.String,System.String)">
            <summary>
            判断指定的条件在表中是否存在数据。
            </summary>
            <param name="tableName">查询的表名称(也可以是子查询脚本)</param>
            <param name="filter">查询的条件字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.AcceptChanges">
            <summary>
            提交分布式修改数据对数据表数据的修改(仅支持单表结构，不支持子查询)。
            </summary>
            <returns>提交到数据库中时受影响的行数,否则为-1。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.AcceptChanges(System.String)">
            <summary>
            提交分布式修改数据表对数据表数据的修改(仅支持单表结构，不支持子查询)。
            </summary>
            <param name="tableName">指明的提交到数据库中的表名称(如果空表名则不提交到数据库中)。</param>
            <returns>提交到数据库中时受影响的行数,否则为-1。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.AcceptChanges(App.FunctionLibrary.WhereBuilder)">
            <summary>
            提交分布式修改/删除数据的修改(仅支持通过 EditRow(tableName)或Remove(tableName) 方式修改数据的单表结构，不支持子查询)。
            </summary>
            <param name="wb">修改表数据的条件语句</param>
            <returns>提交到数据库中时受影响的行数,否则为-1。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.RejectChanges">
            <summary>
            放弃分布式修改数据表对数据表数据的修改。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Clear">
            <summary>
            清空/复位当前数据表内数据，不改变数据表结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.CreateParameters">
            <summary>
            数据映射参数集生成器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.TryConnect(System.Boolean)">
            <summary>
            连接测试(连接成功返回True、失败返回False，测试超时时间为连接字符串中指定的超时时间。)
            </summary>
            <param name="tryPing">是否Ping测试数据库服务器</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.TryConnect(System.Int32,System.Boolean)">
            <summary>
            连接测试(连接成功返回True、失败返回False。)
            </summary>
            <param name="timeout">测试连接的超时时间：秒钟(1～60之间的值)。</param> 
            <param name="tryPing">是否Ping测试数据库服务器</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.TryConnect(System.String@,System.Boolean)">
            <summary>
            连接测试(连接成功返回True、失败返回False)。
            </summary> 
            <param name="message">测试连接失败的描述信息。</param>
            <param name="tryPing">是否Ping测试数据库服务器</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.TryConnect(System.Int32,System.String@,System.Boolean)">
            <summary>
            连接测试(连接成功返回True、失败返回False。)
            </summary>
            <param name="timeout">测试连接的超时时间：秒钟(1～60之间的值)。</param>
            <param name="message">测试连接失败的描述信息。</param> 
            <param name="tryPing">是否Ping测试数据库服务器</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.beginTry(System.String,System.Int32,System.Data.Common.DbConnection,System.Boolean,System.String@)">
            <summary>
            开始委托测试
            </summary>
            <param name="hostNameOrAddress">数据库服务器名称或者地址</param>
            <param name="timeout">超时时间(秒钟)</param>
            <param name="connect">数据库连接</param>
            <param name="tryPing">是否进行Ping测试服务器</param>
            <param name="messsage">输出测试结果</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.FindTable(System.String)">
            <summary>
            过滤符合条件的数据行并且返回数据表DataTable
            </summary>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合过滤条件的数据表</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.FindTable(System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合多个列条件的数据行并且返回数据表
            </summary>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">查找比较操作符。</param>
            <returns>返回符合过滤条件的数据表</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.FindTable(System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合多个列条件的数据行并且返回数据表
            </summary>
            <param name="columnName">过滤的列名称。</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">查找比较操作符。</param>
            <returns>返回符合过滤条件的数据表</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.FindAll(System.String)">
            <summary>
             过滤符合条件的数据行并且返回数据行列表
            </summary>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合过滤条件的数据行索引数组</returns>
            <remarks>如果没有匹配条件的数据行，则返回长度为0的数组</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.FindAll(System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary> 
            过滤单个多个列条件的数据行并且返回数据行列表
            </summary>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值数组</param>
            <param name="matching">搜索比较操作符。</param>
            <returns>返回符合筛选条件的数据行索引数组</returns>
            <remarks>如果没有匹配条件的数据行，则返回长度为0的数组</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.FindAll(System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤单个多个列条件的数据行并且返回数据行列表
            </summary>
            <param name="columnName">过滤的列名称数组</param>
            <param name="value">匹配过滤列名称的列值数组</param>
            <param name="matching">搜索比较操作符</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Find(System.String)">
            <summary>
            查找符合条件的第一个数据行。
            </summary>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合筛选条件的第一个数据行。</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Find(System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            查找符合条件的第一个数据行。
            </summary>
            <param name="columnName">过滤的列名称数组</param>
            <param name="value">匹配过滤列名称的列值数组</param>
            <param name="matching">搜索比较操作符</param>
            <returns>返回符合筛选条件的第一个数据行。</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.Find(System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合单个列条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">搜索比较操作符</param>
            <returns>返回符合筛选条件的第一个数据行。</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.FindIndex(System.String)">
            <summary>
            查找符合条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合筛选条件的第一个数据行索引</returns>
            <remarks>如果没有匹配条件的数据行，则返回-1</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.FindIndex(System.Int32,System.String,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合单个列条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">搜索比较操作符。</param>
            <returns>返回符合过滤条件的第一个数据行索引</returns>
            <remarks>如果没有匹配条件的数据行，则返回-1</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.FindIndex(System.String,System.String,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合单个列条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="columnName">过滤的列名称</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">搜索比较操作符。</param>
            <returns>返回符合过滤条件的第一个数据行索引</returns>
            <remarks>如果没有匹配条件的数据行，则返回-1</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.ForEach(System.Action{System.Data.DataRow})">
            <summary>
            对当前数据表 DataTable 的数据行集合进行循环。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.SumValue(System.String)">
            <summary>
            对指定数据表中指定列进行数字累计加合计
            </summary>
            <param name="columnName">指定的列名称。</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.SumValue(System.Int32)">
            <summary>
            对当前数据表中指定列进行数字累计加合计
            </summary>
            <param name="columnIndex">指定的列索引</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.SumValue(System.Data.DataColumn)">
            <summary>
            对指定数据表中指定列进行数字累计加合计
            </summary>
            <param name="column">指定的列对象</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.op_Implicit(App.FunctionLibrary.DBFactory)~System.Data.DataTable">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.DBFactory.TABLECONTEXT.Table">
            <summary>
            架构表
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DBFactory.TABLECONTEXT.DbTypeNames">
            <summary>
            数据库基类型名称
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DBFactory.TABLECONTEXT.Insert">
            <summary>
            新增操作上下文
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DBFactory.TABLECONTEXT.Update">
            <summary>
            更新操作上下文
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DBFactory.TABLECONTEXT.Delete">
            <summary>
            删除操作上下文
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DBFactory.Context">
            <summary>
            当前数据操作上下文
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.createCommand(System.Data.Common.DbConnection)">
            <summary>
            创建数据命令实例
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.makeOleParameterScript(System.String@,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            处理Ole格式包括参数的的脚本,并返回参数名称组。
            </summary>
            <param name="script">需要处理的脚本</param>
            <param name="params">传入的参数组</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.correctParameter(App.FunctionLibrary.ParameterBuilder@)">
            <summary>
            修正参数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.query(System.String,App.FunctionLibrary.ParameterBuilder)">
            <summary>
            返回由queryScript查询字符串建立的数据表DataTable。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.query(System.Data.IDataReader)">
            <summary>
            由数据阅读器返回数据表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.getSchemaTable(System.Data.IDataReader)">
            <summary>
            由数据阅读器创建架构表(重名的字段自动重命名)。
            </summary>
            <param name="reader">数据阅读器</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.insertData(System.String)">
            <summary>
            根据当前行往数据库中添加数据
            </summary>
            <param name="tableName">需要插入到数据库中的表名称(缺省表示使用上一次查询数据库时查询脚本中的表名称)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.updateData(System.String)">
            <summary>
            修改当前行的数据到数据库
            </summary>
            <param name="tableName">需要插入到数据库中的表名称(缺省表示使用上一次查询数据库时查询脚本中的表名称)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.updateData(App.FunctionLibrary.WhereBuilder)">
            <summary>
            修改当前行的数据到数据库
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.removeData(System.String)">
            <summary>
            从数据库中删除当前数据
            </summary>
            <param name="tableName">需要插入到数据库中的表名称(缺省表示使用上一次查询数据库时查询脚本中的表名称)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.removeData(App.FunctionLibrary.WhereBuilder)">
            <summary>
            从数据库中删除当前数据
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.stepGroup(App.FunctionLibrary.PairList,System.String,System.Int32)">
            <summary>
            对列表进行分组
            </summary>
            <param name="list">需要分组的列表</param> 
            <param name="delimiter">分隔列表项的字符</param>
            <param name="stepLength">分组的步长</param>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.getTableName(System.String,App.FunctionLibrary.DbOperateType@,System.Boolean)">
            <summary>
            根据脚本获取表名称
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DBFactory.getParameterString(App.FunctionLibrary.ParameterBuilder)">
            <summary>
            获取参数字符串表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DbConnectExtension.IsOpened(System.Data.Common.DbConnection)">
            <summary>
            连接是否已打开
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DbConnectExtension.IsClosed(System.Data.Common.DbConnection)">
            <summary>
            连接是否已关闭
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DbConnectExtension.OpenAuto(System.Data.Common.DbConnection,System.Action)">
            <summary>
            连接自动打开、关闭
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DebugWatcher">
            <summary>
            调试监视器客户发送端
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DebugWatcher.Messager">
            <summary>
            消息接收器
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DebugWatcher.TargetHwnd">
            <summary>
            监视器的句柄
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DebugWatcher.StartupWithUseaged">
            <summary>
            当使用Send方法发送消息时自动启动监视器
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DebugWatcher.Name">
            <summary>
            监视器名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DebugWatcher.StartFailed">
            <summary>
            已经尝试启动调试器，但是启动失败。
            </summary>
            <remarks>如果启动失败，调试器处于自我保护模式，不会再次自动尝试启动；可以使用 Startup() 方法进行人工启动。</remarks>
        </member>
        <member name="P:App.FunctionLibrary.DebugWatcher.AllowSend">
            <summary>
            监视器是否允许发送监视消息
            </summary>
            <remarks>如果监视器不允许发送消息时，调用 Send() 方法将不发送监视消息。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.#ctor">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.#ctor(System.String)">
            <summary>
            实例化对象
            </summary>
            <param name="name">监视器名称</param>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.#ctor(System.Boolean)">
            <summary>
            实例化对象(需要时立即启动监视器)。
            </summary>
            <param name="startupWithUseage">当使用Send方法第一次发送消息时自动启动监视器。</param>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.#ctor(System.String,System.Boolean)">
            <summary>
            实例化对象(需要时立即启动监视器)。
            </summary>
            <param name="name">监视器名称</param>
            <param name="startupWithUseage">当使用Send方法第一次发送消息时自动启动监视器。</param>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.Startup">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.Stopdown">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.Send(System.String)">
            <summary>
            发送调试信息消息到调试监视器
            </summary>
            <param name="message">发送的消息</param>
        </member>
        <member name="M:App.FunctionLibrary.DebugWatcher.Send(System.Exception)">
            <summary>
            发送调试信息消息到调试监视器
            </summary>
            <param name="ex">发生错误的对象</param>
        </member>
        <member name="T:App.FunctionLibrary.PointM">
            <summary>
            表示在二维平面中定义的十进制类型 x 和 y 坐标的有序对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.#ctor(System.Decimal,System.Decimal)">
            <summary>
            指定坐标初始化 PointM 类的新实例。
            </summary>
            <param name="x">该点的水平位置。</param>
            <param name="y">该点的垂直位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.#ctor(System.Int32,System.Int32)">
            <summary>
            指定坐标初始化 PointM 类的新实例。
            </summary>
            <param name="x">该点的水平位置。</param>
            <param name="y">该点的垂直位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.#ctor(System.Int64,System.Int64)">
            <summary>
            指定坐标初始化 PointM 类的新实例。
            </summary>
            <param name="x">该点的水平位置。</param>
            <param name="y">该点的垂直位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.#ctor(System.Single,System.Single)">
            <summary>
            指定坐标初始化 PointM 类的新实例。
            </summary>
            <param name="x">该点的水平位置。</param>
            <param name="y">该点的垂直位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.#ctor(System.Double,System.Double)">
            <summary>
            指定坐标初始化 PointM 类的新实例。
            </summary>
            <param name="x">该点的水平位置。</param>
            <param name="y">该点的垂直位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.#ctor(System.Drawing.Point)">
            <summary>
            指定坐标初始化 PointM 类的新实例。
            </summary>
            <param name="p">Point 实例对象</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.#ctor(System.Drawing.PointF)">
            <summary>
            指定坐标初始化 PointM 类的新实例。
            </summary>
            <param name="p">PointF 实例对象</param>
        </member>
        <member name="P:App.FunctionLibrary.PointM.X">
            <summary>
            获取或设置此 PointM 的 x 坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PointM.Y">
            <summary>
            获取或设置此 PointM 的 y 坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PointM.IsEmpty">
            <summary>
            获取一个值，该值指示此 PointM 是否为空。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PointM.Empty">
            <summary>
            表示 PointM 类的、成员数据未被初始化的新实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.ToString">
            <summary>
            浅表字符串表达式。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Clone">
            <summary>
            获取此 PointM 的精确副本。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.ToPoint">
            <summary>
            PointM 对象输出为 PointF 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.ToPointF">
            <summary>
            PointM 对象输出为 PointF 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Ceiling">
            <summary>
            通过将 PointM 的值舍入到与其接近的较大整数值，将指定的 PointM 转换为 Point。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Round">
            <summary>
            通过将 PointM 值舍入到最接近的整数值，将指定的 PointM 转换为 Point 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Truncate">
            <summary>
            通过截断 PointM 值，将指定的 PointM 转换为 Point。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Add(App.FunctionLibrary.SizeM)">
            <summary>
            将此 PointM 增加指定的 SizeM,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Add(System.Drawing.Size)">
            <summary>
            将此 PointM 增加指定的 SizeM,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Add(System.Drawing.SizeF)">
            <summary>
            将此 PointM 增加指定的 SizeM,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Add(System.Decimal,System.Decimal)">
            <summary>
            将此 PointM 增加指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Add(System.Int32,System.Int32)">
            <summary>
            将此 PointM 增加指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Add(System.Single,System.Single)">
            <summary>
            将此 PointM 增加指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Add(System.Double,System.Double)">
            <summary>
            将此 PointM 增加指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(App.FunctionLibrary.SizeM)">
            <summary>
            将此 PointM 减去指定的 SizeM 表示的值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(System.Drawing.Size)">
            <summary>
            将此 PointM 减去指定的 SizeM 表示的值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(System.Drawing.SizeF)">
            <summary>
            将此 PointM 减去指定的 SizeM 表示的值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(System.Decimal,System.Decimal)">
            <summary>
            将此 PointM 减去指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(System.Int32,System.Int32)">
            <summary>
            将此 PointM 减去指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(System.Single,System.Single)">
            <summary>
            将此 PointM 减去指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(System.Double,System.Double)">
            <summary>
            将此 PointM 减去指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(App.FunctionLibrary.PointM)">
            <summary>
            将此 PointM 减去指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(System.Drawing.Point)">
            <summary>
            将此 PointM 减去指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Subtract(System.Drawing.PointF)">
            <summary>
            将此 PointM 减去指定的 x 和 y 值,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Offset(App.FunctionLibrary.PointM)">
            <summary>
            将此 PointM 平移指定的 PointM,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Offset(System.Int32,System.Int32)">
            <summary>
            将此 PointM 平移指定的量,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
            <param name="dx">偏移 X 坐标的量。</param>
            <param name="dy">偏移 Y 坐标的量。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Offset(System.Decimal,System.Decimal)">
            <summary>
            将此 PointM 平移指定的量,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
            <param name="dx">偏移 X 坐标的量。</param>
            <param name="dy">偏移 Y 坐标的量。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Offset(System.Single,System.Single)">
            <summary>
            将此 PointM 平移指定的量,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
            <param name="dx">偏移 X 坐标的量。</param>
            <param name="dy">偏移 Y 坐标的量。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Offset(System.Double,System.Double)">
            <summary>
            将此 PointM 平移指定的量,并且返回新的 PointM 结果(不改变当前 PointM)。
            </summary>
            <param name="dx">偏移 X 坐标的量。</param>
            <param name="dy">偏移 Y 坐标的量。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.ToSize">
            <summary>
            此 PointM 转换为 SizeM(X 坐标转换为宽度，Y 坐标转换为高度)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.ToClient(System.Windows.Forms.IWin32Window)">
            <summary>
            当前坐标值对儿转换为客户区坐标系统表示的坐标值对儿。
            </summary>
            <param name="win">客户区坐标系统参考控件或窗口</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.ToScreen(System.Windows.Forms.IWin32Window)">
            <summary>
            当前坐标值对儿转换为屏幕坐标系统表示的坐标值对儿。
            </summary>
            <param name="win">客户区坐标系统参考控件或窗口</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.ToClient(System.IntPtr)">
            <summary>
            当前坐标值对儿转换为客户区坐标系统表示的坐标值对儿。
            </summary>
            <param name="handle">客户区坐标系统参考控件或窗口的句柄</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.ToScreen(System.IntPtr)">
            <summary>
            当前坐标值对儿转换为屏幕坐标系统表示的坐标值对儿。
            </summary>
            <param name="handle">客户区坐标系统参考控件或窗口的句柄</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Equality(App.FunctionLibrary.PointM,App.FunctionLibrary.PointM)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Equality(App.FunctionLibrary.PointM,System.Drawing.Point)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Equality(App.FunctionLibrary.PointM,System.Drawing.PointF)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Inequality(App.FunctionLibrary.PointM,App.FunctionLibrary.PointM)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否不相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Inequality(App.FunctionLibrary.PointM,System.Drawing.Point)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否不相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Inequality(App.FunctionLibrary.PointM,System.Drawing.PointF)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否不相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.Equals(System.Object)">
            <summary>
            返回此实例是否等于另外一个对象实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Addition(App.FunctionLibrary.PointM,App.FunctionLibrary.SizeM)">
            <summary>
            将 PointM 平移给定的 SizeM 表示的值。
            </summary>
            <param name="p">要平移的 PointM。</param>
            <param name="s">要平移的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Addition(App.FunctionLibrary.PointM,System.Drawing.Size)">
            <summary>
            将 PointM 平移给定的 SizeM 表示的值。
            </summary>
            <param name="p">要平移的 PointM。</param>
            <param name="s">要平移的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Addition(App.FunctionLibrary.PointM,System.Drawing.SizeF)">
            <summary>
            将 PointM 平移给定的 SizeM 表示的值。
            </summary>
            <param name="p">要平移的 PointM。</param>
            <param name="s">要平移的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Subtraction(App.FunctionLibrary.PointM,App.FunctionLibrary.SizeM)">
            <summary>
            将 PointM 平移给定的 SizeM 表示的负值。
            </summary>
            <param name="p">要平移的 PointM。</param>
            <param name="s">要平移的负值。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Subtraction(App.FunctionLibrary.PointM,System.Drawing.Size)">
            <summary>
            将 PointM 平移给定的 SizeM 表示的负值。
            </summary>
            <param name="p">要平移的 PointM。</param>
            <param name="s">要平移的负值。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Subtraction(App.FunctionLibrary.PointM,System.Drawing.SizeF)">
            <summary>
            将 PointM 平移给定的 SizeM 表示的负值。
            </summary>
            <param name="p">要平移的 PointM。</param>
            <param name="s">要平移的负值。</param>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Subtraction(App.FunctionLibrary.PointM,App.FunctionLibrary.PointM)">
            <summary>
            获取两个 PointM 点表示矩形的宽度和高度。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Subtraction(App.FunctionLibrary.PointM,System.Drawing.Point)">
            <summary>
            获取两个 PointM 点表示矩形的宽度和高度。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Subtraction(App.FunctionLibrary.PointM,System.Drawing.PointF)">
            <summary>
            获取两个 PointM 点表示矩形的宽度和高度。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Multiply(App.FunctionLibrary.PointM,System.Decimal)">
            <summary>
            将 PointM 的值乘以指定的乘数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Multiply(App.FunctionLibrary.PointM,System.Int32)">
            <summary>
            将 PointM 的值乘以指定的乘数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Multiply(App.FunctionLibrary.PointM,System.Single)">
            <summary>
            将 PointM 的值乘以指定的乘数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Multiply(App.FunctionLibrary.PointM,System.Double)">
            <summary>
            将 PointM 的值乘以指定的乘数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Division(App.FunctionLibrary.PointM,System.Decimal)">
            <summary>
            将 PointM 的值除以指定的除数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Division(App.FunctionLibrary.PointM,System.Int32)">
            <summary>
            将 PointM 的值除以指定的除数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Division(App.FunctionLibrary.PointM,System.Single)">
            <summary>
            将 PointM 的值除以指定的除数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Division(App.FunctionLibrary.PointM,System.Double)">
            <summary>
            将 PointM 的值除以指定的除数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Implicit(App.FunctionLibrary.PointM)~System.Drawing.Point">
            <summary>
            此 PointM 对象实例隐形转换为 Point 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PointM.op_Implicit(App.FunctionLibrary.PointM)~System.Drawing.PointF">
            <summary>
            此 PointM 对象实例隐形转换为 PointF 对象。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.RectangleM">
            <summary>
            存储一组整数，共四个，表示一个矩形的位置和大小。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            用指定的位置和大小初始化 RectangleM 类的新实例。
            </summary>
            <param name="x">矩形左上角的 x 坐标。</param>
            <param name="y">矩形左上角的 y 坐标。</param>
            <param name="width">矩形的宽度。</param>
            <param name="height">矩形的高度。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            用指定的位置和大小初始化 RectangleM 类的新实例。
            </summary>
            <param name="x">矩形左上角的 x 坐标。</param>
            <param name="y">矩形左上角的 y 坐标。</param>
            <param name="width">矩形的宽度。</param>
            <param name="height">矩形的高度。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            用指定的位置和大小初始化 RectangleM 类的新实例。
            </summary>
            <param name="x">矩形左上角的 x 坐标。</param>
            <param name="y">矩形左上角的 y 坐标。</param>
            <param name="width">矩形的宽度。</param>
            <param name="height">矩形的高度。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            用指定的位置和大小初始化 RectangleM 类的新实例。
            </summary>
            <param name="x">矩形左上角的 x 坐标。</param>
            <param name="y">矩形左上角的 y 坐标。</param>
            <param name="width">矩形的宽度。</param>
            <param name="height">矩形的高度。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            用指定的位置和大小初始化 RectangleM 类的新实例。
            </summary>
            <param name="location">矩形区域的左上角。</param>
            <param name="size">矩形区域的宽度和高度。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            用指定的位置和大小初始化 RectangleM 类的新实例。
            </summary>
            <param name="location">矩形区域的左上角。</param>
            <param name="size">矩形区域的宽度和高度。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Drawing.PointF,System.Drawing.Size)">
            <summary>
            用指定的位置和大小初始化 RectangleM 类的新实例。
            </summary>
            <param name="location">矩形区域的左上角。</param>
            <param name="size">矩形区域的宽度和高度。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Drawing.Point,System.Drawing.SizeF)">
            <summary>
            用指定的位置和大小初始化 RectangleM 类的新实例。
            </summary>
            <param name="location">矩形区域的左上角。</param>
            <param name="size">矩形区域的宽度和高度。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Drawing.Rectangle)">
            <summary>
            用指定的 Rectangle 初始化 RectangleM 类的新实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.#ctor(System.Drawing.RectangleF)">
            <summary>
            用指定的 Rectangle 初始化 RectangleM 类的新实例。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.X">
            <summary>
            获取或设置此 RectangleM 结构左上角的 x 坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Y">
            <summary>
            获取或设置此 RectangleM 结构左上角的 y 坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Width">
            <summary>
            获取或设置此 RectangleM 结构的宽度。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Height">
            <summary>
            获取或设置此 RectangleM 结构的高度。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Left">
            <summary>
            获取 RectangleM 结构左边缘的 x 坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Top">
            <summary>
            获取 RectangleM 结构上边缘的 y 坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Right">
            <summary>
            获取 x 坐标，该坐标是此 RectangleM 结构的 RectangleM.X 与 RectangleM.Width 属性值之和。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Bottom">
            <summary>
            获取 y 坐标，该坐标是此 RectangleM 结构的 RectangleM.Y 与 RectangleM.Height 属性值之和。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Location">
            <summary>
            获取或设置此 RectangleM 结构左上角的坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Center">
            <summary>
            获取 RectangleM 结构中心点的坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.LeftCenter">
            <summary>
            获取 RectangleM 结构左侧边框中心点坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.TopCenter">
            <summary>
            获取 RectangleM 结构顶部边框中心点坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.RightCenter">
            <summary>
            获取 RectangleM 结构右侧边框中心点坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.BottomCenter">
            <summary>
            获取 RectangleM 结构底部边框中心点坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Size">
            <summary>
            获取或设置此 RectangleM 的大小。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.SizeHalf">
            <summary>
            获取 RectangleM 半尺寸的大小。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.TopLeftCorner">
            <summary>
            获取 RectangleM 的左上角坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.TopRightCorner">
            <summary>
            获取 RectangleM 的右上角坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.BottomLeftCorner">
            <summary>
            获取 RectangleM 的左下角坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.BottomRightCorner">
            <summary>
            获取 RectangleM 的右下角坐标。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.Empty">
            <summary>
            表示其属性未被初始化的 RectangleM 结构。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RectangleM.IsEmpty">
            <summary>
            测试此 RectangleM 的所有数值属性是否都具有零值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.ToRectangle">
            <summary>
            RectangleM 对象输出为 Rectangle 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.ToRectangleF">
            <summary>
            RectangleM 对象输出为 RectangleF 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Round">
            <summary>
            通过将 RectangleM 舍入到最近的整数值，将指定的 RectangleM 转换为 Rectangle。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Ceiling">
            <summary>
            通过将 RectangleM 值舍入到比它大的相邻整数值，将指定的 RectangleM 结构转换为 Rectangle 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Truncate">
            <summary>
            通过截断 RectangleM 值的小数部分，将指定的 RectangleM 转换为 Rectangle。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Union(App.FunctionLibrary.RectangleM)">
            <summary>
            获取 RectangleM 与另一个 RectangleM 合并后获得的新 RectangleM 结构。
            </summary>
            <param name="r">要合并的矩形。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Union(System.Drawing.Rectangle)">
            <summary>
            获取 RectangleM 与另一个 RectangleM 合并后获得的新 RectangleM 结构。
            </summary>
            <param name="r">要合并的矩形。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Union(System.Drawing.RectangleF)">
            <summary>
            获取 RectangleM 与另一个 RectangleM 合并后获得的新 RectangleM 结构。
            </summary>
            <param name="r">要合并的矩形。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Clone">
            <summary>
            获取 RectangleM 的精确副本。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.ToString">
            <summary>
            浅表字符串表达式。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.ToClient(System.Windows.Forms.IWin32Window)">
            <summary>
            当前坐标值对儿转换为客户区坐标系统表示的坐标值对儿。
            </summary>
            <param name="win">客户区坐标系统参考控件或窗口</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.ToScreen(System.Windows.Forms.IWin32Window)">
            <summary>
            当前坐标值对儿转换为屏幕坐标系统表示的坐标值对儿。
            </summary>
            <param name="win">客户区坐标系统参考控件或窗口</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.ToClient(System.IntPtr)">
            <summary>
            当前矩形区域转换为客户区坐标系统表示的矩形区域。
            </summary>
            <param name="handle">客户区坐标系统参考控件或窗口的句柄</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.ToScreen(System.IntPtr)">
            <summary>
            当前矩形区域转换为屏幕坐标系统表示的矩形区域。
            </summary>
            <param name="handle">客户区坐标系统参考控件或窗口的句柄</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Inflate(App.FunctionLibrary.SizeM)">
            <summary>
            创建并返回指定 RectangleM 结构的放大副本。该副本被放大指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="size">放大量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Inflate(System.Drawing.Size)">
            <summary>
            创建并返回指定 RectangleM 结构的放大副本。该副本被放大指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="size">放大量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Inflate(System.Drawing.SizeF)">
            <summary>
            创建并返回指定 RectangleM 结构的放大副本。该副本被放大指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="size">放大量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Inflate(System.Decimal,System.Decimal)">
            <summary>
            创建并返回指定 RectangleM 结构的放大副本。该副本被放大指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="width">水平放大量。</param>
            <param name="height">垂直放大量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Inflate(System.Int32,System.Int32)">
            <summary>
            创建并返回指定 RectangleM 结构的放大副本。该副本被放大指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="width">水平放大量。</param>
            <param name="height">垂直放大量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Inflate(System.Single,System.Single)">
            <summary>
            创建并返回指定 RectangleM 结构的放大副本。该副本被放大指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="width">水平放大量。</param>
            <param name="height">垂直放大量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Inflate(System.Double,System.Double)">
            <summary>
            创建并返回指定 RectangleM 结构的放大副本。该副本被放大指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="width">水平放大量。</param>
            <param name="height">垂直放大量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Intersect(App.FunctionLibrary.RectangleM)">
            <summary>
            返回 RectangleM 结构与目标结构的交集。如果没有重叠，将返回 RectangleM.Empty。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Intersect(System.Drawing.Rectangle)">
            <summary>
            返回 RectangleM 结构与目标结构的交集。如果没有重叠，将返回 RectangleM.Empty。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Intersect(System.Drawing.RectangleF)">
            <summary>
            返回 RectangleM 结构与目标结构的交集。如果没有重叠，将返回 RectangleM.Empty。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.IsIntersect(App.FunctionLibrary.RectangleM)">
            <summary>
            确定矩形 RectangleM 是否与指定的矩形 value 相交。
            </summary>
            <param name="value">要测试的矩形</param>
            <returns>如果有重叠，此方法将返回 true；否则将返回 false。</returns>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.IsIntersect(System.Drawing.Rectangle)">
            <summary>
            确定矩形 RectangleM 是否与指定的矩形 value 相交。
            </summary>
            <param name="value">要测试的矩形</param>
            <returns>如果有重叠，此方法将返回 true；否则将返回 false。</returns>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.IsIntersect(System.Drawing.RectangleF)">
            <summary>
            确定矩形 RectangleM 是否与指定的矩形 value 相交。
            </summary>
            <param name="value">要测试的矩形</param>
            <returns>如果有重叠，此方法将返回 true；否则将返回 false。</returns>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(App.FunctionLibrary.RectangleM)">
            <summary>
            确定 rect 表示的矩形区域是否完全包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(System.Drawing.Rectangle)">
            <summary>
            确定 rect 表示的矩形区域是否完全包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(System.Drawing.RectangleF)">
            <summary>
            确定 rect 表示的矩形区域是否完全包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(App.FunctionLibrary.PointM)">
            <summary>
            确定指定的点是否包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(System.Drawing.Point)">
            <summary>
            确定指定的点是否包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(System.Drawing.PointF)">
            <summary>
            确定指定的点是否包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(System.Decimal,System.Decimal)">
            <summary>
            确定指定的点是否包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(System.Int32,System.Int32)">
            <summary>
            确定指定的点是否包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(System.Single,System.Single)">
            <summary>
            确定指定的点是否包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Contains(System.Double,System.Double)">
            <summary>
            确定指定的点是否包含在此 RectangleM 结构内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Offset(App.FunctionLibrary.PointM)">
            <summary>
            将此矩形的位置调整指定的量。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Offset(System.Drawing.Point)">
            <summary>
            将此矩形的位置调整指定的量。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Offset(System.Drawing.PointF)">
            <summary>
            将此矩形的位置调整指定的量。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Offset(System.Decimal,System.Decimal)">
            <summary>
            将此矩形的位置调整指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="x">水平偏移量。</param>
            <param name="y">垂直偏移量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Offset(System.Int32,System.Int32)">
            <summary>
            将此矩形的位置调整指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="x">水平偏移量。</param>
            <param name="y">垂直偏移量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Offset(System.Single,System.Single)">
            <summary>
            将此矩形的位置调整指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="x">水平偏移量。</param>
            <param name="y">垂直偏移量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Offset(System.Double,System.Double)">
            <summary>
            将此矩形的位置调整指定的量。不修改原始 RectangleM 结构。
            </summary>
            <param name="x">水平偏移量。</param>
            <param name="y">垂直偏移量。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Add(App.FunctionLibrary.SizeM)">
            <summary>
            将此矩形的宽度和高度与另一个 SizeM 结构的宽度和高度相加。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Add(System.Drawing.Size)">
            <summary>
            将此矩形的宽度和高度与另一个 SizeM 结构的宽度和高度相加。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Add(System.Drawing.SizeF)">
            <summary>
            将此矩形的宽度和高度与另一个 SizeM 结构的宽度和高度相加。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Add(System.Int32,System.Int32)">
            <summary>
            将此矩形的宽度和高度与指定的宽度和高度相加。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Add(System.Decimal,System.Decimal)">
            <summary>
            将此矩形的宽度和高度与指定的宽度和高度相加。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Add(System.Single,System.Single)">
            <summary>
            将此矩形的宽度和高度与指定的宽度和高度相加。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Add(System.Double,System.Double)">
            <summary>
            将此矩形的宽度和高度与指定的宽度和高度相加。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Subtract(App.FunctionLibrary.SizeM)">
            <summary>
            将此矩形的宽度和高度从另一个 SizeM 结构的宽度和高度中减去。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Subtract(System.Drawing.Size)">
            <summary>
            将此矩形的宽度和高度从另一个 SizeM 结构的宽度和高度中减去。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Subtract(System.Drawing.SizeF)">
            <summary>
            将此矩形的宽度和高度从另一个 SizeM 结构的宽度和高度中减去。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Subtract(System.Int32,System.Int32)">
            <summary>
            将此矩形的宽度和高度减去指定的宽度和高度。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Subtract(System.Decimal,System.Decimal)">
            <summary>
            将此矩形的宽度和高度减去指定的宽度和高度。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Subtract(System.Single,System.Single)">
            <summary>
            将此矩形的宽度和高度减去指定的宽度和高度。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Subtract(System.Double,System.Double)">
            <summary>
            将此矩形的宽度和高度减去指定的宽度和高度。不修改原始 RectangleM 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Equality(App.FunctionLibrary.RectangleM,App.FunctionLibrary.RectangleM)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Inequality(App.FunctionLibrary.RectangleM,App.FunctionLibrary.RectangleM)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否不相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.Equals(System.Object)">
            <summary>
            返回此实例是否等于另外一个对象实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Addition(App.FunctionLibrary.RectangleM,App.FunctionLibrary.PointM)">
            <summary>
            将 RectangleM 平移给定的值。
            </summary>
            <param name="r">要平移的 RectangleM。</param>
            <param name="p">要平移的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Addition(App.FunctionLibrary.RectangleM,System.Drawing.Point)">
            <summary>
            将 RectangleM 平移给定的值。
            </summary>
            <param name="r">要平移的 RectangleM。</param>
            <param name="p">要平移的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Addition(App.FunctionLibrary.RectangleM,System.Drawing.PointF)">
            <summary>
            将 RectangleM 平移给定的值。
            </summary>
            <param name="r">要平移的 RectangleM。</param>
            <param name="p">要平移的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Addition(App.FunctionLibrary.RectangleM,App.FunctionLibrary.SizeM)">
            <summary>
            将 RectangleM 宽度和高度增加给定的值。
            </summary>
            <param name="r">要增加大小的 RectangleM。</param>
            <param name="s">要增加的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Addition(App.FunctionLibrary.RectangleM,System.Drawing.Size)">
            <summary>
            将 RectangleM 宽度和高度增加给定的值。
            </summary>
            <param name="r">要增加大小的 RectangleM。</param>
            <param name="s">要增加的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Addition(App.FunctionLibrary.RectangleM,System.Drawing.SizeF)">
            <summary>
            将 RectangleM 宽度和高度增加给定的值。
            </summary>
            <param name="r">要增加大小的 RectangleM。</param>
            <param name="s">要增加的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Addition(App.FunctionLibrary.RectangleM,App.FunctionLibrary.RectangleM)">
            <summary>
            获取 RectangleM 与另一个 RectangleM 合并后获得的新 RectangleM 结构。
            </summary>
            <param name="r1">要合并的矩形。</param>
            <param name="r2">要合并的矩形。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Addition(App.FunctionLibrary.RectangleM,System.Drawing.Rectangle)">
            <summary>
            获取 RectangleM 与另一个 RectangleM 合并后获得的新 RectangleM 结构。
            </summary>
            <param name="r1">要合并的矩形。</param>
            <param name="r2">要合并的矩形。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Addition(App.FunctionLibrary.RectangleM,System.Drawing.RectangleF)">
            <summary>
            获取 RectangleM 与另一个 RectangleM 合并后获得的新 RectangleM 结构。
            </summary>
            <param name="r1">要合并的矩形。</param>
            <param name="r2">要合并的矩形。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Subtraction(App.FunctionLibrary.RectangleM,App.FunctionLibrary.PointM)">
            <summary>
            将 RectangleM 平移给定的负值。
            </summary>
            <param name="r">要平移的 RectangleM。</param>
            <param name="p">要平移的负值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Subtraction(App.FunctionLibrary.RectangleM,System.Drawing.Point)">
            <summary>
            将 RectangleM 平移给定的负值。
            </summary>
            <param name="r">要平移的 RectangleM。</param>
            <param name="p">要平移的负值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Subtraction(App.FunctionLibrary.RectangleM,System.Drawing.PointF)">
            <summary>
            将 RectangleM 平移给定的负值。
            </summary>
            <param name="r">要平移的 RectangleM。</param>
            <param name="p">要平移的负值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Subtraction(App.FunctionLibrary.RectangleM,App.FunctionLibrary.SizeM)">
            <summary>
            将 RectangleM 宽度和高度减小给定的值。
            </summary>
            <param name="r">要减小大小的 RectangleM。</param>
            <param name="s">要减小的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Subtraction(App.FunctionLibrary.RectangleM,System.Drawing.Size)">
            <summary>
            将 RectangleM 宽度和高度减小给定的值。
            </summary>
            <param name="r">要减小大小的 RectangleM。</param>
            <param name="s">要减小的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Subtraction(App.FunctionLibrary.RectangleM,System.Drawing.SizeF)">
            <summary>
            将 RectangleM 宽度和高度减小给定的值。
            </summary>
            <param name="r">要减小大小的 RectangleM。</param>
            <param name="s">要减小的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Subtraction(App.FunctionLibrary.RectangleM,App.FunctionLibrary.RectangleM)">
            <summary>
            返回 RectangleM 结构与目标结构的交集。如果没有重叠，将返回 RectangleM.Empty。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Subtraction(App.FunctionLibrary.RectangleM,System.Drawing.Rectangle)">
            <summary>
            返回 RectangleM 结构与目标结构的交集。如果没有重叠，将返回 RectangleM.Empty。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Subtraction(App.FunctionLibrary.RectangleM,System.Drawing.RectangleF)">
            <summary>
            返回 RectangleM 结构与目标结构的交集。如果没有重叠，将返回 RectangleM.Empty。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Multiply(App.FunctionLibrary.RectangleM,System.Decimal)">
            <summary>
            将 RectangleM 的宽度和高度放大指定的倍数，不改变矩形区域的中心点位置。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Multiply(App.FunctionLibrary.RectangleM,System.Int32)">
            <summary>
            将 RectangleM 的宽度和高度放大指定的倍数，不改变矩形区域的中心点位置。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Multiply(App.FunctionLibrary.RectangleM,System.Single)">
            <summary>
            将 RectangleM 的宽度和高度放大指定的倍数，不改变矩形区域的中心点位置。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Multiply(App.FunctionLibrary.RectangleM,System.Double)">
            <summary>
            将 RectangleM 的宽度和高度放大指定的倍数，不改变矩形区域的中心点位置。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Division(App.FunctionLibrary.RectangleM,System.Decimal)">
            <summary>
            将 RectangleM 的宽度和高度缩小指定的倍数，不改变矩形区域的中心点位置。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Division(App.FunctionLibrary.RectangleM,System.Int32)">
            <summary>
            将 RectangleM 的宽度和高度缩小指定的倍数，不改变矩形区域的中心点位置。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Division(App.FunctionLibrary.RectangleM,System.Single)">
            <summary>
            将 RectangleM 的宽度和高度缩小指定的倍数，不改变矩形区域的中心点位置。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Division(App.FunctionLibrary.RectangleM,System.Double)">
            <summary>
            将 RectangleM 的宽度和高度缩小指定的倍数，不改变矩形区域的中心点位置。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Implicit(App.FunctionLibrary.RectangleM)~System.Drawing.Rectangle">
            <summary>
            此 RectangleM 对象实例隐形转换为 Rectangle 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RectangleM.op_Implicit(App.FunctionLibrary.RectangleM)~System.Drawing.RectangleF">
            <summary>
            此 RectangleM 对象实例隐形转换为 RectangleF 对象。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SizeM">
            <summary>
            存储一个有序十进制数对儿，通常为矩形的宽度和高度。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.#ctor(System.Decimal,System.Decimal)">
            <summary>
            根据指定的维度初始化 SizeM 结构的新实例。
            </summary>
            <param name="width">新 SizeM 的宽度分量。</param>
            <param name="height">新 SizeM 的高度分量。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.#ctor(System.Int32,System.Int32)">
            <summary>
            根据指定的维度初始化 SizeM 结构的新实例。
            </summary>
            <param name="width">新 SizeM 的宽度分量。</param>
            <param name="height">新 SizeM 的高度分量。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.#ctor(System.Int64,System.Int64)">
            <summary>
            根据指定的维度初始化 SizeM 结构的新实例。
            </summary>
            <param name="width">新 SizeM 的宽度分量。</param>
            <param name="height">新 SizeM 的高度分量。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.#ctor(System.Single,System.Single)">
            <summary>
            根据指定的维度初始化 SizeM 结构的新实例。
            </summary>
            <param name="width">新 SizeM 的宽度分量。</param>
            <param name="height">新 SizeM 的高度分量。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.#ctor(System.Double,System.Double)">
            <summary>
            根据指定的维度初始化 SizeM 结构的新实例。
            </summary>
            <param name="width">新 SizeM 的宽度分量。</param>
            <param name="height">新 SizeM 的高度分量。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.#ctor(System.Drawing.Size)">
            <summary>
            指定坐标初始化 SizeM 类的新实例。
            </summary>
            <param name="s">Size 实例对象</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.#ctor(System.Drawing.SizeF)">
            <summary>
            指定坐标初始化 SizeM 类的新实例。
            </summary>
            <param name="s">SizeF 实例对象</param>
        </member>
        <member name="P:App.FunctionLibrary.SizeM.Width">
            <summary>
            获取或设置此 SizeM 结构的水平分量。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SizeM.Height">
            <summary>
            获取或设置此 SizeM 结构的垂直分量。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SizeM.Half">
            <summary>
            获取 SizeM 半尺寸的大小。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SizeM.IsEmpty">
            <summary>
            获取一个值，该值指示此 SizeM 是否为空。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SizeM.Empty">
            <summary>
            表示 SizeM 类的、成员数据未被初始化的新实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.ToString">
            <summary>
            浅表字符串表达式。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Clone">
            <summary>
            获取此 SizeM 的精确副本。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.ToSize">
            <summary>
            PointM 实例输出为 Size 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.ToSizeF">
            <summary>
            PointM 实例输出为 SizeF 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Ceiling">
            <summary>
            通过将 SizeM 结构的值舍入到与其相邻的较大整数值，将指定的 SizeM 结构转换为 Size 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Round">
            <summary>
            通过将 SizeM 结构的值舍入到最近的整数值，将指定的 SizeM 结构转换为 Size 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Truncate">
            <summary>
            通过将 SizeM 结构的值截断到比其小的相邻整数值，将指定的 SizeM 结构转换为 Size 结构。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Add(App.FunctionLibrary.SizeM)">
            <summary>
            将此 SizeM 结构的宽度和高度与另一个 SizeM 结构的宽度和高度相加,并且返回相加的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Add(System.Drawing.Size)">
            <summary>
            将此 SizeM 结构的宽度和高度与另一个 SizeM 结构的宽度和高度相加,并且返回相加的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Add(System.Drawing.SizeF)">
            <summary>
            将此 SizeM 结构的宽度和高度与另一个 SizeM 结构的宽度和高度相加,并且返回相加的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Add(System.Int32,System.Int32)">
            <summary>
            将 SizeM 结构的宽度和高度与指定的宽度和高度相加,并且返回相加的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Add(System.Decimal,System.Decimal)">
            <summary>
            将 SizeM 结构的宽度和高度与指定的宽度和高度相加,并且返回相加的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Add(System.Single,System.Single)">
            <summary>
            将 SizeM 结构的宽度和高度与指定的宽度和高度相加,并且返回相加的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Add(System.Double,System.Double)">
            <summary>
            将 SizeM 结构的宽度和高度与指定的宽度和高度相加,并且返回相加的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Subtract(App.FunctionLibrary.SizeM)">
            <summary>
            将 SizeM 结构的宽度和高度从另一个 SizeM 结构的宽度和高度中减去,并且返回相减的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Subtract(System.Drawing.Size)">
            <summary>
            将 SizeM 结构的宽度和高度从另一个 SizeM 结构的宽度和高度中减去,并且返回相减的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Subtract(System.Drawing.SizeF)">
            <summary>
            将 SizeM 结构的宽度和高度从另一个 SizeM 结构的宽度和高度中减去,并且返回相减的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Subtract(System.Int32,System.Int32)">
            <summary>
            将 SizeM 结构的宽度和高度减去指定的宽度和高度,并且返回相减的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Subtract(System.Decimal,System.Decimal)">
            <summary>
            将 SizeM 结构的宽度和高度减去指定的宽度和高度,并且返回相减的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Subtract(System.Single,System.Single)">
            <summary>
            将 SizeM 结构的宽度和高度减去指定的宽度和高度,并且返回相减的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Subtract(System.Double,System.Double)">
            <summary>
            将 SizeM 结构的宽度和高度减去指定的宽度和高度,并且返回相减的结果(不改变当前 SizeM)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.ToPoint">
            <summary>
            此 SizeM 转换为 Point (宽度转换为 X 坐标，高度转换为 Y 坐标)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Equality(App.FunctionLibrary.SizeM,App.FunctionLibrary.SizeM)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Equality(App.FunctionLibrary.SizeM,System.Drawing.Size)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Equality(App.FunctionLibrary.SizeM,System.Drawing.SizeF)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Inequality(App.FunctionLibrary.SizeM,App.FunctionLibrary.SizeM)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否不相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Inequality(App.FunctionLibrary.SizeM,System.Drawing.Size)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否不相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Inequality(App.FunctionLibrary.SizeM,System.Drawing.SizeF)">
            <summary>
            比较两个 PointM 结构。此结果指定两个 PointM 结构的 X 和 Y 属性的值是否不相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.Equals(System.Object)">
            <summary>
            返回此实例是否等于另外一个对象实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Addition(App.FunctionLibrary.SizeM,App.FunctionLibrary.SizeM)">
            <summary>
            将 SizeM 平移给定的值。
            </summary>
            <param name="p">要平移的 SizeM。</param>
            <param name="v">要平移的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Addition(App.FunctionLibrary.SizeM,System.Drawing.Size)">
            <summary>
            将 SizeM 平移给定的值。
            </summary>
            <param name="p">要平移的 SizeM。</param>
            <param name="v">要平移的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Addition(App.FunctionLibrary.SizeM,System.Drawing.SizeF)">
            <summary>
            将 SizeM 平移给定的值。
            </summary>
            <param name="p">要平移的 SizeM。</param>
            <param name="v">要平移的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Subtraction(App.FunctionLibrary.SizeM,App.FunctionLibrary.SizeM)">
            <summary>
            将 SizeM 平移给定的负值。
            </summary>
            <param name="p">要平移的 SizeM。</param>
            <param name="v">要平移的负值。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Subtraction(App.FunctionLibrary.SizeM,System.Drawing.Size)">
            <summary>
            将 SizeM 平移给定的负值。
            </summary>
            <param name="p">要平移的 SizeM。</param>
            <param name="v">要平移的负值。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Subtraction(App.FunctionLibrary.SizeM,System.Drawing.SizeF)">
            <summary>
            将 SizeM 平移给定的负值。
            </summary>
            <param name="p">要平移的 SizeM。</param>
            <param name="v">要平移的负值。</param>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Multiply(App.FunctionLibrary.SizeM,System.Decimal)">
            <summary>
            将 SizeM 的值乘以指定的乘数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Multiply(App.FunctionLibrary.SizeM,System.Int32)">
            <summary>
            将 SizeM 的值乘以指定的乘数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Multiply(App.FunctionLibrary.SizeM,System.Single)">
            <summary>
            将 SizeM 的值乘以指定的乘数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Multiply(App.FunctionLibrary.SizeM,System.Double)">
            <summary>
            将 SizeM 的值乘以指定的乘数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Division(App.FunctionLibrary.SizeM,System.Decimal)">
            <summary>
            将 SizeM 的值除以指定的除数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Division(App.FunctionLibrary.SizeM,System.Int32)">
            <summary>
            将 SizeM 的值除以指定的除数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Division(App.FunctionLibrary.SizeM,System.Single)">
            <summary>
            将 SizeM 的值除以指定的除数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Division(App.FunctionLibrary.SizeM,System.Double)">
            <summary>
            将 SizeM 的值除以指定的除数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Implicit(App.FunctionLibrary.SizeM)~System.Drawing.Size">
            <summary>
            此 SizeM 对象实例隐形转换为 Size 对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SizeM.op_Implicit(App.FunctionLibrary.SizeM)~System.Drawing.SizeF">
            <summary>
            此 SizeM 对象实例隐形转换为 SizeF 对象。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DbOperateType">
            <summary>
            数据操作类别
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DbOperateType.None">
            <summary>
            无操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DbOperateType.Select">
            <summary>
            查询操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DbOperateType.Insert">
            <summary>
            插入操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DbOperateType.Update">
            <summary>
            修改操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DbOperateType.Delete">
            <summary>
            删除操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DbOperateType.Procedure">
            <summary>
            存储过程
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.JsonToken">
            <summary>
            Json标记
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Curly_Open">
            <summary>
            左花括号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Curly_Close">
            <summary>
            右花括号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Squared_Open">
            <summary>
            左方括号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Squared_Close">
            <summary>
            右方括号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Quote_Open">
            <summary>
            左圆括号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Quote_Close">
            <summary>
            右圆括号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Colon">
            <summary>
            冒号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Comma">
            <summary>
            逗号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.True">
            <summary>
            真值
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.False">
            <summary>
            假值
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonToken.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.JsonType">
            <summary>
            Json的值类别
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonType.Value">
            <summary>
            值类型(数字和布尔)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonType.String">
            <summary>
            字符串(字符和日期)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonType.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.RecursionDirection">
            <summary>
            递归方向
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RecursionDirection.Parent">
            <summary>
            递归父族
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RecursionDirection.Children">
            <summary>
            递归子族
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RecursionDirection.Family">
            <summary>
            递归全族(包括父族和子族)
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.PacketArrivedEventArgs">
            <summary>
            封包达到事件参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.HeaderLength">
            <summary>
            IP头长度
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.PacketLength">
            <summary>
            封包长度
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.MessageLength">
            <summary>
            消息内容长度
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.Protocol">
            <summary>
            通讯协议
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.IPVersion">
            <summary>
            IP版本号
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.OriginationAddress">
            <summary>
            原地址
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.DestinationAddress">
            <summary>
            目标地址
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.OriginationPort">
            <summary>
            原端口号
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.DestinationPort">
            <summary>
            目标端口号
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.ReceiveBuffer">
            <summary>
            接收的缓冲数据
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.IPHeaderBuffer">
            <summary>
            IP头缓冲数据
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PacketArrivedEventArgs.MessageBuffer">
            <summary>
            消息内容缓冲数据
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DataMapExtension">
            <summary>
            数据映射扩展函数
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DataMapExtension.DataMapping">
            <summary>
            实体数据映射关系
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.MemberInfo">
            <summary>
            实体声明的字段或者属性信息。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.IsProperty">
            <summary>
            表示实体声明的是否为属性成员(True表示属性、False表示字段)。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.DefineName">
            <summary>
            定义的属性名称
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.DefineType">
            <summary>
            定义的属性数据类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.CanRead">
            <summary>
            声明的属性是否可读
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.CanWrite">
            <summary>
            声明的属性是否可写
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.ReadIsPublic">
            <summary>
            声明的属性可读是否为公有的
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.WriteIsPublic">
            <summary>
            声明的属性可写是否为公有的
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.HasMapping">
            <summary>
            实体类型是否为 Mapping 映射的相关类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.MappingName">
            <summary>
            实体映射的字段名称
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.DataMapping.MappingType">
            <summary>
            实体映射的字段数据类型。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.DataMapping.GetValue(System.Object)">
            <summary>
            获取实体映射的字段或属性值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.DataMapping.SetValue(System.Object,System.Object)">
            <summary>
            对实体映射的字段或属性进行赋值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.DataMapping.SetValue(System.Object,System.Data.DataRow)">
            <summary>
            由包含数据的数据行设置实体类对象字段值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.DataMapping.SetValue(System.Data.DataRow,System.Object)">
            <summary>
            由指明的成员信息设置数据行的字段值
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DataMapExtension.CanCopyMapping">
            <summary>
            数据实体之间可复制数据的数据映射关系
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.CanCopyMapping.FROM">
            <summary>
            源数据实体映射关系
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataMapExtension.CanCopyMapping.TO">
            <summary>
            目标数据实体映射关系
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.GetDataMapping(System.Type)">
            <summary>
            获取实体字段列表(包括所有公有和做映射的私有字段)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.GetCanCopyMapping(System.Data.DataTable,System.Type)">
            <summary>
            获取可进行数据复制的数据映射关系(由数据表往数据实体复制数据)。
            </summary>
            <param name="dstType">源数据实体类型</param>
            <param name="srcTable">目标架构数据表</param>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.GetCanCopyMapping(System.Type,System.Data.DataTable)">
            <summary>
            获取可进行数据复制的数据映射关系(由数据实体往数据表复制数据)。
            </summary>
            <param name="srcType">源数据实体类型</param>
            <param name="dstTable">目标架构数据表</param>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.GetCanCopyMapping(System.Type,System.Type)">
            <summary>
            获取可进行数据复制的数据映射关系(从源数据实体复制到目标数据实体中)。
            </summary>
            <param name="src">原实体类型</param>
            <param name="dst">目标实体类型</param>
            <remarks>名称相同，数据类型相同的成员才可以进行复制数据。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.getDataMapping(System.Reflection.FieldInfo)">
            <summary>
            获取实体字段类成员的映射关系
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.getDataMapping(System.Reflection.PropertyInfo)">
            <summary>
            获取实体字段类成员的映射关系
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.getMapping(System.Reflection.MemberInfo)">
            <summary>
            获取实体字段或属性成员的映射关系
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataMapExtension.toDataMapping(System.Collections.Generic.List{App.FunctionLibrary.DataEntity.MappingAttribute},App.FunctionLibrary.DataMapExtension.DataMapping)">
            <summary>
            获取数据字段映射列表
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DateExtension">
            <summary>
            日期时间扩展函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.CDate(System.Object,App.FunctionLibrary.DateType)">
            <summary>
            把任意可以转换为日期的对象文本表达式转换为日期数据类型(转换失败返回 DateEmpty)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.CDate``1(``0,App.FunctionLibrary.DateType)">
            <summary>
            把任意可以转换为日期的对象文本表达式转换为日期数据类型(兼容无连接符号 -:. 的情况,转换失败返回 DateEmpty)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.ToString(System.DateTime,App.FunctionLibrary.DateType)">
            <summary>
            日期转换字符串
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.ToString_Highprecision(System.DateTime,App.FunctionLibrary.DateType)">
            <summary>
            高精度输出时间的字符串表达式(精确度毫秒)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.ToMorning(System.DateTime)">
            <summary>
            把日期转换为当日零点时刻的时间对象(yyyy-MM-dd 00:00:00)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.ToNight(System.DateTime)">
            <summary>
            把日期转换为当日午夜最后一秒钟的时间对象(yyyy-MM-dd 23:59:59,当日期值为空时表示一个空值日期)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.ToDatePair(System.DateTime)">
            <summary>
            把日期转换为 00:00:00-23:59:59 之间的一个时间对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.IsDate(System.String)">
            <summary>
            判断字符串是否为有效的日期表达式(兼容无连接符号 -:. 的情况)。
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.IsDate(System.String,System.DateTime@)">
            <summary>
            判断字符串是否为有效的日期表达式并且返回该日期(兼容无连接符号 -:. 的情况)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.IsDateEmpty``1(``0)">
            <summary>
            判断目标对象是否为日期空值或不可转换为日期类型(处理了 Nothing、DateEmpty的情况)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DateExtension.IsDateEmpty(System.Object)">
            <summary>
            判断目标对象是否为日期空值或不可转换为日期类型(处理了 Nothing、DateEmpty的情况)。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.EnumerableExtension">
            <summary>
            枚举器扩展函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回枚举器索引位置为0的第一个元素(未发现第一个元素返回 null)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.First``1(System.Collections.IEnumerable)">
            <summary>
            返回枚举器索引位置为0的第一个元素(未发现第一个元素返回 null)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取枚举器最后一个索引位置的元素(未发现最后一个元素返回 null)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Last``1(System.Collections.IEnumerable)">
            <summary>
            获取枚举器最后一个索引位置的元素(未发现最后一个元素返回 null)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            搜索与指定谓词定义的条件匹配的元素，然后返回枚举器中的首个匹配项。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Find``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            搜索与指定谓词定义的条件匹配的元素，然后返回枚举器中的首个匹配项。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            检索与指定谓词定义的条件匹配的所有元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.FindAll``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            检索与指定谓词定义的条件匹配的所有元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.FindIndex``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            搜索与指定的条件匹配的元素，然后返回枚举器首个匹配项从零开始的索引。
            </summary>
            <typeparam name="T">搜索的泛型类型(如果为字符串忽略大小写)。</typeparam>
            <param name="search">如果为字符串忽略大小写。</param>
            <param name="values">用于搜索的枚举器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            搜索与指定谓词定义的条件匹配的元素，然后返回枚举器中首个匹配项从零开始的索引。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.FindIndex``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            搜索与指定谓词定义的条件匹配的元素，然后返回枚举器中首个匹配项从零开始的索引。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            搜索与指定的条件匹配的元素，然后返回枚举器首个匹配项从零开始的索引。
            </summary>
            <typeparam name="T">搜索的泛型类型(如果为字符串忽略大小写)。</typeparam>
            <param name="find">如果为字符串忽略大小写。</param>
            <param name="values">用于搜索的枚举器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            搜索与指定的条件匹配的元素，然后返回枚举器首个匹配项从零开始的索引。
            </summary>
            <typeparam name="T">搜索的泛型类型(如果为字符串忽略大小写)。</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.FindAll``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1},System.Func{``0,``1},App.FunctionLibrary.RecursionDirection,System.Boolean)">
            <summary>
            对列表进行递归遍历查找，并返回从父到子顺序的筛选列表。
            </summary>
            <typeparam name="T">递归的列表类型</typeparam>
            <typeparam name="Tid">递归的值类型</typeparam>
            <param name="values">递归的列表</param>
            <param name="id">递归初始化值</param>
            <param name="IdSelector">递归值选取器</param>
            <param name="parentSelector">递归父值选取器</param>
            <param name="direction">递归方向</param>
            <param name="includeSelf">递归结果是否包含初始化值</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            确定指定枚举器总的元素是否与指定谓词定义的条件匹配。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Exists``1(System.Collections.IEnumerable,System.Predicate{``0})">
            <summary>
            确定指定枚举器总的元素是否与指定谓词定义的条件匹配。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Exists``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            确定在枚举器中的元素是否与指定谓词定义的条件匹配。
            </summary>
            <param name="values">用于判断的当前枚举器</param>
            <param name="search">如果为字符串忽略大小写。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            确定在枚举器中是否包含指定的搜索元素。
            </summary>
            <typeparam name="T">搜索的泛型类型(如果为字符串忽略大小写)。</typeparam>
            <param name="search">如果为字符串忽略大小写。</param>
            <param name="values">用于搜索的枚举器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对指定枚举器的每个元素执行指定操作。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            对指定枚举器的每个元素执行指定操作。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.For``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            带有索引的枚举器迭代循环。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.For``1(System.Collections.IEnumerable,System.Action{``0,System.Int32})">
            <summary>
            带有索引的枚举器迭代循环。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToList``1(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            枚举器转换为列表,如果枚举元素类型不能直接转换为泛型类型时将自动复制泛型数据属性字段。
            </summary>
            <typeparam name="T">枚举器的元素类型</typeparam>
            <param name="values">需要复制数据的枚举器对象</param>
            <param name="index">复制数据从0开始的位置索引。</param>
            <param name="length">复制数据的长度(缺省表示剩余的所有元素)。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToList``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            将枚举器中的元素从指定的索引位置处开始复制指定长度的元素，并且返回复制数据的列表。
            </summary>
            <typeparam name="T">枚举器的元素类型</typeparam>
            <param name="values">需要复制数据的枚举器对象</param>
            <param name="index">复制数据从0开始的位置索引。</param>
            <param name="length">复制数据的长度(缺省表示剩余的所有元素)。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            将枚举器中的元素从指定的索引位置处开始复制指定长度的元素，并且返回复制数据的列表。
            </summary>
            <typeparam name="T">枚举器的元素类型</typeparam>
            <param name="values">需要复制数据的枚举器对象</param>
            <param name="index">复制数据从0开始的位置索引。</param>
            <param name="length">复制数据的长度(缺省表示剩余的所有元素)。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            枚举器中的数据项根据筛选器转换为列表 List 对象实体。
            </summary>
            <param name="values">当前枚举器</param>
            <param name="selector">筛选器</param>
            <param name="removeEmpty">返回数组中是否移除结果为Nothing的项。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.canDirectConvert``1(System.Collections.IEnumerable)">
            <summary>
            判断指定的枚举器元素对象是否能直接转换为泛型类型，如果能直接转换返回nothing，否则返回能复制的数据类型映射列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToArray``1(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            将枚举器中的元素从指定的索引位置处开始复制指定长度的元素到新数组中。
            </summary>
            <param name="index">复制数据从0开始的位置索引。</param>
            <param name="count">复制数据的长度(缺省表示剩余的所有元素)。</param>
            <param name="values">当前枚举器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            将枚举器中的元素从指定的索引位置处开始复制指定长度的元素，并且返回复制数据的数组。
            </summary>
            <typeparam name="T">枚举器的元素类型</typeparam>
            <param name="values">需要复制数据的枚举器对象</param>
            <param name="index">复制数据从0开始的位置索引。</param>
            <param name="count">复制数据的长度。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToArray``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            将枚举器中的元素从指定的索引位置处开始复制指定长度的元素，并且返回复制数据的数组。
            </summary>
            <typeparam name="T">枚举器的元素类型</typeparam>
            <param name="values">需要复制数据的枚举器对象</param>
            <param name="index">复制数据从0开始的位置索引。</param>
            <param name="count">复制数据的长度。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            将数组中的元素从指定的索引位置处开始复制指定长度的元素，并且返回复制数据的数组。
            </summary>
            <typeparam name="T">枚举器的元素类型</typeparam>
            <param name="values">需要复制数据的枚举器对象</param>
            <param name="index">复制数据从0开始的位置索引。</param>
            <param name="count">复制数据的长度。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            将枚举器中指定的字段值复制到新数组中。
            </summary>
            <param name="removeEmpty">返回数组中是否移除结果为Nothing的项。</param>
            <param name="values">当前枚举器</param>
            <param name="selector">筛选器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToFloor``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            两层实体列表输出为一层实体列表。
            </summary>
            <typeparam name="T">实体泛型类型</typeparam>
            <typeparam name="Tenumer">被枚举的泛型类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToFloor``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            两层实体列表输出为一层实体列表。
            </summary>
            <typeparam name="T">实体泛型类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToGroup``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            对枚举器的元素按指定长度拆分为列表组。
            </summary>
            <typeparam name="T">实体泛型类型</typeparam>
            <param name="values">分拆的枚举器</param>
            <param name="length">拆分长度</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sum``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            对指定枚举器的每个元素执行加法合计操作。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            对指定枚举器的每个元素执行加法合计操作。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            获取枚举器中按筛选器最大值的元素
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取枚举器中的最大值元素
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            获取枚举器中按筛选器最小值的元素
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取枚举器中的最小值元素
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Count(System.Collections.IEnumerable)">
            <summary>
            获取枚举器中元素的数目。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Count``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取枚举器中元素的数目。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.HasElement(System.Collections.IEnumerable)">
            <summary>
            判断枚举器中是否包含有元素(比 Count > 0 更有效率)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Merge``1(``0,``0)">
            <summary>
            枚举器元素进行合并，并返回新的枚举器。
            </summary>
            <typeparam name="T">枚举器类型</typeparam>
            <param name="source">源枚举器实例</param>
            <param name="enumer">合并的枚举器实例</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Add``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将指定集合的元素添加到数组的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Add``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            将指定集合的元素添加到数组的末尾。
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Add``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            将指定的元素添加到数组的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Add``1(``0[],System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将指定集合的元素添加到数组的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Add``1(``0[],``0[])">
            <summary>
            将指定集合的元素添加到数组的末尾。
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Add``1(``0[],``0)">
            <summary>
            将指定的元素添加到数组的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.GroupBy``1(System.Collections.Generic.List{``0})">
            <summary>
            对列表中的元素进行分组(如果为字符串则忽略大小写)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.GroupBy``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            对列表中的元素进行分组(如果为字符串则忽略大小写)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.GroupBy``2(System.Collections.Generic.List{``0},System.Func{``0,``1[]})">
            <summary>
            对枚举器中的元素进行分组(多字段分组时使用数组返回值,如果为字符串则忽略大小写)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.GroupBy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            对枚举器中的元素进行分组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            对枚举器中的元素进行分组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1[]})">
            <summary>
            对枚举器中的元素进行分组(多字段分组时使用数组返回值)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sort``1(System.Collections.Generic.List{``0},System.Func{``0,App.FunctionLibrary.Sorter[]})">
            <summary>
            对列表进行排序，并且返回该列表(多字段排序时使用 Sorter[] 数组返回值,分别对各个字段指定排序方式)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sort``2(System.Collections.Generic.List{``0},System.Func{``0,``1[]},App.FunctionLibrary.SortType)">
            <summary>
            排序整个列表中的元素的顺序(多字段排序时使用 Object[] 数组返回值,各个字段按同一种方式排序)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sort``2(System.Collections.Generic.List{``0},System.Func{``0,``1},App.FunctionLibrary.SortType)">
            <summary>
            排序整个列表中的元素的顺序。
            </summary>
            <param name="list">当前枚举器</param>
            <param name="sortType">排序类型(升序、降序)</param>
            <param name="selector">比较器委托</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sort``1(System.Collections.Generic.List{``0},App.FunctionLibrary.SortType)">
            <summary>
            排序整个列表中的元素的顺序。
            </summary>
            <param name="list">用于排序的集合</param>
            <param name="sortType">排序类型(升序、降序)</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,App.FunctionLibrary.Sorter[]})">
            <summary>
            排序整个列表中的元素的顺序(多字段排序时使用 Sorter[] 数组返回值,分别对各个字段指定排序方式)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1[]},App.FunctionLibrary.SortType)">
            <summary>
            排序整个列表中的元素的顺序(多字段排序时使用 Object[] 数组返回值,各个字段按同一种方式排序)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},App.FunctionLibrary.SortType)">
            <summary>
            排序整个列表中的元素的顺序。
            </summary>
            <param name="collect">当前枚举器</param>
            <param name="sortType">排序类型(升序、降序)</param>
            <param name="selector">比较器委托</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Sort``1(System.Collections.Generic.IEnumerable{``0},App.FunctionLibrary.SortType)">
            <summary>
            排序整个列表中的元素的顺序。
            </summary>
            <param name="collect">用于排序的集合</param>
            <param name="sortType">排序类型(升序、降序)</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Difference``2(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            获取当前列表与比较列表的差集(当前列表比目标列表多出的部分)。
            </summary>
            <param name="values">当前枚举器</param>
            <param name="comparer">与之比较的列表</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Difference``2(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            获取当前列表与比较列表的差集(当前列表比目标列表多出的部分)。
            </summary>
            <param name="values">当前枚举器</param>
            <param name="comparer">与之比较的列表</param>
            <param name="match">相同值比较器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Intersect``2(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            获取当前列表与比较列表的交集(返回当前列表的比较结果元素)。
            </summary>
            <param name="values">当前枚举列表</param>
            <param name="comparer">比较枚举列表</param>
            <param name="match">相同值比较器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.IntersectPairs``2(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            比较当前列表与比较列表的交集，并且返回两个列表交集的比较结果对儿组(Pair.Name表示当前列表元素，Pair.Value表示比较列表元素)。
            </summary>
            <typeparam name="T">当前被比较的列表泛型类型</typeparam>
            <typeparam name="Tcompare">比较的列表泛型类型</typeparam>
            <param name="values">当前被比较的列表</param>
            <param name="comparer">比较的列表</param>
            <param name="match">相同值比较器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Union``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            获取当前列表与比较列表的联集(排除重复项)。
            </summary>
            <param name="enums">当前集合</param>
            <param name="values">比较集合</param>
            <param name="match">相同值比较器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Union``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取当前列表与比较列表的联集(排除重复项)。
            </summary>
            <param name="enums">当前集合</param>
            <param name="values">比较集合</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Union``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            获取当前列表与指定的数组的联集(排除重复项)。
            </summary>
            <param name="enums">当前集合</param>
            <param name="values">指定数组</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Difference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取当前列表与比较列表的差集(当前列表比目标列表多出的部分)。
            </summary>
            <param name="values">当前枚举器</param>
            <param name="comparer">与之比较的列表</param>   
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Difference``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            获取当前列表与比较列表的差集(当前列表比目标列表多出的部分)。
            </summary>
            <param name="values">当前枚举器</param>
            <param name="comparer">与之比较的列表</param>
            <param name="match">相同值比较器</param>        
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Intersect``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            获取当前列表与比较列表的交集(返回当前列表的比较结果元素)。
            </summary>
            <param name="values">当前枚举列表</param>
            <param name="comparer">比较枚举列表</param>
            <param name="match">相同值比较器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.IntersectPairs``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            比较当前枚举器与比较枚举器的交集，并且返回两个枚举器交集的比较结果对儿组(Pair.Name表示当前列表元素，Pair.Value表示比较列表元素)。
            </summary>
            <typeparam name="T">当前被比较的枚举器泛型类型</typeparam>
            <typeparam name="Tcompare">比较的枚举器泛型类型</typeparam>
            <param name="values">当前被比较的枚举器</param>
            <param name="comparer">比较的枚举器</param>
            <param name="match">相同值比较器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            获取当前列表与比较列表的联集(排除重复项)。
            </summary>
            <param name="enums">当前集合</param>
            <param name="values">比较集合</param>
            <param name="match">相同值比较器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取当前列表与比较列表的联集(排除重复项)。
            </summary>
            <param name="enums">当前集合</param>
            <param name="values">比较集合</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Union``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            获取当前列表与指定的数组的联集(排除重复项)。
            </summary>
            <param name="enums">当前集合</param>
            <param name="values">指定数组</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Repeated``2(System.Collections.Generic.List{``0},System.Func{``0,``1[]})">
            <summary>
            获取当前列表中重复的子元素列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Repeated``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            获取当前列表中重复的子元素列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Repeated``1(System.Collections.Generic.List{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            获取当前列表中重复的子元素列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Repeated``1(System.Collections.Generic.List{``0})">
            <summary>
            获取当前列表中重复的子元素列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Distinct``1(System.Collections.Generic.List{``0})">
            <summary>
            获取当前列表中非重复的子元素列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Distinct``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            获取当前列表中非重复的子元素列表(如果为字符串，则忽略字符大小写)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Distinct``2(System.Collections.Generic.List{``0},System.Func{``0,``1[]})">
            <summary>
            获取当前列表中非重复的子元素列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Distinct``1(System.Collections.Generic.List{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            获取当前列表中非重复的子元素列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Repeated``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1[]})">
            <summary>
            获取当前列表中重复的子元素列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Repeated``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            获取当前列表中重复的子元素列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Repeated``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            获取当前列表中重复的子元素列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Repeated``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取当前列表中重复的子元素列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取当前列表中非重复的子元素列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            获取当前列表中非重复的子元素列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1[]})">
            <summary>
            获取当前列表中非重复的子元素列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            获取当前列表中非重复的子元素列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Equals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            比较两个枚举器列表的元素是否完全相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.GetElementType(System.Collections.IEnumerable)">
            <summary>
            获取枚举器的泛型元素类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ElementType(System.Type)">
            <summary>
            获取枚举类型的泛型元素类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Exclude``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            从当前列表中排除指定的元素
            </summary>
            <param name="collection">将要排除元素的原列表</param>
            <param name="values">被排除元素的集合</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Exclude``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            从当前列表中排除指定的元素
            </summary>
            <param name="collection">将要排除元素的原列表</param>
            <param name="values">被排除元素的数组</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Exclude``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            从当前列表中排除指定的元素
            </summary>
            <param name="collection">将要排除元素的原列表</param>
            <param name="match">被排除元素的条件筛选器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            从当前集合中排除指定的元素
            </summary>
            <param name="collection">将要排除元素的原集合</param>
            <param name="values">被排除元素的集合</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Exclude``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            从当前集合中排除指定的元素
            </summary>
            <param name="collection">将要排除元素的原集合</param>
            <param name="values">被排除元素的数组</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            从当前列表中排除指定的元素
            </summary>
            <param name="collection">将要排除元素的原列表</param>
            <param name="match">被排除元素的条件筛选器</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            枚举集合元素反转
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Reverse``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            将指定范围中元素的顺序反转。
            </summary>
            <param name="values">反转元素的列表</param>
            <param name="index">要反转的范围的从零开始的起始索引。</param>
            <param name="count">要反转的范围内的元素数。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Reverse``1(``0[],System.Int32,System.Int32)">
            <summary>
            将数组指定范围中元素的顺序反转。
            </summary>
            <param name="values">反转元素的列表</param>
            <param name="index">要反转的范围的从零开始的起始索引。</param>
            <param name="count">要反转的范围内的元素数。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Reverse``1(``0[])">
            <summary>
            将数组中的元素顺序反转。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairDict``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            枚举器输出为指定名称的对儿值表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairList``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            枚举器输出为指定名称的对儿值表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairList(System.String,System.String,System.String)">
            <summary>
            字符串按拆分符和定界符输出为对儿值表。
            </summary>
            <param name="value">拆分的字符串表达式</param>
            <param name="splitCharacter">名值对儿拆分符</param>
            <param name="delimiter">对儿名和对儿值定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairList(System.String,System.String[],System.String)">
            <summary>
            字符串按拆分符和定界符输出为对儿值表。
            </summary>
            <param name="value">拆分的字符串表达式</param>
            <param name="splitCharacter">名值对儿拆分符</param>
            <param name="delimiter">对儿名和对儿值定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairDict(System.String,System.String,System.String)">
            <summary>
            字符串按拆分符和定界符输出为对儿值表。
            </summary>
            <param name="value">拆分的字符串表达式</param>
            <param name="splitCharacter">名值对儿拆分符</param>
            <param name="delimiter">对儿名和对儿值定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairDict(System.String,System.String[],System.String)">
            <summary>
            字符串按拆分符和定界符输出为对儿值表。
            </summary>
            <param name="value">拆分的字符串表达式</param>
            <param name="splitCharacter">名值对儿拆分符</param>
            <param name="delimiter">对儿名和对儿值定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairList(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            字符串枚举器按定界符输出为儿值表。
            </summary>
            <param name="values">字符串枚举器</param>
            <param name="delimiter">对儿名和对儿值定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairList(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            字符串枚举器按定界符输出为儿值表。
            </summary>
            <param name="values">字符串枚举器</param>
            <param name="delimiter">对儿名和对儿值定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairDict(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            字符串枚举器按定界符输出为儿值表。
            </summary>
            <param name="values">字符串枚举器</param>
            <param name="delimiter">对儿名和对儿值定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairDict(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            字符串枚举器按定界符输出为儿值表。
            </summary>
            <param name="values">字符串枚举器</param>
            <param name="delimiter">对儿名和对儿值定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairList``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            枚举器输出为指定对儿名和对儿值的名值对儿表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.ToPairDict``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            枚举器输出为指定对儿名和对儿值的名值对儿表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Remove``1(``0[],System.Int32,System.Int32)">
            <summary>
            移除数组指定索引位置的元素
            </summary>
            <typeparam name="T">数组泛型类型</typeparam>
            <param name="array">移除元素的数组</param>
            <param name="index">移除元素的索引位置(从0开始)</param>
            <param name="count">移除元素的数量</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Remove``1(``0[],``0[])">
            <summary>
            移除数组中指定的元素
            </summary>
            <typeparam name="T">数组泛型类型</typeparam>
            <param name="array">移除元素的数组</param>
            <param name="values">移除的元素</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Remove``1(``0[],System.Predicate{``0})">
            <summary>
            移除与指定的谓词所定义的条件相匹配的所有元素。
            </summary>
            <typeparam name="T">移除的元素类型</typeparam>
            <param name="array">被移除元素的数组</param>
            <param name="match">被移除的元素匹配条件</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumerableExtension.Insert``1(``0[],System.Int32,``0[])">
            <summary>
            在数组指定的索引位置插入指定的数组元素。
            </summary>
            <typeparam name="T">数组泛型类型</typeparam>
            <param name="array">插入元素的数组</param>
            <param name="index">插入的索引位置(从0开始的索引)</param>
            <param name="values">插入数组的元素</param>
        </member>
        <member name="T:App.FunctionLibrary.EnumExtension">
            <summary>
            枚举类型扩展函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.CEnum``1(System.Int32)">
            <summary>
            将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
            </summary>
            <typeparam name="T">枚举对象类型。</typeparam>
            <param name="value">包含要转换的值或名称的字符串。</param>
            <returns>枚举类型的对象，其值由 value 表示。</returns>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.CEnum``1(System.Int32,``0)">
            <summary>
            将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
            </summary>
            <typeparam name="T">枚举对象类型。</typeparam>
            <param name="value">包含要转换的值或名称的字符串。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <returns>枚举类型的对象，其值由 value 表示。</returns>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.CEnum``1(System.String)">
            <summary>
            将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
            </summary>
            <typeparam name="T">枚举对象类型。</typeparam>
            <param name="value">包含要转换的值或名称的字符串。</param>
            <returns>枚举类型的对象，其值由 value 表示。</returns>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.CEnum``1(System.String,``0)">
            <summary>
            将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
            </summary>
            <typeparam name="T">枚举对象类型。</typeparam>
            <param name="value">包含要转换的值或名称的字符串，包括MapCode映射的编码字符串。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <returns>枚举类型的对象，其值由 value 表示。</returns>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.TryEnum``1(System.String,``0@)">
            <summary>
            尝试解析枚举类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.TryEnum(System.String,System.Type,System.Object@)">
            <summary>
            尝试解析枚举类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.Value(System.Enum)">
            <summary>
            枚举类型值转为整型值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.Name(System.Enum)">
            <summary>
            枚举类型值转换为名称
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.Code(System.Enum,System.Boolean)">
            <summary>
            枚举值转换为编码值(必须做 Binding 绑定才能通过该函数获取枚举值的编码)。
            </summary>
            <param name="enum">枚举值</param>
            <param name="throwOnNotfound">True表示当未发现 MapCode 时是否抛出异常，False表示返回空字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.Summary(System.Enum)">
            <summary>
            枚举绑定的摘要信息(必须做 Binding 绑定才能通过该函数获取枚举值的摘要信息)。
            </summary>
            <param name="enum">枚举值</param>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.ToDictionary``1(``0)">
            <summary>
            枚举类型的所有枚举项生成为枚举项实体列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EnumExtension.ToDictionary(System.Type)">
            <summary>
            枚举类型的所有枚举项生成为枚举项实体列表
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.CopyExtension">
            <summary>
            对象实例拷贝扩展函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CopyExtension.CopyFrom``2(``1,``0)">
            <summary>
            从源数据实体中复制数据，并且返回当前实体。
            </summary>
            <param name="value">需要拷贝数据的当前数据实体</param>
            <param name="item">需要复制数据的源数据实体</param>
        </member>
        <member name="M:App.FunctionLibrary.CopyExtension.copyFrom(System.Object,System.Object,System.Collections.Generic.IList{App.FunctionLibrary.DataMapExtension.CanCopyMapping})">
            <summary>
            数据复制
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CopyExtension.CopyTo``2(``0,``1)">
            <summary>
            从当前数据实体复制数据到目标实体类中并且返回目标实体类实例。
            </summary>
            <param name="value">拷贝的当前源实体</param>
            <param name="item">需要复制数据的目标实体类</param> 
        </member>
        <member name="M:App.FunctionLibrary.CopyExtension.CopyTo``1(System.Object)">
            <summary>
            把实例化的实体数据拷贝到指定的泛型数据实体中并且返回该实体。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CopyExtension.Copy``1(``0)">
            <summary>
            复制当前数据实体的精确副本。
            </summary>
            <typeparam name="T">实体泛型类型</typeparam>
            <param name="item">当前数据实体</param>
        </member>
        <member name="M:App.FunctionLibrary.CopyExtension.Copy``1(System.Object)">
            <summary>
            复制当前数据实体的精确副本。
            </summary>
            <typeparam name="T">实体泛型类型</typeparam>
            <param name="item">当前数据实体</param>
        </member>
        <member name="T:App.FunctionLibrary.ReflectorExtension">
            <summary>
            反射操作扩展函数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ReflectorExtension.BindingsPublic">
            <summary>
            只搜索公共的绑定标识。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ReflectorExtension.BindingsNonPublic">
            <summary>
            搜索所有的绑定标识(包括私有成员)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetMembers(System.Type,System.Reflection.BindingFlags,System.Reflection.MemberTypes,System.Boolean)">
            <summary>
            在类型中使用指定绑定约束，按成员类型搜索定义的所有成员。
            </summary>
            <param name="type">获取成员的类型</param>
            <param name="bindings">指定绑定约束</param>
            <param name="memberType">成员类型，多个成员可以或运算传入</param>
            <param name="includeBasePrivate">是否包括基类私有成员。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetMember(System.Type,System.String,System.Boolean)">
            <summary>
            在类型中搜索指定名称的第一个成员(忽略大小写)。
            </summary>
            <param name="name">指定的成员名称(忽略大小写)</param>
            <param name="includeBasePrivate">是否包括基类私有成员。</param>
            <param name="type">获取成员的类型</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetMethod(System.Type,System.String,System.Object[])">
            <summary>
            获取指定方法名称的方法(并自动修正参数值类型)。
            </summary>
            <param name="name">调用方法名称</param>
            <param name="type">声明方法的对象类型</param>
            <param name="params">输入参数集</param>
            <remarks>指定的方法名不存在时注意捕获 MethodAccessException。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetMethod(System.Type,System.String,System.Object[]@)">
            <summary>
            获取指定方法名称的方法(并自动修正参数值类型)。
            </summary>
            <param name="name">调用方法名称</param>
            <param name="type">声明方法的对象类型</param>
            <param name="values">输入参数集</param>
            <remarks>指定的方法名不存在时注意捕获 MethodAccessException。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            获取指定方法名称的方法
            </summary>
            <param name="type">声明方法的对象类型</param>
            <param name="name">调用方法名称</param>
            <param name="types">调用方法的参数类型</param>
            <remarks>指定的方法名不存在时注意捕获 MethodAccessException。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.ParameterTypesCanConvert(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            比较参数值数据类型和方法参数类型是否一致。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.ParameterTypesCanConvert(System.Reflection.ParameterInfo[],System.Object[]@)">
            <summary>
            比较参数值数据类型和方法参数类型是否一致(并且整理参数值为目标参数类型)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.Invoke``1(System.Object,System.String,System.Object[])">
            <summary>
            调用对象的委托(实例化的对象)。
            </summary>
            <param name="obj">在其实进行委托的实例化对象。</param>
            <param name="name">调用的函数限定名</param>
            <param name="params">委托时所需要使用的参数组</param>
            <remarks>指定的方法名不存在时注意捕获 MethodAccessException。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.Invoke``1(System.Object,System.String,System.Type,System.Object[])">
            <summary>
            调用对象的委托(实例化的对象)。
            </summary>
            <param name="obj">在其实进行委托的实例化对象。</param>
            <param name="name">调用的函数限定名</param>
            <param name="params">委托时所需要使用的参数组</param>
            <param name="declaringType">声明方法的类型</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            调用对象的委托(实例化的对象)。
            </summary>
            <param name="obj">在其实进行委托的实例化对象。</param>
            <param name="name">调用的函数限定名</param>
            <param name="params">委托时所需要使用的参数组</param>
            <remarks>指定的方法名不存在时注意捕获 MethodAccessException。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.Invoke(System.Object,System.String,System.Type,System.Object[])">
            <summary>
            调用对象的委托(实例化的对象)。
            </summary>
            <param name="obj">在其实进行委托的实例化对象。</param>
            <param name="name">调用的函数限定名</param>
            <param name="params">委托时所需要使用的参数组</param>
            <param name="declaringType">声明方法的类型</param>
            <remarks>指定的方法名不存在时注意捕获 MethodAccessException。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.Invoke``1(System.Type,System.String,System.Object[])">
            <summary>
            调用对象的委托(静态函数)。
            </summary>
            <param name="type">声明静态函数的对象类型。</param>
            <param name="name">调用的函数限定名</param>
            <param name="params">委托时所需要使用的参数组</param>
            <remarks>指定的方法名不存在时注意捕获 MethodAccessException。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.Invoke(System.Type,System.String,System.Object[])">
            <summary>
            调用对象的委托(静态函数)。
            </summary>
            <param name="type">声明静态函数的类型。</param>
            <param name="name">调用的函数限定名</param>
            <param name="params">委托时所需要使用的参数组</param>
            <remarks>指定的方法名不存在时注意捕获 MethodAccessException。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetValue``1(``0,System.String,System.Boolean)">
            <summary>
            获取实例化对象的字段或者属性值。
            </summary>
            <param name="obj">实例化对象</param>
            <param name="name">字段或者属性名称(忽略大小写)</param>
            <param name="unfoundThrow">未发现限定名时指示是抛出异常还是返回null。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetValue(System.Type,System.String,System.Boolean)">
            <summary>
            获取静态类的字段或者属性值。
            </summary>
            <param name="type">静态类型</param>
            <param name="name">字段名称(忽略大小写)</param>
            <param name="unfoundThrow">未发现限定名时指示是抛出异常还是返回null。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetValue(System.Reflection.MemberInfo,System.Object,System.Boolean)">
            <summary>
            获取字段或者属性值。
            </summary>
            <param name="info">字段或者属性成员信息。</param>
            <param name="obj">实体对象，静态类为 null。</param>
            <param name="unfoundThrow">未发现限定名时指示是抛出异常还是返回null。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetValue``1(``0,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取实体类对象的字段或者属性值。
            </summary>
            <param name="obj">对象实例</param>
            <param name="info">成员信息</param>
            <param name="unfoundThrow">未发现限定名时指示是抛出异常还是返回null。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.SetValue``1(``0,System.String,System.Object,System.Boolean)">
            <summary>
            设置实例化对象的字段或者属性值。
            </summary>
            <param name="obj">实例化对象</param>
            <param name="name">字段或者属性名称(忽略大小写)</param>
            <param name="value">字段或者属性名称的值</param>
            <param name="unfoundThrow">未发现限定名时指示是抛出异常还是返回null。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.SetValue(System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            设置获取静态类的字段或者属性值。
            </summary>
            <param name="type">静态类</param>
            <param name="name">字段或者属性名称(忽略大小写)</param>
            <param name="value">字段或者属性名称的值</param>
            <param name="unfoundThrow">未发现限定名时指示是抛出异常还是返回null。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.SetValue(System.Reflection.MemberInfo,System.Object,System.Object,System.Boolean)">
            <summary>
            设置字段或者属性值。
            </summary>
            <param name="value">对象实例</param>
            <param name="info">字段或者属性成员信息。</param>
            <param name="obj">实体对象，静态类为 null。</param>
            <param name="unfoundThrow">未发现限定名时指示是抛出异常还是返回null。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.SetValue``1(``0,System.Reflection.MemberInfo,System.Object,System.Boolean)">
            <summary>
            设置字段或者属性值。
            </summary>
            <param name="info">字段或者属性成员信息。</param>
            <param name="obj">实体对象。</param>
            <param name="value">对象实例</param>
            <param name="unfoundThrow">未发现限定名时指示是抛出异常还是返回null。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.IsStatic(System.Reflection.PropertyInfo)">
            <summary>
            判断属性是否为静态属性
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.AddEventHandler``1(``0,System.String,System.Delegate,System.Boolean)">
            <summary>
            将事件处理程序添加到事件源。
            </summary>
            <param name="name">事件名称</param>
            <param name="handler">事件触发时将调用的方法委托。</param>
            <param name="target">触发事件的事件源</param>
            <param name="throwOnError">发生错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.RemoveEventHandler``1(``0,System.String,System.EventHandler,System.Boolean)">
            <summary>
            从事件源中移除事件处理程序。
            </summary>
            <param name="name">事件名称</param>
            <param name="handler">事件触发时将调用的方法委托。</param>
            <param name="target">触发事件的事件源</param>
            <param name="throwOnError">发生错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetAttribute(System.Reflection.Assembly)">
            <summary>
            获取程序集属性
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetResource(System.Reflection.Assembly,System.String)">
            <summary>
            从此程序集加载嵌入的资源。
            </summary>
            <param name="assembly">获取嵌入资源的程序集</param>
            <param name="name">嵌入的资源限定名</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetResource``1(``0,System.String)">
            <summary>
            获取包含当前执行代码的程序集嵌入的资源。
            </summary>
            <param name="declare">包含当前执行代码的类对象</param>
            <param name="name">嵌入的资源限定名</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.ReferencedAssemblies(System.Reflection.Assembly,System.Boolean,System.String[])">
            <summary>
            获取程序集引用的所有程序集文件(包括间接引用的程序集，不包括系统程序集)。
            </summary>
            <param name="assembly">需要获取引用的程序集</param>
            <param name="ignoreUnfound">true表示忽略未找到的程序集，false表示抛出异常DllNotFoundException。</param>
            <param name="excludeAssemblyNames">排除的程序集名称(不包括扩展名)</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.IsDebugVersion(System.Reflection.Assembly)">
            <summary>
            判断程序集是否为 DEBUG 版本。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.IsRuntimeInWebContext(System.AppDomain)">
            <summary>
            进程是否在Web上下文中运行(用于判断是否为Web应用程序)。
            </summary>
            <param name="appdomain">当前应用程序域</param>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.AssemblyName(System.Type)">
            <summary>
            获取定义类型的程序集简单名称(不是程序集的清单文件的文件名，不包括其扩展名。)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.Name(System.Reflection.Assembly)">
            <summary>
            获取程序集简单名称(不是程序集的清单文件的文件名，不包括其扩展名。)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
            获取程序集的属性标签
            </summary>
            <typeparam name="T">获取属性标签的类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetAttribute``1(System.Type)">
            <summary>
            获取类型的属性标签
            </summary>
            <typeparam name="T">获取属性标签的类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取成员的属性标签
            </summary>
            <typeparam name="T">获取属性标签的类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetAttributes``1(System.Reflection.Assembly)">
            <summary>
            获取程序集的属性标签集
            </summary>
            <typeparam name="T">获取属性标签的类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetAttributes``1(System.Type)">
            <summary>
            获取类型的属性标签集
            </summary>
            <typeparam name="T">获取属性标签的类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            获取成员的属性标签集
            </summary>
            <typeparam name="T">获取属性标签的类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.parametersEquals(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            方法参数是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ReflectorExtension.getArrayType(System.Object[])">
            <summary>
            获取匿名数组的类型
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.RegistryExtension">
            <summary>
            注册表扩展函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RegistryExtension.HasSecurityAccess(Microsoft.Win32.RegistryKey)">
            <summary>
            获取当前登录的Windows的用户是否对指明的注册表键有访问权限
            </summary>
            <param name="subkey">指明的注册表键</param>
        </member>
        <member name="M:App.FunctionLibrary.RegistryExtension.OpenSecurityAccess(Microsoft.Win32.RegistryKey)">
            <summary>
            打开当前登录的Windows用户的注册表键安全控制。
            </summary>
            <param name="subkey">注册表子键。</param>
        </member>
        <member name="M:App.FunctionLibrary.RegistryExtension.CloseSecurityAccess(Microsoft.Win32.RegistryKey)">
            <summary>
            关闭当前登录的Windows用户的注册表键安全控制。
            </summary>
            <param name="subKey">注册表子键</param>
        </member>
        <member name="M:App.FunctionLibrary.RegistryExtension.getCurrentUserAccessRule">
            <summary>
            获取当前登录Windows用户的安全访问规则
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RegistryExtension.OpenSubKey(Microsoft.Win32.RegistryKey,System.String[])">
            <summary>
            打开当前键中指明键名的子键并且返回(不存在的子键将自动创建)。
            </summary>
            <param name="key">指定的键对象。</param>
            <param name="subKeyNames">相对于键对象的子键名路径(未指明子键名称路径的返回指定键对象Key)。</param>
        </member>
        <member name="M:App.FunctionLibrary.RegistryExtension.Delete(Microsoft.Win32.RegistryKey,System.String[])">
            <summary>
            删除当前注册表键和任何子键。
            </summary>
            <param name="key">指定的键对象。</param>
            <param name="subKeyNames">相对于键对象的子键名路径(未指明子键名称路径的返回指定键对象Key)。</param>
        </member>
        <member name="T:App.FunctionLibrary.StreamExtensions">
            <summary>
            字节流操作扩展函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ToArray(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            将流内容从偏移地址处写入指定长度的字节数组。
            </summary>
            <param name="stream">需要输出的数据流对象</param>
            <param name="offset">从零开始的字节偏移量，从此处开始从当前流中读取的数据,缺省表示源数据流的当前位置。</param>
            <param name="count">要从数据流中最多读取的字节数(默认是读取剩余的所有数据)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ToArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            字节组快速输出新的字节组(用 BlockCopy 技术)。
            </summary>
            <param name="buffer">需要输出的字节组。</param>
            <param name="offset">从零开始的字节偏移量，从此处开始从当前字节组中读取数据。</param>
            <param name="count">输出的字节组长度。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ToString(System.IO.Stream,System.Text.Encoding,System.Int64,System.Int64)">
            <summary>
            将流内容从偏移地址处写入指定长度的字符串。
            </summary>
            <param name="stream">需要输出的数据流对象</param>
            <param name="offset">从零开始的字节偏移量，从此处开始从当前流中读取的数据,缺省表示源数据流的当前位置。</param>
            <param name="count">要从数据流中最多读取的字节数(默认是读取剩余的所有数据)。</param>
            <param name="encoding">编码集(缺省表示使用 UTF8 编码集)</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ToString(System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            将指定的数据流字节的每个元素的数值转换为它的等效十六进制字符串表示形式。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
            <param name="delimiter">连字符</param>
            <param name="count">要从数据流中最多读取的字节数(默认是读取剩余的所有数据)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            当前数据流写入源数据流,并且返回当前数据流。
            </summary>
            <param name="stream">当前数据流</param>
            <param name="source">写入的源数据流</param>
            <param name="offset">从零开始的字节偏移量，从此处开始从源数据流中读取的数据,缺省表示源数据流的当前位置。</param>
            <param name="count">要从源数据流中最多读取的字节数。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            当前数据流写入字符串,并且返回当前数据流。
            </summary>
            <param name="stream">当前数据流</param>
            <param name="source">写入的字符串</param>
            <param name="encoding">字符集编码(默认:UTF8)</param>
            <param name="count">要写入数据流的最大字节数(缺省表示全部字节,长度不足时补加值为0的字节))。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            数据流写入数据缓冲区字节块,并且返回数据流(具有偏移量和写入字节数的判断)。
            </summary>
            <param name="stream">写入的数据流</param>
            <param name="buffer">数据缓冲区字节块</param>
            <param name="count">要从缓冲区字节块中最多读取的字节数(缺省表示全部字节,长度不足时补加值为0的字节)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            数据流写入数据缓冲区字节块,并且返回数据流(具有偏移量和写入字节数的判断)。
            </summary>
            <param name="stream">写入的数据流</param>
            <param name="buffer">数据缓冲区字节块</param>
            <param name="offset">从零开始的字节偏移量，从此处开始从源数据缓冲区读取数据。</param>
            <param name="count">要从缓冲区字节块中最多读取的字节数(缺省表示全部字节,长度不足时补加值为0的字节)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Byte[])">
            <summary>
            数据流写入数据缓冲区字节块,并且返回数据流。
            </summary>
            <param name="stream">写入的数据流</param>
            <param name="buffer">数据缓冲区字节块</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Boolean)">
            <summary>
            数据流写入单字节布尔值数据,并且返回数据流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Char)">
            <summary>
            数据流写入2字节 Unicode 字符数据,并且返回数据流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Int16)">
            <summary>
            数据流写入2字节的 16 位有符号整数值数据,并且返回数据流(已按大字节序处理)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Int32)">
            <summary>
            数据流写入4字节的 32 位有符号整数值数据,并且返回数据流(已按大字节序处理)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Int64)">
            <summary>
            数据流写入8字节的 64 位有符号整数值数据,并且返回数据流(已按大字节序处理)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.UInt16)">
            <summary>
            数据流写入2字节的 16 位无符号整数值数据,并且返回数据流(已按大字节序处理)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.UInt32)">
            <summary>
            数据流写入4字节的 32 位无符号整数值数据,并且返回数据流(已按大字节序处理)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.UInt64)">
            <summary>
            数据流写入8字节的 64 位无符号整数值数据,并且返回数据流(已按大字节序处理)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Single)">
            <summary>
            数据流写入4字节的单精度浮点值数据,并且返回数据流(已按大字节序处理)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Write(System.IO.Stream,System.Double)">
            <summary>
            数据流写入8字节的双精度浮点值数据,并且返回数据流(已按大字节序处理)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadBytes(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            从数据流中读取字节数组。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
            <param name="count">读取字节的长度，缺省表示读取剩余的全部字节。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadBoolean(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个1字节布尔值。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadChar(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个2字节 Unicode 字符。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadString(System.IO.Stream,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            从数据流中读取一个2字节 Unicode 字符。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
            <param name="count">要从数据流中最多读取的字节数(默认是读取剩余的所有数据)。</param>
            <param name="encoding">编码集(缺省表示使用 UTF8 编码集)</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadShort(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个2字节的 16 位有符号整数值(已按大字节序处理)。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadInteger(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个4字节的 32 位有符号整数值(已按大字节序处理)。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadLong(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个8字节的 32 位有符号整数值(已按大字节序处理)。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadUShort(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个2字节的 16 位无符号整数值(已按大字节序处理)。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadUInteger(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个4字节的 32 位无符号整数值(已按大字节序处理)。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadULong(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个8字节的 32 位无符号整数值(已按大字节序处理)。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadSingle(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个4字节的单精度浮点值(已按大字节序处理)。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ReadDouble(System.IO.Stream,System.Int32)">
            <summary>
            从数据流中读取一个8字节的双精度浮点值(已按大字节序处理)。
            </summary>
            <param name="stream">读取数据的流对象</param>
            <param name="offset">在数据流中从此位置开始读取，缺省表示数据流的当前位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ToInt(System.Byte[])">
            <summary>
            由字节数组转换为整型
            </summary>
            <param name="bytes">目标字节数组</param>
            <returns>返回转换后的整型数值</returns>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ToInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            由字节数组转换为整型
            </summary>
            <param name="bytes">目标字节数组</param>
            <param name="index">第一个要转换的字节索引。</param>
            <param name="count">要转换的字节数。</param>
            <returns>返回转换后的整型数值</returns>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ToBytes(System.Int32)">
            <summary>
            由长整型数值转换为字节数组
            </summary>
            <param name="value">目标长整型数值</param>
            <returns>返回转换后的字节数组</returns>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ToBase64(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            将流内容从偏移地址处写入指定长度的Base64编码的字符串。
            </summary>
            <param name="stream">需要输出的数据流对象</param>
            <param name="offset">从零开始的字节偏移量，从此处开始从当前流中读取的数据,缺省表示源数据流的当前位置。</param>
            <param name="count">要从数据流中最多读取的字节数(默认是读取剩余的所有数据)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.ToStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            字节数据写入内存数据流中并且返回该流。
            </summary>
            <param name="buffer">需要转换的字节数组</param>
            <param name="offset">从零开始的字节偏移量，从此处开始从当前字节数组中读取的数据,缺省表示源数据流的当前位置。</param>
            <param name="count">要从数据流中最多读取的字节数。</param>
        </member>
        <member name="M:App.FunctionLibrary.StreamExtensions.Copy(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            拷贝当前流数据的副本
            </summary>
            <param name="stream">拷贝数据的当前流</param>
            <param name="offset">从零开始的字节偏移量，从此处开始拷贝流数据,缺省表示源数据流的当前位置。</param>
            <param name="count">从当前数据流中最多拷贝的字节数。</param>
        </member>
        <member name="T:App.FunctionLibrary.StringExtension">
            <summary>
            字符串操作扩展函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IndexOf(System.String,System.String,System.Boolean)">
            <summary>
            被搜索字符串 search 在 value 字符串中首次出现的位置索引(从0开始的索引)。
            </summary>
            <param name="value">被搜索的字符串</param>
            <param name="search">用于搜索的字符串</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IndexOf(System.String,System.String[])">
            <summary>
            被搜索字符串 search 中的任意一个在 value 字符串中首次出现的位置索引(从0开始的索引，忽略大小写)。
            </summary>
            <param name="value">被搜索的字符串</param>
            <param name="search">用于搜索的字符串，任意一个字符串被搜索到立即返回(忽略大小写)</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IndexOf(System.String,System.String,System.Char[])">
            <summary>
            搜索指定的子字符串，并且返回首个搜索索引位置(搜索失败返回 -1,忽略大小写，支持通配符)。
            </summary>
            <param name="value">操作的字符串</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IndexOf(System.String,System.Int32,System.String[])">
            <summary>
            搜索指定的子字符串数组，并且返回首个搜索索引位置(搜索失败返回 -1)。
            </summary>
            <param name="value">操作的字符串</param>
            <param name="start">开始搜索的从0开始的索引位置</param>
            <param name="search">用于搜索的子字符串数组(忽略大小写)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IndexOf(System.String,System.Int32,System.String,System.Char[])">
            <summary>
            搜索指定的子字符串数组，并且返回首个搜索索引位置(搜索失败返回 -1,忽略大小写，支持通配符)。
            </summary>
            <param name="value">操作的字符串</param>
            <param name="start">开始搜索的从0开始的索引位置</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IndexesOf(System.String,System.String[])">
            <summary>
            搜索指定的子字符串数组，并且返回搜索结果(Pair.Name表示搜索的字符串,Pair.Value=表示搜索到的位置)。
            </summary>
            <param name="value">操作的字符串</param>
            <param name="search">用于搜索的子字符串数组(忽略大小写)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Betweens(System.String,System.String,System.String,System.Boolean)">
            <summary>
            从当前字符串中搜索 starts 和 ends 之间所有符合条件的字符串数组(忽略大小写)。
            </summary>
            <param name="value">取值的当前字符串</param>
            <param name="start">开始条件(默认从第一个字符开始)</param>
            <param name="end">结束条件(默认到最后一个字符结束)</param>
            <param name="includeMarks">返回结果是否包括开始和结束字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Between(System.String,System.String,System.String,System.Boolean)">
            <summary>
            从当前字符串中返回 starts 和 ends 之间第一个符合条件的字符串(忽略大小写)。
            </summary>
            <param name="value">取值的当前字符串</param>
            <param name="start">开始条件(默认从第一个字符开始)</param>
            <param name="end">结束条件(默认到最后一个字符结束)</param>
            <param name="includeMarks">返回结果是否包括开始和结束字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Between(System.String,System.Int32,System.Int32)">
            <summary>
            从当前字符串中返回 starts 和 ends 之间的子字符串。
            </summary>
            <param name="value">取值的当前字符串</param>
            <param name="start">子字符串的开始位置(从0开始的计数)</param>
            <param name="end">子字符串的结束位置(从0开始的计数)</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.BetweenQuote(System.String,System.String,System.Boolean)">
            <summary>
            获取括号内的子字符串(兼容内括号的用法,左右括号标记符号必须配对)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="marks">获取子字符串的左右括号标记符号</param>
            <param name="includeMarks">返回结果是否包括左右括号标记符号</param>
            <returns>如果左右括号标记符号不匹配时返回空字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.BetweenQuote(System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取括号内的子字符串(兼容内括号的用法,左右括号标记符号必须配对)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="leftMark">获取子字符串的左括号标记符号</param>
            <param name="rightMark">获取子字符串的右括号标记符号(缺省表示与左括号标记符号相同)</param>
            <param name="includeMarks">返回结果是否包括左右括号标记符号</param>
            <returns>如果左右括号标记符号不匹配时返回空字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.BetweenQuotes(System.String,System.String,System.Boolean)">
            <summary>
            获取括号内的子字符串(兼容内括号的用法,左右括号标记符号必须配对)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="marks">获取子字符串的左右括号标记符号</param>
            <param name="includeMarks">返回结果是否包括左右括号标记符号</param>
            <returns>如果左右括号标记符号不匹配时返回空字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.BetweenQuotes(System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取括号内的子字符串(兼容内括号的用法,左右括号标记符号必须配对)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="leftMark">获取子字符串的左括号标记符号</param>
            <param name="rightMark">获取子字符串的右括号标记符号(缺省表示与左括号标记符号相同)</param>
            <param name="includeMarks">返回结果是否包括左右括号标记符号</param>
            <returns>如果左右括号标记符号不匹配时返回空字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Insert(System.String,System.Int32,System.String)">
            <summary>
            对指定的字符串追加字符串
            </summary>
            <param name="value">目标字符串</param>
            <param name="index">插入的索引位置(从 0 开始的计数)。</param>
            <param name="insert">需要追加的字符串</param>
            <returns>返回追加后的字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.SubString(System.String,System.Int32,System.Int32)">
            <summary>
            截取子字符串(不同于系统SubString,具有自动纠错功能)。
            </summary>
            <param name="value">目标字符串</param>
            <param name="start">开始的字符串位置(从 0 开始的计数)。</param>
            <param name="length">截取字符串的长度(小于0表示截取所有剩余字符)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Remove(System.String,System.Int32,System.Int32)">
            <summary>
            删除字符串
            </summary>
            <param name="value">目标字符串</param>
            <param name="start">删除字符串中字符的位置(从 0 开始的计数)。</param>
            <param name="length">需要删除字符串中字符的个数(缺省表示之后的所有字符全移除)</param>
            <returns>返回删除后的字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.RemoveStart(System.String,System.Int32)">
            <summary>
            删除字符串指定长度的开头字符串
            </summary>
            <param name="value">目标字符串</param>
            <param name="length">删除字符串的长度</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.RemoveEnd(System.String,System.Int32)">
            <summary>
            删除字符串指定长度的结尾字符串
            </summary>
            <param name="value">目标字符串</param>
            <param name="length">删除字符串的长度</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IsControl(System.Char)">
            <summary>
            指示指定的 Unicode 字符是否属于控制字符类别。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IsDigit(System.Char,System.Char[])">
            <summary>
            指示指定的 Unicode 字符是否属于十进制数字类别。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IsDigit(System.String)">
            <summary>
            判定字符串是否为有效数值(包括符号和小数)
            </summary>
            <param name="value">操作的字符串</param>
            <returns>如果全部为数字字符返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IsDigit(System.String,App.FunctionLibrary.DigitType)">
            <summary>
            判定字符串是否为有效数值
            </summary>
            <param name="value">操作的字符串</param>
            <param name="digitType">十进制数值类型(带符号的数字判断用 Or 运算，带符号浮点数表示为:Decimal Or Signed)。</param>
            <returns>如果全部为数字字符返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IsLetter(System.Char)">
            <summary>
            指示是否将指定的 Unicode 字符分类为 Unicode 字母。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IsLetterOrDigit(System.Char,System.Char[])">
            <summary>
            指示将指定的 Unicode 字符分类为字母还是十进制数字。
            </summary>
            <param name="c"></param>
            <param name="values">除字母和数字之外包含的特殊字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IsSpelling(System.String)">
            <summary>
            判断指定的字符串是否全部为字母(不包括空格和空字符)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Left(System.String,System.Int32,System.Int32)">
            <summary>
            取字符串的从左边开始的指定位置和长度的子字符串。
            </summary> 
            <param name="start">指定开始获取字符串的位置(从 0 开始的计数)。</param> 
            <param name="value">操作的字符串</param>
            <param name="length">获取的字符串长度</param>
            <returns>返回获取的字符串</returns> 
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Left(System.String,System.Int32)">
            <summary>
            取字符串的从左边开始指定长度的子字符串。
            </summary>
            <param name="value">操作的字符串</param>
            <param name="length">获取的字符串长度</param>
            <returns>返回获取的字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Right(System.String,System.Int32,System.Int32)">
            <summary>
            取字符串的从右边开始的指定位置和长度的子字符串。
            </summary>
            <param name="value">操作的字符串</param>
            <param name="length">获取的字符串长度</param> 
            <param name="start">指定开始获取字符串的位置(从 0 开始的计数)。</param>  
            <returns>返回获取的字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Right(System.String,System.Int32)">
            <summary>
            取字符串的从右边开始指定长度的子字符串。
            </summary>
            <param name="value">操作的字符串</param>
            <param name="length">获取的字符串长度</param>
            <returns>返回获取的字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Contains(System.String,System.String,System.Boolean)">
            <summary>
            判断字符串是否包含 search 字符串。
            </summary>
            <param name="value">被搜索的字符串</param>
            <param name="search">用于搜索的内容字符串</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Contains(System.String,System.String[])">
            <summary>
            判断字符串是否包含 search 字符串(忽略大小写)。
            </summary>
            <param name="value">被搜索的字符串</param>
            <param name="search">用于搜索的内容字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Contains(System.String,System.String,System.Char[])">
            <summary>
            value字符串是否包含find字符串(忽略大小写，支持通配符)。
            </summary>
            <param name="value">被搜索的字符串</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Contains(System.String,System.String[],System.Char[])">
            <summary>
            value字符串是否包含find字符串(忽略大小写，支持通配符)。
            </summary>
            <param name="value">被搜索的字符串</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="search">要比较的字符串。</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.StartsWith(System.String,System.String[])">
            <summary>
            确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配(忽略大小写)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="search">要比较的字符串(忽略大小写)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.StartsWith(System.String,System.String,System.Char[])">
            <summary>
            确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配(忽略大小写，支持通配符)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.StartsWith(System.String,System.String[],System.Char[])">
            <summary>
            确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配(忽略大小写，支持通配符)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.StartsWith(System.String,System.Int32,System.String,System.Char[])">
            <summary>
            确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配(忽略大小写，支持通配符)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="start">开始匹配的索引位置(从0开始的索引)</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配。
            </summary>
            <param name="search">要与此实例末尾的子字符串进行比较的字符串。</param>
            <param name="value">字符串表达式</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.EndsWith(System.String,System.String[])">
            <summary>
            确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配(忽略大小写)。
            </summary>
            <param name="search">要与此实例末尾的子字符串进行比较的字符串(忽略大小写)。</param>
            <param name="value">字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.EndsWith(System.String,System.String,System.Char[])">
            <summary>
            确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配(忽略大小写，支持通配符)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.EndsWith(System.String,System.String[],System.Char[])">
            <summary>
            确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配(忽略大小写，支持通配符)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Equals(System.String,System.String,System.Boolean)">
            <summary>
            比较两个字符串是否完全相等。
            </summary>
            <param name="value">被比较的字符串</param>
            <param name="compare">用于比较的字符串</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Equals(System.String,System.String[])">
            <summary>
            比较两个字符串是否完全相等(忽略大小写)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Equals(System.String,System.String,System.Char[])">
            <summary>
            确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配(忽略大小写，支持通配符)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Equals(System.String,System.String[],System.Char[])">
            <summary>
            确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配(忽略大小写，支持通配符)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Equals(System.String,System.Object[])">
            <summary>
            比较两个字符串是否完全相等(忽略大小写)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            替换字符串。
            </summary>
            <param name="value">包含要替换子字符串的字符串表达式。</param>
            <param name="search">要搜索被替换的子字符串。</param>
            <param name="replace">要替换为的子字符串。</param>
            <param name="ignoreCase">忽略大小写</param>
            <returns>返回被替换过子字符串以后的新字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Replace(System.String,System.String[],System.String)">
            <summary>
            替换字符串(忽略大小写)。
            </summary>
            <param name="value">包含要替换子字符串的字符串表达式。</param>
            <param name="search">要搜索被替换的子字符串组(忽略大小写)。</param>
            <param name="replace">要替换为的子字符串。</param>
            <returns>返回被替换过子字符串以后的新字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Replace(System.String,System.String,System.String,System.Char[])">
            <summary>
            替换字符串(忽略大小写，支持通配符)。
            </summary>
            <param name="value">包含要替换子字符串的字符串表达式。</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="replace">要替换为的子字符串。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
            <returns>返回被替换过子字符串以后的新字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Replace(System.String@,System.String,System.String,System.Char[])">
            <summary>
            替换字符串(忽略大小写，支持通配符)。
            </summary>
            <param name="value">包含要替换子字符串的字符串表达式。</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="replace">要替换为的子字符串。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
            <returns>返回被替换过子字符串以后的新字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Replace(System.String@,System.String[],System.String,System.Char[])">
            <summary>
            替换字符串(忽略大小写，支持通配符)。
            </summary>
            <param name="value">包含要替换子字符串的字符串表达式。</param>
            <param name="search">查找的字符串,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="replace">要替换为的子字符串。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
            <returns>返回被替换过子字符串以后的新字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.String)">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 String 表达式。</param>
            <param name="delimiter">用于标识子字符串界限的任何字符串(忽略大小写)。如果省略 Delimiter，则采用空格字符 (" ") 为分隔符</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.String,System.Boolean)">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 String 表达式。</param>
            <param name="delimiter">用于标识子字符串界限的任何字符串(忽略大小写)。如果省略 Delimiter，则采用空格字符 (" ") 为分隔符</param>
            <param name="removeEmpty">是否移除空的字符元素</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.Char,System.Boolean)">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 String 表达式。</param>
            <param name="delimiter">用于标识子字符串界限的任何字符串(忽略大小写)。如果省略 Delimiter，则采用空格字符 (" ") 为分隔符</param>
            <param name="removeEmpty">是否移除空的字符元素</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.String[])">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 string 表达式。</param>
            <param name="delimiters">用于标识子字符串界限的任何字符串(忽略大小写)。如果省略 Delimiter，则采用空格字符 (" ") 为分隔符</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.Boolean,System.String[])">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 String 表达式。</param>
            <param name="delimiters">用于标识子字符串界限的任何字符串(忽略大小写)。如果省略 Delimiter，则采用空格字符 (" ") 为分隔符</param>
            <param name="removeEmpty">是否移除空的字符元素</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.String[],System.Boolean)">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 String 表达式。</param>
            <param name="delimiters">用于标识子字符串界限的任何字符串(忽略大小写)。如果省略 Delimiter，则采用空格字符 (" ") 为分隔符</param>
            <param name="removeEmpty">是否移除空的字符元素</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.Char[],System.Boolean)">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 String 表达式。</param>
            <param name="delimiters">用于标识子字符串界限的任何字符串(忽略大小写)。如果省略 Delimiter，则采用空格字符 (" ") 为分隔符</param>
            <param name="removeEmpty">是否移除空的字符元素</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.Boolean,System.Char[])">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 String 表达式。</param>
            <param name="delimiters">用于标识子字符串界限的任何字符串(忽略大小写)。如果省略 Delimiter，则采用空格字符 (" ") 为分隔符</param>
            <param name="removeEmpty">是否移除空的字符元素</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.String,System.Char[])">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 String 表达式。</param>
            <param name="delimiter">用于标识子字符串界限的任何字符串(忽略大小写),通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.String[],System.Char[])">
            <summary>
            字符串拆分(忽略大小写)。
            </summary>
            <param name="value">包含子字符串和分隔符的 String 表达式。</param>
            <param name="delimiters">用于标识子字符串界限的任何字符串(忽略大小写),通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
            <returns>返回从 0 开始且包含指定数量的子字符串的一维数组。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Split(System.String,System.Int32,System.Boolean)">
            <summary>
            字符串按拆分长度拆分为若干段
            </summary>
            <param name="value">需要拆分的字符串表达式</param>
            <param name="length">拆分长度</param>
            <param name="asbyte">是否按字节数拆分，按字节拆分时中文字符将自动取整。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Join(System.Collections.IEnumerable,System.String,System.Int32,System.Int32)">
            <summary>
            任何对象的字符串表达式进行连接。
            </summary>
            <param name="values">要连接的字符串组元素。</param>
            <param name="separator">要用作分隔符的字符串。</param>
            <param name="index">开始连接的元素的索引</param>
            <param name="count">连接的最大元素数</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            任何对象的字符串表达式进行连接。
            </summary>
            <param name="values">要连接的字符串组元素。</param>
            <param name="separator">要用作分隔符的字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Join``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,``1})">
            <summary>
            对集合中选出的元素值进行字符串表达式连接。
            </summary>
            <param name="values">要连接的字符串组元素。</param>
            <param name="selector">筛选器</param>
            <param name="separator">要用作分隔符的字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.String)">
            <summary>
            对集合中选出的元素值进行字符串表达式连接。
            </summary>
            <param name="values">要连接的字符串组元素。</param>
            <param name="selector">筛选器</param>
            <param name="separator">要用作分隔符的字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Trim(System.String,System.String[])">
            <summary>
            从字符串对象中移除数组中指定的一组字符的所有前导匹配项和尾部匹配项(忽略大小写)。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="trims">要删除的 Unicode 字符的数组(忽略大小写,缺省表示空格字符串)。</param>
            <returns>从当前字符串的开头和结尾删除所出现的所有 trims 参数中的字符后剩余的字符串。如果 trimStrings 为空数组，则改为删除空白字符。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.TrimSpace(System.String)">
            <summary>
            从字符串对象中移除所有前导空白字符和尾部空白字符(处理了空字符串的情况)。
            </summary>
            <returns>从当前字符串的开头和结尾删除所有空白字符后剩余的字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.TrimAll(System.String,System.String[])">
            <summary>
            从字符串对象中移除数组中指定的一组字符串(忽略大小写)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.TrimStart(System.String,System.String[])">
            <summary>
            从当前 System.String 对象移除数组中指定的一组字符的所有前导匹配项(忽略大小写)。
            </summary>
            <param name="trims">要删除的 Unicode 字符的数组(忽略大小写)。</param>
            <returns>从当前字符串的开头删除所出现的所有 trimChars 参数中的字符后剩余的字符串。如果 trimStrings 为空数组，则改为删除空白字符。</returns>
            <param name="value">字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.TrimStart(System.String,System.String,System.Char[])">
            <summary>
            从当前 System.String 对象移除数组中指定的一组字符的所有前导匹配项(忽略大小写，支持通配符)。
            </summary>
            <param name="trim">要删除的 Unicode 字符的数组(忽略大小写,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定)。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
            <returns>从当前字符串的结尾删除所出现的所有 trimChars 参数中的字符后剩余的字符串。如果 trimStrings 为空数组，则改为删除 Unicode 空白字符。</returns>
            <param name="value">字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.TrimStart(System.String@,System.String,System.Char[])">
            <summary>
            从当前 System.String 对象移除数组中指定的一组字符的所有前导匹配项(忽略大小写，支持通配符)。
            </summary>
            <param name="trim">要删除的 Unicode 字符的数组(忽略大小写,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定)。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
            <returns>成功返回true，失败返回false。</returns>
            <param name="value">字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.TrimEnd(System.String,System.String[])">
            <summary>
            从当前 System.String 对象移除数组中指定的一组字符的所有尾部匹配项(忽略大小写)。
            </summary>
            <param name="trims">要删除的 Unicode 字符的数组(忽略大小写)。</param>
            <returns>从当前字符串的结尾删除所出现的所有 trimChars 参数中的字符后剩余的字符串。如果 trimStrings 为空数组，则改为删除 Unicode 空白字符。</returns>
            <param name="value">字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.TrimEnd(System.String,System.String,System.Char[])">
            <summary>
            从当前 System.String 对象移除数组中指定的一组字符的所有尾部匹配项(忽略大小写，支持通配符)。
            </summary>
            <param name="trim">要删除的 Unicode 字符的数组(忽略大小写,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定)。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
            <returns>从当前字符串的结尾删除所出现的所有 trimChars 参数中的字符后剩余的字符串。如果 trimStrings 为空数组，则改为删除 Unicode 空白字符。</returns>
            <param name="value">字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.TrimEnd(System.String@,System.String,System.Char[])">
            <summary>
            从当前 System.String 对象移除数组中指定的一组字符的所有尾部匹配项(忽略大小写，支持通配符)。
            </summary>
            <param name="trim">要删除的 Unicode 字符的数组(忽略大小写,通配符用 ? 代替，一个问号通配一个字符，通配的字符有 placeHolder 指定)。</param>
            <param name="placeHolder">用于通配的特殊符号，? 表示所有字符</param>
            <returns>成功返回true，失败返回false。</returns>
            <param name="value">字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Parse``1(System.String)">
            <summary>
            字符串解析为泛型类型值(只解析值类型，对象类型为Nothing)。
            </summary>
            <typeparam name="T">需要解析的泛型类型</typeparam>
            <param name="value">被解析的字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Parse(System.String,System.Type)">
            <summary>
            字符串解析为指定数据类型的值(只解析值类型，对象类型为 null)。
            </summary>
            <param name="value">被解析的字符串表达式</param>
            <param name="type">解析的数据类型</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Parse(System.String,System.Type,System.Boolean)">
            <summary>
            字符串解析为指定数据类型的值(只解析值类型，对象类型为 null)。
            </summary>
            <param name="value">被解析的字符串表达式</param>
            <param name="type">解析的数据类型</param>
            <param name="throwOnError">当发生解析失败时是否抛出异常，否则返回默认值。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Parse``1(System.String,System.Boolean)">
            <summary>
            字符串解析为泛型类型值(只解析值类型，对象类型为Nothing)。
            </summary>
            <typeparam name="T">需要解析的泛型类型</typeparam>
            <param name="value">被解析的字符串表达式</param>
            <param name="throwOnError">当发生解析失败时是否抛出异常，否则返回默认值。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Parse``1(System.String,``0)">
            <summary>
            字符串解析为泛型类型值(只解析值类型，对象类型为 null)。
            </summary>
            <typeparam name="T">需要解析的泛型类型</typeparam>
            <param name="value">被解析的字符串表达式</param>
            <param name="defaultValue">解析失败时返回的默认值(空值字符串也视为转换失败)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Format``1(``0,System.String)">
            <summary>
            格式化数据，可以同时进行日期，数字等的格式化
            </summary>
            <param name="value">需要格式化的数据</param>
            <param name="formatString">格式化字符串表达式</param>
            <returns>返回格式化后的数据表达式字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToString``1(``0,System.Int32)">
            <summary>
            数值格式化为指定的小数位数。
            </summary>
            <param name="value">格式化的数值</param>
            <param name="digit">保留的小数位数</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Format``1(``0,System.Int32,System.String,System.Boolean)">
            <summary>
            格式化字符串。
            </summary>
            <param name="value">需要格式化的数据</param>
            <param name="length">格式化后字符串的长度</param>
            <param name="symbol">用于格式化占位的字符</param>
            <param name="isfore">格式化字符是否置于数据之前</param>
            <returns>返回格式化后的字符串表达式</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Format``1(``0,App.FunctionLibrary.MoneyType)">
            <summary>
            数值格式化为货币字符
            </summary>
            <param name="value">目标数值</param>
            <param name="formatType">格式化的方法</param>
            <returns>返回格式化后的货币字符</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Format(System.String,System.Object)">
            <summary>
            字符串中的格式项替换为指定数组中相应对象的字符串表示形式。
            </summary>
            <param name="format">复合格式字符串。</param>
            <param name="arg0">要设置格式的对象。</param>
            <returns>format 的副本，其中的任何格式项均替换为 arg0 的字符串表示形式。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Format(System.String,System.Object,System.Object)">
            <summary>
            字符串中的格式项替换为指定数组中相应对象的字符串表示形式。
            </summary>
            <param name="format">复合格式字符串。</param>
            <param name="arg0"> 要设置格式的第一个对象。</param>
            <param name="arg1">要设置格式的第二个对象</param>
            <returns>format 的副本，其中的格式项替换为 arg0 和 arg1 的字符串表示形式。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            字符串中的格式项替换为指定数组中相应对象的字符串表示形式。
            </summary>
            <param name="format">复合格式字符串。</param>
            <param name="arg0"> 要设置格式的第一个对象。</param>
            <param name="arg1">要设置格式的第二个对象</param>
            <param name="arg2">要设置格式的第三个对象</param>
            <returns>format 的副本，其中的格式项已替换为 arg0、arg1 和 arg2 的字符串表示形式。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Format(System.String,System.Object[])">
            <summary>
            字符串中的格式项替换为指定数组中相应对象的字符串表示形式。
            </summary>
            <param name="format">复合格式字符串。</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <returns>format 的副本，其中的格式项已替换为 args 中相应对象的字符串表示形式。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToString(System.Char[])">
            <summary>
            字符组输出为字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            字符组输出为字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            由字节数组转换为字符串。
            </summary>
            <param name="value">需要转换为字符串的字节数组</param>
            <param name="encoding">编码集(缺省表示使用 UTF8 编码集)</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToString(System.Byte[],System.String)">
            <summary>
            将指定的字节数组的每个元素的数值转换为它的等效十六进制字符串表示形式。
            </summary>
            <param name="value">需要转换的字节数组</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToBase64(System.Byte[])">
            <summary>
            由字节数组转换为 Base64 编码的字符串。
            </summary>
            <param name="value">需要转换为字符串的字节数组</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToBase64(System.String)">
            <summary>
            字符串转换为 Base64 编码的字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转换为字节数组。
            </summary>
            <param name="value">需要转换的字符串。</param>
            <param name="encoding">编码集(缺省表示使用 UTF8 编码集)</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToBytes(System.String,System.String)">
            <summary>
            将字节的十六进制字符串表达式转换为字节数组。
            </summary>
            <param name="value">字节十六进制表达式</param>
            <param name="delimiter">表达式分隔符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.FromBase64(System.String)">
            <summary>
            Base64编码的字符串转换为字节数组。
            </summary>
            <param name="value">需要转换的Base64编码字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.PadLeft(System.Object,System.Int32,System.String)">
            <summary>
             返回一个新字符串，该字符串通过在此实例中的字符左侧填充指定的字符来达到指定的总长度，从而使这些字符右对齐。
            </summary>
            <param name="obj">需要填充的能转化为字符串的对象。</param>
            <param name="totalWidth">结果字符串中的字节数，等于原始字符数加上任何其他填充字符。</param>
            <param name="paddingChar">填充字符。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.PadRight(System.Object,System.Int32,System.String)">
            <summary>
            返回一个新字符串，该字符串通过在此字符串中的字符右侧填充指定的字符来达到指定的总长度，从而使这些字符左对齐。
            </summary>
            <param name="obj">需要填充的能转化为字符串的对象。</param>
            <param name="totalWidth">结果字符串中的字节数，等于原始字符数加上任何其他填充字符。</param>
            <param name="paddingChar">填充字符。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Spelling(System.String)">
            <summary>
            获取字符串的声母字符
            </summary>
            <param name="word">目标字符串</param>
            <returns>返回声母字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.PinyinHeader(System.Char)">
            <summary>
            转换当前字符
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.WbCode(System.String)">
            <summary>
            获取字符串的五笔助记码
            </summary>
            <param name="word">目标字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.IsDBC(System.Char)">
            <summary>
            判断字符是否为全角
            </summary>
            <param name="chr">需要判断的任意字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToDBC(System.String)">
            <summary>
            全角字符转半角字符(DBC case)
            </summary>
            <param name="value">需要转换的全角字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToSBC(System.String)">
            <summary>
            半角字符转全角字符(SBC case)
            </summary>
            <param name="value">需要转换的半角字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToRMBUpper(System.Decimal)">
            <summary>
            数字转换为人民币大写汉字
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToRMBUpper(System.Single)">
            <summary>
            数字转换为人民币大写汉字
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToRMBUpper(System.Double)">
            <summary>
            数字转换为人民币大写汉字
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.ToChineseWeek(System.DayOfWeek)">
            <summary>
            星期转换为中文表示法。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.StringExtension.PlaceHolder">
            <summary>
            带问号 ? 搜索时匹配的占位字符集(\r \n \t [空格])
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Count(System.String,System.String[])">
            <summary>
            从当前字符串中查找出现指定字符串 find 出现的次数(忽略大小写)。
            </summary>
            <param name="value">被查找的当前字符串</param>
            <param name="search">指定查找的字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.HasChineseChar(System.String)">
            <summary>
            判断字符串中是否包含中文字符
            </summary>
            <param name="value">操作的字符串</param>
            <returns>如果含有中文字符返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.Plus(System.String,System.Int32)">
            <summary>
            数值字符串表达式增加值(不更改字符串长度，注意增加值后的数值长度溢出问题)。
            </summary>
            <param name="express">数值字符串表达式</param>
            <param name="value">需要增加的值(减值为负)</param>
        </member>
        <member name="M:App.FunctionLibrary.StringExtension.RandomString(System.Int32,System.String)">
            <summary>
            产生随机字符串
            </summary>
            <param name="length">随机产生的字符串长度</param>
            <param name="availableChar">产生随机字符串范围的表达式，缺省表示使用字母和数字的组合。</param>
        </member>
        <member name="T:App.FunctionLibrary.ValueIndexer`2">
            <summary>
            值索引器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValueIndexer`2.#ctor(System.Func{`0,`1,`1},System.Action{`0,`1})">
            <summary>
            值索引器
            </summary>
            <param name="getter">获取属性的委托，参数顺序：名称、默认值、返回值</param>
            <param name="setter">设置属性的委托，参数顺序：名称，设置值</param>
        </member>
        <member name="M:App.FunctionLibrary.ValueIndexer`2.#ctor(System.Func{`0,`1},System.Action{`0,`1})">
            <summary>
            值索引器
            </summary>
            <param name="getter">获取属性的委托，参数顺序：名称、返回值</param>
            <param name="setter">设置属性的委托，参数顺序：名称，设置值</param>
        </member>
        <member name="P:App.FunctionLibrary.ValueIndexer`2.Item(`0)">
            <summary>
            获取或设置指定名称的值数据。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ValueIndexer`2.Item(`0,`1)">
            <summary>
            获取指定名称的值数据。
            </summary>
            <param name="name">获取数据值的名称</param>
            <param name="default">默认值</param>
        </member>
        <member name="P:App.FunctionLibrary.ValueIndexer`2.Item(`0,System.Object)">
            <summary>
            获取指定名称的值数据。
            </summary>
            <param name="name">获取数据值的名称</param>
            <param name="default">默认值</param>
        </member>
        <member name="T:App.FunctionLibrary.Json">
            <summary>
            Json对象
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Json.items">
            <summary>
            子节点列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Json.ValueType">
            <summary>
            值类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Json.SingleQuoteAsMark">
            <summary>
            单引号作为字符串关键字处理
            <para>true :表示等同于双引号</para>
            <para>false:表示普通字符</para>
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.#ctor">
            <summary>
            实例化 Json.
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.#ctor(System.String,System.Boolean)">
            <summary>
            实例化 Json.
            </summary>
            <param name="json">Json格式字符串表达式</param>
            <param name="singleQuoteAsMark">单引号作为字符串关键字处理(true:表示等同于双引号,false:表示普通字符)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Json.#ctor(System.Byte[],System.Text.Encoding,System.Boolean)">
            <summary>
            实例化 Json.
            </summary>
            <param name="buffer">Json格式字节流</param>
            <param name="encoding">编码字符集(默认:UTF-8)</param>
            <param name="singleQuoteAsMark">单引号作为字符串关键字处理(true:表示等同于双引号,false:表示普通字符)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Json.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            实例化 Json.
            </summary>
            <param name="reader">Json格式数据流</param>
            <param name="encoding">编码字符集(默认:UTF-8)</param>
            <param name="singleQuoteAsMark">单引号作为字符串关键字处理(true:表示等同于双引号,false:表示普通字符)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Json.#ctor(App.FunctionLibrary.Filer,System.Text.Encoding,System.Boolean)">
            <summary>
            实例化 Json.
            </summary>
            <param name="json">Json格式文件。</param>
            <param name="encoding">编码字符集(默认:UTF-8)</param>
            <param name="singleQuoteAsMark">单引号作为字符串关键字处理(true:表示等同于双引号,false:表示普通字符)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Json.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            实例化 Json.
            </summary>
            <param name="name">Json名称</param>
            <param name="value">Json值</param>
            <param name="singleQuoteAsMark">单引号作为字符串关键字处理(true:表示等同于双引号,false:表示普通字符)。</param>
        </member>
        <member name="P:App.FunctionLibrary.Json.Name">
            <summary>
            获取或设置Json名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Json.Value">
            <summary>
            获取或设置Json值
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Json.Empty">
            <summary>
            获取空的 Json。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Json.IsEmpty">
            <summary>
            Json是否为空对象。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Json.Count">
            <summary>
            子 Json 总数量。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Json.Item(System.String)">
            <summary>
            根据Json名称获取 Json.
            </summary>
            <param name="name">Json名称</param>
        </member>
        <member name="P:App.FunctionLibrary.Json.Item(System.Int32)">
            <summary>
            根据 Json索引值获取 Json.
            </summary>
            <param name="index">Json从0开始的索引值</param>
        </member>
        <member name="M:App.FunctionLibrary.Json.Add">
            <summary>
            在子Json列表中新增一个子Json。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.Add(App.FunctionLibrary.Json)">
            <summary>
            在子Json列表中新增指定的子Json。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.Add(System.String)">
            <summary>
            在子Json列表中新增指定名称的子Json。
            </summary>
            <param name="name">Json名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Json.Add(System.String,System.Object)">
            <summary>
            在子Json列表中新增指定名称和值的子Json。
            </summary>
            <param name="name">Json名称</param>
            <param name="value">Json值</param>
        </member>
        <member name="M:App.FunctionLibrary.Json.Remove(App.FunctionLibrary.Json[])">
            <summary>
            移除指定的Json。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.Remove(System.String[])">
            <summary>
            移除指定名称的Json。
            </summary>
            <param name="names">Json名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Json.Contains(App.FunctionLibrary.Json)">
            <summary>
            是否存在指定的子Json。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.Contains(System.String)">
            <summary>
            是否存在指定名称的子Json。
            </summary>
            <param name="name">Json名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Json.Clear">
            <summary>
            移除所以子Json。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.ToString">
            <summary>
            Json字符串表达。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.ToDouble">
            <summary>
            Json输出为双精度浮点数值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.ToInt64">
            <summary>
            Json输出为64位有符号的整数值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.ToInt32">
            <summary>
            Json输出为32位有符号的整数值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.ToDecimal">
            <summary>
            Json输出为十进制数值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.ToBoolean">
            <summary>
            Json值输出为布尔值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.ToDateTime">
            <summary>
            Json值输出为日期时间
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.createJson(System.Text.StringBuilder@)">
            <summary>
            递归生成Json表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.op_Implicit(App.FunctionLibrary.Json)~System.String">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Json.op_Implicit(App.FunctionLibrary.Json)~System.Double">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Json.op_Implicit(App.FunctionLibrary.Json)~System.Int64">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Json.op_Implicit(App.FunctionLibrary.Json)~System.Int32">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Json.op_Implicit(App.FunctionLibrary.Json)~System.Decimal">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Json.op_Implicit(App.FunctionLibrary.Json)~System.Boolean">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Json.op_Implicit(App.FunctionLibrary.Json)~System.DateTime">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Json.op_Equality(App.FunctionLibrary.Json,App.FunctionLibrary.Json)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Json.op_Inequality(App.FunctionLibrary.Json,App.FunctionLibrary.Json)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Json.Equals(System.Object)">
            <summary>
            相等比较
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.GetHashCode">
            <summary>
            哈希代码
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.parseValue(System.Char[],System.Int32@,System.Boolean)">
            <summary>
            解析Json值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.getCurrentToken(System.Char[],System.Int32@,System.Boolean)">
            <summary>
            当前Json标识
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.gotoNextToken(System.Char[],System.Int32@,System.Boolean)">
            <summary>
            前进到下一个标识位置，并且返回下一个标识
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Json.skipWhitespace(System.Char[],System.Int32@)">
            <summary>
            跳过空白字符(包括空格符、回车符、换行符、制表符)。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.PairDict">
            <summary>
            无序名值对儿字典。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.#ctor">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.#ctor(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair})">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.#ctor(App.FunctionLibrary.Pair[])">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairDict.Item(System.String)">
            <summary>
            获取或设置指定名称的对儿值。
            </summary>
            <param name="name">对儿名称。</param>
        </member>
        <member name="P:App.FunctionLibrary.PairDict.Item(System.String,System.String)">
            <summary>
            获取指定名称的对儿值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.Add(System.String,System.String)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.Add(System.String,System.Object)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.Add(App.FunctionLibrary.Pair)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.AddRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair})">
            <summary>
            将指定集合的元素添加到名值对儿列表的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.ToString">
            <summary>
            名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.ToString(System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.ToString(System.String,System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
            <param name="splitCharacter">名值对儿之间的拆分符</param>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.Remove(System.String)">
            <summary>
            在对儿列表中移除指定名值对儿名称的对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.Remove(App.FunctionLibrary.Pair)">
            <summary>
            在对儿列表中移除指定的对儿。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairDict.Count">
            <summary>
            名值对儿列表中实际包含的元素数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.Clear">
            <summary>
            名值对儿列表中移除所有元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.Contains(System.String)">
            <summary>
            名值对儿列表中是否包含对儿名称。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.ToArray">
            <summary>
            将名值对儿列表的元素复制到新数组中。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.Pair[])~App.FunctionLibrary.PairDict">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(System.Collections.Generic.List{App.FunctionLibrary.Pair})~App.FunctionLibrary.PairDict">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict)~App.FunctionLibrary.Pair[]">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict)~System.Collections.Generic.List{App.FunctionLibrary.Pair}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(System.Collections.Generic.Dictionary{System.String,System.String})~App.FunctionLibrary.PairDict">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict)~System.Collections.Generic.Dictionary{System.String,System.String}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict)~App.FunctionLibrary.PairList">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairList)~App.FunctionLibrary.PairDict">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict{System.String,System.String})~App.FunctionLibrary.PairDict">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairList{System.String,System.String})~App.FunctionLibrary.PairDict">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict)~App.FunctionLibrary.PairDict{System.String,System.String}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict)~App.FunctionLibrary.PairList{System.String,System.String}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict{System.String})~App.FunctionLibrary.PairDict">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairList{System.String})~App.FunctionLibrary.PairDict">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict)~App.FunctionLibrary.PairDict{System.String}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict.op_Implicit(App.FunctionLibrary.PairDict)~App.FunctionLibrary.PairList{System.String}">
            <summary />
        </member>
        <member name="T:App.FunctionLibrary.PairDict`1">
            <summary>
            无序名值对儿字典。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.#ctor">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.#ctor(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair{`0}})">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.#ctor(App.FunctionLibrary.Pair{`0}[])">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairDict`1.Item(System.String)">
            <summary>
            获取或设置指定名称的对儿值。
            </summary>
            <param name="name">对儿名称。</param>
        </member>
        <member name="P:App.FunctionLibrary.PairDict`1.Item(System.String,`0)">
            <summary>
            获取指定名称的对儿值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.Add(System.String,`0)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.Add(System.String,System.Object)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.Add(App.FunctionLibrary.Pair{`0})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.AddRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair{`0}})">
            <summary>
            将指定集合的元素添加到名值对儿列表的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.ToString">
            <summary>
            名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.ToString(System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.ToString(System.String,System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
            <param name="splitCharacter">名值对儿之间的拆分符</param>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.Remove(System.String)">
            <summary>
            在对儿列表中移除指定名值对儿名称的对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.Remove(App.FunctionLibrary.Pair{`0})">
            <summary>
            在对儿列表中移除指定的对儿。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairDict`1.Count">
            <summary>
            名值对儿列表中实际包含的元素数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.Clear">
            <summary>
            名值对儿列表中移除所有元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.Contains(System.String)">
            <summary>
            名值对儿列表中是否包含对儿名称。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.ToArray">
            <summary>
            将名值对儿列表的元素复制到新数组中。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.Pair{`0}[])~App.FunctionLibrary.PairDict{`0}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(System.Collections.Generic.List{App.FunctionLibrary.Pair{`0}})~App.FunctionLibrary.PairDict{`0}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.PairDict{`0})~App.FunctionLibrary.Pair{`0}[]">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.PairDict{`0})~System.Collections.Generic.List{App.FunctionLibrary.Pair{`0}}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(System.Collections.Generic.Dictionary{System.String,`0})~App.FunctionLibrary.PairDict{`0}">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.PairDict{`0})~System.Collections.Generic.Dictionary{System.String,`0}">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.PairDict{`0})~System.Collections.Generic.List{`0}">
            <summary>
            名值对儿字典转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.PairList{`0})~App.FunctionLibrary.PairDict{`0}">
            <summary>
            名值对儿列表转换为名值对儿字典。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.PairDict{`0})~App.FunctionLibrary.PairDict{System.String,`0}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.PairDict{`0})~App.FunctionLibrary.PairList{System.String,`0}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.PairDict{System.String,`0})~App.FunctionLibrary.PairDict{`0}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairDict`1.op_Implicit(App.FunctionLibrary.PairList{System.String,`0})~App.FunctionLibrary.PairDict{`0}">
            <summary />
        </member>
        <member name="T:App.FunctionLibrary.PairDict`2">
            <summary>
            无序名值对儿字典。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.#ctor">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.#ctor(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair{`0,`1}})">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.#ctor(App.FunctionLibrary.Pair{`0,`1}[])">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairDict`2.Item(`0)">
            <summary>
            获取或设置指定名称的对儿值。
            </summary>
            <param name="name">对儿名称。</param>
        </member>
        <member name="P:App.FunctionLibrary.PairDict`2.Item(`0,`1)">
            <summary>
            获取指定名称的对儿值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.Add(`0,`1)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.Add(`0,System.Object)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.Add(App.FunctionLibrary.Pair{`0,`1})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.AddRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair{`0,`1}})">
            <summary>
            将指定集合的元素添加到名值对儿列表的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.ToString">
            <summary>
            名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.ToString(System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.ToString(System.String,System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
            <param name="splitCharacter">名值对儿之间的拆分符</param>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.Remove(`0)">
            <summary>
            在对儿列表中移除指定名值对儿名称的对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.Remove(App.FunctionLibrary.Pair{`0,`1})">
            <summary>
            在对儿列表中移除指定的对儿。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairDict`2.Count">
            <summary>
            名值对儿列表中实际包含的元素数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.Clear">
            <summary>
            名值对儿列表中移除所有元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.Contains(`0)">
            <summary>
            名值对儿列表中是否包含对儿名称。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.ToArray">
            <summary>
            将名值对儿列表的元素复制到新数组中。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.op_Implicit(App.FunctionLibrary.Pair{`0,`1}[])~App.FunctionLibrary.PairDict{`0,`1}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.op_Implicit(System.Collections.Generic.List{App.FunctionLibrary.Pair{`0,`1}})~App.FunctionLibrary.PairDict{`0,`1}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.op_Implicit(App.FunctionLibrary.PairDict{`0,`1})~App.FunctionLibrary.Pair{`0,`1}[]">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.op_Implicit(App.FunctionLibrary.PairDict{`0,`1})~System.Collections.Generic.List{App.FunctionLibrary.Pair{`0,`1}}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.op_Implicit(System.Collections.Generic.Dictionary{`0,`1})~App.FunctionLibrary.PairDict{`0,`1}">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.op_Implicit(App.FunctionLibrary.PairDict{`0,`1})~System.Collections.Generic.Dictionary{`0,`1}">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.op_Implicit(App.FunctionLibrary.PairDict{`0,`1})~App.FunctionLibrary.PairList{`0,`1}">
            <summary>
            名值对儿字典转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairDict`2.op_Implicit(App.FunctionLibrary.PairList{`0,`1})~App.FunctionLibrary.PairDict{`0,`1}">
            <summary>
            名值对儿列表转换为名值对儿字典。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.PairList">
            <summary>
            有序名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.#ctor">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.#ctor(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair})">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.#ctor(App.FunctionLibrary.Pair[])">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList.Item(System.String)">
            <summary>
            获取或设置指定名称的对儿值。
            </summary>
            <param name="name">对儿名称。</param>
        </member>
        <member name="P:App.FunctionLibrary.PairList.Item(System.String,System.String)">
            <summary>
            获取指定名称的对儿值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的对儿。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList.Item(System.Int32,System.String)">
            <summary>
            获取指定索引处的对儿值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.Add(System.String,System.Object)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.Add(App.FunctionLibrary.Pair)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.IndexOf(System.String)">
            <summary>
            指明的名字对儿在对儿列表中的索引位置，未找到的返回 -1。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.IndexOf(App.FunctionLibrary.Pair)">
            <summary>
            指明的名字对儿在对儿列表中的索引位置，未找到的返回 -1。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.ToString">
            <summary>
            名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.ToString(System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList.ToString(System.String,System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
            <param name="splitCharacter">名值对儿之间的拆分符</param>
        </member>
        <member name="P:App.FunctionLibrary.PairList.Count">
            <summary>
            名值对儿列表中实际包含的元素数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.Clear">
            <summary>
            名值对儿列表中移除所有元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.GetPair(System.Int32)">
            <summary>
            获取或设置指定索引处的对儿值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.Insert(System.Int32,System.String,System.Object)">
            <summary>
            在对儿列表中的指定索引位置插入新的名值对儿。
            </summary>
            <param name="index"> 从零开始的索引，应在该位置插入名值对儿。</param>
            <param name="name">对儿名称</param>
            <param name="value">对儿值</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList.AddRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair})">
            <summary>
            将指定集合的元素添加到名值对儿列表的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.ToArray">
            <summary>
            将名值对儿列表的元素复制到新数组中。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.Contains(System.String)">
            <summary>
            名值对儿列表中是否包含对儿名称。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.Remove(System.String)">
            <summary>
            在对儿列表中移除指定名值对儿名称的对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.Remove(App.FunctionLibrary.Pair)">
            <summary>
            在对儿列表中移除指定的对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.CopyTo(App.FunctionLibrary.Pair[],System.Int32)">
            <summary>
            将整个对儿值列表复制到一维对儿值数组中。
            </summary>
            <param name="array">目标对儿值数组</param>
            <param name="arrayIndex">目标对儿值数组的复制位置索引(从零开始)</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList.CopyTo(System.Int32,App.FunctionLibrary.Pair[],System.Int32,System.Int32)">
            <summary>
            从对儿值列表中复制一定数量的对儿值到一维对儿值数组中。
            </summary>
            <param name="index">从源对儿值列表中复制对儿值的开始索引(从零开始)</param>
            <param name="array">目标对儿值数组</param>
            <param name="arrayIndex">目标对儿值数组的复制位置索引(从零开始)</param>
            <param name="count">复制的对儿值数</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList.CopyTo(App.FunctionLibrary.Pair[])">
            <summary>
            从头开始，将整个对儿值列表复制到一维对儿值数组中。
            </summary>
            <param name="array">目标对儿值数组</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.Pair[])~App.FunctionLibrary.PairList">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(System.Collections.Generic.List{App.FunctionLibrary.Pair})~App.FunctionLibrary.PairList">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairList)~App.FunctionLibrary.Pair[]">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairList)~System.Collections.Generic.List{App.FunctionLibrary.Pair}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(System.Collections.Generic.Dictionary{System.String,System.String})~App.FunctionLibrary.PairList">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairList)~System.Collections.Generic.Dictionary{System.String,System.String}">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairDict{System.String,System.String})~App.FunctionLibrary.PairList">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairList{System.String,System.String})~App.FunctionLibrary.PairList">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairList)~App.FunctionLibrary.PairDict{System.String,System.String}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairList)~App.FunctionLibrary.PairList{System.String,System.String}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairDict{System.String})~App.FunctionLibrary.PairList">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairList{System.String})~App.FunctionLibrary.PairList">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairList)~App.FunctionLibrary.PairDict{System.String}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList.op_Implicit(App.FunctionLibrary.PairList)~App.FunctionLibrary.PairList{System.String}">
            <summary />
        </member>
        <member name="T:App.FunctionLibrary.PairList`1">
            <summary>
            有序名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.#ctor">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.#ctor(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair{`0}})">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.#ctor(App.FunctionLibrary.Pair{`0}[])">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList`1.Item(System.String)">
            <summary>
            获取或设置指定名称的对儿值。
            </summary>
            <param name="name">对儿名称。</param>
        </member>
        <member name="P:App.FunctionLibrary.PairList`1.Item(System.String,`0)">
            <summary>
            获取指定名称的对儿值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的对儿。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList`1.Item(System.Int32,`0)">
            <summary>
            获取指定索引处的对儿值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Add(System.String,`0)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Add(System.String,System.Object)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Add(App.FunctionLibrary.Pair{`0})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.ToString">
            <summary>
            名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.ToString(System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.ToString(System.String,System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
            <param name="splitCharacter">名值对儿之间的拆分符</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Insert(System.Int32,System.String,`0)">
            <summary>
            在对儿列表中的指定索引位置插入新的名值对儿。
            </summary>
            <param name="index"> 从零开始的索引，应在该位置插入名值对儿。</param>
            <param name="name">对儿名称</param>
            <param name="value">对儿值</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Insert(System.Int32,System.String,System.Object)">
            <summary>
            在对儿列表中的指定索引位置插入新的名值对儿。
            </summary>
            <param name="index"> 从零开始的索引，应在该位置插入名值对儿。</param>
            <param name="name">对儿名称</param>
            <param name="value">对儿值</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Remove(System.String)">
            <summary>
            在对儿列表中移除指定名值对儿名称的对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Remove(App.FunctionLibrary.Pair{`0})">
            <summary>
            在对儿列表中移除指定的对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.IndexOf(System.String)">
            <summary>
            指明的名字对儿在对儿列表中的索引位置，未找到的返回 -1。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.IndexOf(App.FunctionLibrary.Pair{`0})">
            <summary>
            指明的名字对儿在对儿列表中的索引位置，未找到的返回 -1。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.CopyTo(App.FunctionLibrary.Pair{`0}[],System.Int32)">
            <summary>
            将整个对儿值列表复制到一维对儿值数组中。
            </summary>
            <param name="array">目标对儿值数组</param>
            <param name="arrayIndex">目标对儿值数组的复制位置索引(从零开始)</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.CopyTo(System.Int32,App.FunctionLibrary.Pair{`0}[],System.Int32,System.Int32)">
            <summary>
            从对儿值列表中复制一定数量的对儿值到一维对儿值数组中。
            </summary>
            <param name="index">从源对儿值列表中复制对儿值的开始索引(从零开始)</param>
            <param name="array">目标对儿值数组</param>
            <param name="arrayIndex">目标对儿值数组的复制位置索引(从零开始)</param>
            <param name="count">复制的对儿值数</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.CopyTo(App.FunctionLibrary.Pair{`0}[])">
            <summary>
            从头开始，将整个对儿值列表复制到一维对儿值数组中。
            </summary>
            <param name="array">目标对儿值数组</param>
        </member>
        <member name="P:App.FunctionLibrary.PairList`1.Count">
            <summary>
            名值对儿列表中实际包含的元素数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Clear">
            <summary>
            名值对儿列表中移除所有元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.Contains(System.String)">
            <summary>
            名值对儿列表中是否包含对儿名称。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.AddRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair{`0}})">
            <summary>
            将指定集合的元素添加到名值对儿列表的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.ToArray">
            <summary>
            将名值对儿列表的元素复制到新数组中。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.GetPair(System.Int32)">
            <summary>
            获取或设置指定索引处的对儿值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(App.FunctionLibrary.Pair{`0}[])~App.FunctionLibrary.PairList{`0}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(System.Collections.Generic.List{App.FunctionLibrary.Pair{`0}})~App.FunctionLibrary.PairList{`0}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(App.FunctionLibrary.PairList{`0})~App.FunctionLibrary.Pair{`0}[]">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(App.FunctionLibrary.PairList{`0})~System.Collections.Generic.List{App.FunctionLibrary.Pair{`0}}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(System.Collections.Generic.Dictionary{System.String,`0})~App.FunctionLibrary.PairList{`0}">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(App.FunctionLibrary.PairList{`0})~System.Collections.Generic.Dictionary{System.String,`0}">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(App.FunctionLibrary.PairList{`0})~App.FunctionLibrary.PairDict{System.String,`0}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(App.FunctionLibrary.PairList{`0})~App.FunctionLibrary.PairList{System.String,`0}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(App.FunctionLibrary.PairDict{System.String,`0})~App.FunctionLibrary.PairList{`0}">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.PairList`1.op_Implicit(App.FunctionLibrary.PairList{System.String,`0})~App.FunctionLibrary.PairList{`0}">
            <summary />
        </member>
        <member name="T:App.FunctionLibrary.PairList`2">
            <summary>
            有序名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.#ctor">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.#ctor(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair{`0,`1}})">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.#ctor(App.FunctionLibrary.Pair{`0,`1}[])">
            <summary>
            初始化名值对儿列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList`2.Item(`0)">
            <summary>
            获取或设置指定名称的对儿值。
            </summary>
            <param name="name">对儿名称。</param>
        </member>
        <member name="P:App.FunctionLibrary.PairList`2.Item(`0,`1)">
            <summary>
            获取指定名称的对儿值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList`2.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的对儿。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList`2.Item(System.Int32,`1)">
            <summary>
            获取指定索引处的对儿值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Add(`0,`1)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Add(`0,System.Object)">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Add(App.FunctionLibrary.Pair{`0,`1})">
            <summary>
            在名值对儿列表的末尾追加新的名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.AddRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair{`0,`1}})">
            <summary>
            将指定集合的元素添加到名值对儿列表的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.ToString">
            <summary>
            名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.ToString(System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.ToString(System.String,System.String)">
             <summary>
             名值对儿列表的元素输出为字符串表达式(默认分隔符为 =)。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
            <param name="splitCharacter">名值对儿之间的拆分符</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.IndexOf(`0)">
            <summary>
            指明的名字对儿在对儿列表中的索引位置，未找到的返回 -1。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.IndexOf(App.FunctionLibrary.Pair{`0,`1})">
            <summary>
            指明的名字对儿在对儿列表中的索引位置，未找到的返回 -1。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Insert(System.Int32,`0,`1)">
            <summary>
            在对儿列表中的指定索引位置插入新的名值对儿。
            </summary>
            <param name="index"> 从零开始的索引，应在该位置插入名值对儿。</param>
            <param name="name">对儿名称</param>
            <param name="value">对儿值</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Insert(System.Int32,`0,System.Object)">
            <summary>
            在对儿列表中的指定索引位置插入新的名值对儿。
            </summary>
            <param name="index"> 从零开始的索引，应在该位置插入名值对儿。</param>
            <param name="name">对儿名称</param>
            <param name="value">对儿值</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Remove(`0)">
            <summary>
            在对儿列表中移除指定名值对儿名称的对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Remove(App.FunctionLibrary.Pair{`0,`1})">
            <summary>
            在对儿列表中移除指定的对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.CopyTo(App.FunctionLibrary.Pair{`0,`1}[],System.Int32)">
            <summary>
            将整个对儿值列表复制到一维对儿值数组中。
            </summary>
            <param name="array">目标对儿值数组</param>
            <param name="arrayIndex">目标对儿值数组的复制位置索引(从零开始)</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.CopyTo(System.Int32,App.FunctionLibrary.Pair{`0,`1}[],System.Int32,System.Int32)">
            <summary>
            从对儿值列表中复制一定数量的对儿值到一维对儿值数组中。
            </summary>
            <param name="index">从源对儿值列表中复制对儿值的开始索引(从零开始)</param>
            <param name="array">目标对儿值数组</param>
            <param name="arrayIndex">目标对儿值数组的复制位置索引(从零开始)</param>
            <param name="count">复制的对儿值数</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.CopyTo(App.FunctionLibrary.Pair{`0,`1}[])">
            <summary>
            从头开始，将整个对儿值列表复制到一维对儿值数组中。
            </summary>
            <param name="array">目标对儿值数组</param>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.GetPair(System.Int32)">
            <summary>
            获取或设置指定索引处的对儿值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Contains(`0)">
            <summary>
            名值对儿列表中是否包含对儿名称。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.ToArray">
            <summary>
            将名值对儿列表的元素复制到新数组中。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PairList`2.Count">
            <summary>
            名值对儿列表中实际包含的元素数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.Clear">
            <summary>
            名值对儿列表中移除所有元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.op_Implicit(App.FunctionLibrary.Pair{`0,`1}[])~App.FunctionLibrary.PairList{`0,`1}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.op_Implicit(System.Collections.Generic.List{App.FunctionLibrary.Pair{`0,`1}})~App.FunctionLibrary.PairList{`0,`1}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.op_Implicit(App.FunctionLibrary.PairList{`0,`1})~App.FunctionLibrary.Pair{`0,`1}[]">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.op_Implicit(App.FunctionLibrary.PairList{`0,`1})~System.Collections.Generic.List{App.FunctionLibrary.Pair{`0,`1}}">
            <summary>
            名值对儿数组隐形转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.op_Implicit(System.Collections.Generic.Dictionary{`0,`1})~App.FunctionLibrary.PairList{`0,`1}">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PairList`2.op_Implicit(App.FunctionLibrary.PairList{`0,`1})~System.Collections.Generic.Dictionary{`0,`1}">
            <summary>
            键值集合转换为名值对儿列表。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SerializableDataTable">
            <summary>
            可序列化的数据表(对数据表进行重新封装)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableDataTable.#ctor">
            <summary>
            初始化 SerializableDataTable 新实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableDataTable.#ctor(System.Data.DataTable)">
            <summary>
            初始化 SerializableDataTable 新实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableDataTable.App#FunctionLibrary#ISerializable#Serializeing(System.Func{System.String,System.String})">
            <summary>
            当前异常对象序列化为序列化元素
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableDataTable.App#FunctionLibrary#ISerializable#Deserializing(App.FunctionLibrary.SerializationElement,System.Func{System.String,System.String})">
            <summary>
            序列化元素反序列化为当前异常对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableDataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 SerializableException 类的新实例。
            </summary>
            <param name="info">它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.SerializableDataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用于异常序列化的信息设置
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.XmlElement">
            <summary>
            Xml元素
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ValuePair">
            <summary>
            值范围对儿
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ValuePair.Minimum">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ValuePair.Maximum">
            <summary>
            最大值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.#ctor(System.Decimal,System.Decimal)">
            <summary>
            值范围对儿
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ValuePair.Empty">
            <summary>
            获取一个空的值范围对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.Parse(System.String,System.String)">
            <summary>
            值范围对儿字符串表达式解析为值范围对象。
            </summary>
            <param name="express">字符串表达式</param>
            <param name="delimiter">定界符</param>
        </member>
        <member name="P:App.FunctionLibrary.ValuePair.IsEmpty">
            <summary>
            判断当前值范围对儿是否为空(最大值与最小值同时等于0)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.Contains(System.Decimal)">
            <summary>
            值范围对儿是否包含指定的值(空范围对儿返回 false)。
            </summary>
            <param name="value">判断的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.ToString">
            <summary>
            值范围对儿的字符串表达式(以半角连字符 - 作为定界符)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.ToString(System.String)">
            <summary>
            值范围对儿的字符串表达式(空的值范围对儿为空字符串)。
            </summary>
            <param name="delimiter">定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Equality(App.FunctionLibrary.ValuePair,App.FunctionLibrary.ValuePair)">
            <summary>
            判断两个值范围对儿是否相等
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Inequality(App.FunctionLibrary.ValuePair,App.FunctionLibrary.ValuePair)">
            <summary>
            判断两个值范围对儿是否不相等
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Multiply(App.FunctionLibrary.ValuePair,System.Decimal)">
            <summary>
            对儿值分别乘于指定的数值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Multiply(App.FunctionLibrary.ValuePair,App.FunctionLibrary.ValuePair)">
            <summary>
            对儿值分别相乘。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Division(App.FunctionLibrary.ValuePair,System.Decimal)">
            <summary>
            对儿值分别除于指定的数值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Division(App.FunctionLibrary.ValuePair,App.FunctionLibrary.ValuePair)">
            <summary>
            对儿值分别相除。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Addition(App.FunctionLibrary.ValuePair,System.Decimal)">
            <summary>
            对儿值分别加上指定的数值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Addition(App.FunctionLibrary.ValuePair,App.FunctionLibrary.ValuePair)">
            <summary>
            对儿值分别相加
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Subtraction(App.FunctionLibrary.ValuePair,System.Decimal)">
            <summary>
            对儿值分别减去指定的数值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Subtraction(App.FunctionLibrary.ValuePair,App.FunctionLibrary.ValuePair)">
            <summary>
            对儿值分别相减。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.Equals(System.Object)">
            <summary>
            判断两个值范围对儿是否不相等
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.GetHashCode">
            <summary>
            获取值范围对儿的哈希代码
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Implicit(App.FunctionLibrary.ValuePair)~System.String">
            <summary>
            值范围对儿隐形转换为字符串表达式(连字符 - 作为值范围定界符)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Implicit(System.String)~App.FunctionLibrary.ValuePair">
            <summary>
            字符串表达式隐形转换为值范围对儿(连字符 - 作为值范围定界符)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Implicit(App.FunctionLibrary.ValuePair)~App.FunctionLibrary.Pair{System.Decimal,System.Decimal}">
            <summary>
            隐形转换为名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ValuePair.op_Implicit(App.FunctionLibrary.Pair{System.Decimal,System.Decimal})~App.FunctionLibrary.ValuePair">
            <summary>
            隐形转换为对儿值。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Consoles.OutPauser">
            <summary>
            控制台标准输出流暂停器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.#ctor">
            <summary>
            初始化控制台标准输出流暂停器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Dispose">
            <summary>
            销毁控制台标准输出流暂停器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Flush">
            <summary>
            清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Consoles.OutPauser.NewLine">
            <summary>
            获取或设置行结束符字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.String)">
            <summary>
            将字符串写入文本流
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Double)">
            <summary>
            将 8 字节浮点值的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Object)">
            <summary>
            通过在对象上调用 ToString 将此对象的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Decimal)">
            <summary>
            将十进制值的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Single)">
            <summary>
            将 4 字节浮点值的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Boolean)">
            <summary>
            将 Boolean 值的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Int32)">
            <summary>
            将 4 字节有符号整数的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.UInt32)">
            <summary>
            将 4 字节无符号整数的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.UInt64)">
            <summary>
            将 8 字节无符号整数的文本表示形式写入文本流。
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Int64)">
            <summary>
            将 8 字节有符号整数的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Char[])">
            <summary>
            将字符数组写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Char)">
            <summary>
            将字符写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.String,System.Object[])">
            <summary>
            使用与 Format 相同的语义写出格式化的字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.String,System.Object)">
            <summary>
            使用与 Format 相同的语义写出格式化的字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.String,System.Object,System.Object)">
            <summary>
            使用与 Format 相同的语义写出格式化的字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            使用与 Format 相同的语义写出格式化的字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            将字符的子数组写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine">
            <summary>
            委托写入输出行
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.String)">
            <summary>
            将后面带有行结束符的字符串写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Double)">
            <summary>
            将后面带有行结束符的 8 字节浮点值的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Decimal)">
            <summary>
            将后面带有行结束符的十进制值的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Object)">
            <summary>
            通过在对象上调用 ToString 将后跟行结束符的此对象的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Single)">
            <summary>
            将后跟行结束符的 4 字节浮点值的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Boolean)">
            <summary>
            将后跟行结束符的 Boolean 的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.UInt32)">
            <summary>
            将后跟行结束符的 4 字节无符号整数的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Int64)">
            <summary>
            将后跟行结束符的 8 字节有符号整数的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.UInt64)">
            <summary>
            将后跟行结束符的 8 字节无符号整数的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Int32)">
            <summary>
            将后跟行结束符的 4 字节有符号整数的文本表示形式写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Char[])">
            <summary>
            将后跟行结束符的字符数组写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Char)">
            <summary>
            将后跟行结束符的字符写入文本流。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.String,System.Object[])">
            <summary>
            使用与 Format 相同的语义写出格式化的字符串和一个新行。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.String,System.Object)">
            <summary>
            使用与 Format 相同的语义写出格式化的字符串和一个新行。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            使用与 Format 相同的语义写出格式化的字符串和一个新行。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.OutPauser.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            将后跟行结束符的字符子数组写入文本流。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Consoles.EditMode">
            <summary>
            控制台编辑模式管理
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Consoles.EditMode.Value">
            <summary>
            获取或设置控制台的编辑模式(鼠标右键粘贴功能)
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Consoles.BusyWaitting">
            <summary>
            控制台进度旋转器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.BusyWaitting.#ctor(System.String,System.Object[])">
            <summary>
            初始化控制台进度旋转器,并且开始旋转。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.BusyWaitting.Dispose">
            <summary>
            销毁控制台进度旋转器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.BusyWaitting.Write(System.String,System.Object[])">
            <summary>
            进度旋转器停止旋转,在旋转器位置写入数据。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.BusyWaitting.WriteLine">
            <summary>
            进度旋转器停止旋转,在旋转器位置写入行数据。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Consoles.BusyWaitting.WriteLine(System.String,System.Object[])">
            <summary>
            进度旋转器停止旋转,在旋转器位置写入行数据。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.NiceAttribute">
            <summary>
            昵称属性标签
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.NiceAttribute.#ctor(System.String)">
            <summary>
            实例化昵称属性标签
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.NiceAttribute.NiceName">
            <summary>
            昵称属性标签
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.AsyncQueue`1">
            <summary>
            异步的先进先出队列
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.#ctor(System.Action{`0})">
            <summary>
            初始化异步先进先出队列
            </summary>
            <param name="callback">异步回调函数</param>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.#ctor(System.Int32,System.Action{`0[]})">
            <summary>
            初始化异步先进先出队列
            </summary>
            <param name="count">批次取出的元素数</param>
            <param name="callback">异步回调函数</param>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.Finalize">
            <summary />
        </member>
        <member name="P:App.FunctionLibrary.AsyncQueue`1.IsDisposed">
            <summary>
            是否已销毁
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.Dispose">
            <summary>
            销毁异步队列使用的资源
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AsyncQueue`1.ID">
            <summary>
            异步队列 ID 。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AsyncQueue`1.Count">
            <summary>
            获取异步队列中包含的元素数。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AsyncQueue`1.Delay">
            <summary>
            异步执行时延迟的时长(毫秒)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.Push(`0[])">
            <summary>
            将元素添加到异步队列中。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.Popup">
            <summary>
            移除并返回位于异步队列开始处的元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.Clear">
            <summary>
            从异步队列中移除所有元素。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.Contains(`0)">
            <summary>
            确定元素是否在异步队列中存在。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.ToArray">
            <summary>
            将异步队列中的所有元素复制到数组中。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.AsyncQueue`1.WaitCompleted(System.Int32)">
            <summary>
            等待队列任务完成
            </summary>
            <param name="timeoutMilliseconds">等待超时毫秒数(缺省表示持续等待，直到队列任务全部完成为止)。</param>
        </member>
        <member name="T:App.FunctionLibrary.Disposer">
            <summary>
            销毁处理器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Disposer.#ctor(System.Action,System.Action)">
            <summary>
            销毁处理器
            </summary>
            <param name="initial">初始函数</param>
            <param name="final">终结函数</param>
        </member>
        <member name="M:App.FunctionLibrary.Disposer.Dispose">
            <summary>
            销毁销毁处理器，同时调用终结函数。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DynamicCompiler">
            <summary>
            动态代码编译器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.#ctor(App.FunctionLibrary.CompileType)">
            <summary>
            实例化动态编译器
            </summary>
            <param name="codeType">代码类型</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.#ctor(App.FunctionLibrary.CompileType,System.String)">
            <summary>
            实例化动态编译器
            </summary>
            <param name="codeType">代码类型</param>
            <param name="coding">动态编译的代码段(具有完整类的代码)</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.#ctor(App.FunctionLibrary.CompileType,System.String,App.FunctionLibrary.DynamicDomain)">
            <summary>
            实例化动态编译器
            </summary>
            <param name="codeType">代码类型</param>
            <param name="domain">在动态程序域中编译</param>
            <param name="coding">动态编译的代码段(具有完整类的代码)</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicCompiler.IsDisposed">
            <summary>
            动态函数编译器是否已销毁。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.Dispose">
            <summary>
            卸载并销毁动态生成的程序集。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicCompiler.CodeType">
            <summary>
            需要动态编译的代码类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicCompiler.Coding">
            <summary>
            需要被动态编译的代码(具有完整类的代码)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicCompiler.References">
            <summary>
            编译器引用的程序集(默认已经包括:mscorlib.dll、System.dll)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicCompiler.Namespaces">
            <summary>
            动态编译代码脚本导入的命名空间(默认已经导入:System)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicCompiler.IsCreated">
            <summary>
            是否已经创建代码段实例。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicCompiler.Createable">
            <summary>
            动态编译是否可创建代码段实例
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.AddNamespace(System.String[])">
            <summary>
            追加动态编译代码脚本导入的命名空间(默认已经导入:System)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.AddReference(System.String[])">
            <summary>
            追加编译器引用的程序集(默认已经包括:mscorlib.dll、System.dll)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.Invoke(System.String,System.String,System.Object[])">
            <summary>
            委托调用动态编译方法
            </summary>
            <param name="typeName">调用动态编译的类名称</param>
            <param name="methodName">调用动态编译的方法名</param>
            <param name="params">调用动态方法传入的参数组</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.Invoke``1(System.String,System.String,System.Object[])">
            <summary>
            委托调用动态编译函数并且返回调用结果。
            </summary>
            <typeparam name="T">函数结果泛型类型</typeparam>
            <param name="typeName">调用动态编译的类名称</param>
            <param name="methodName">调用动态编译的方法名</param>
            <param name="params">调用动态方法传入的参数组</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicCompiler.CompilerHandler.Invoke(System.String,System.String,System.Object[])">
            <summary>
            委托调用动态编译函数
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DynamicDomain">
            <summary>
            动态程序域(在动态域中加载程序集，不受当前程序域的限制)。
            </summary>
            <remarks>委托处理程序必须为静态函数，否则委托仍旧运行于当前应用程序域中。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.#ctor">
            <summary>
            动态程序域
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.#ctor(System.String)">
            <summary>
            动态程序域
            </summary>
            <param name="workdir">域程序集的工作目录</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicDomain.IsDisposed">
            <summary>
            动态域是否已销毁。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DynamicDomain.WorkDir">
            <summary>
            动态程序域的工作目录。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Dispose">
            <summary>
            卸载并销毁动态程序域及域中已加载的所有程序集。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke(System.Action)">
            <summary>
            在动态程序域中委托处理。
            </summary>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``1(``0,System.Action{``0})">
            <summary>
            在动态程序域中委托处理。
            </summary>
            <typeparam name="In">参数值的泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``2(``0,``1,System.Action{``0,``1})">
            <summary>
            在动态程序域中委托处理。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``3(``0,``1,``2,System.Action{``0,``1,``2})">
            <summary>
            在动态程序域中委托处理。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``4(``0,``1,``2,``3,System.Action{``0,``1,``2,``3})">
            <summary>
            在动态程序域中委托处理。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``5(``0,``1,``2,``3,``4,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            在动态程序域中委托处理。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <typeparam name="In5">参数值五的泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
            <param name="value5">参数值五</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``6(``0,``1,``2,``3,``4,``5,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <typeparam name="In5">参数值五的泛型类型</typeparam>
            <typeparam name="In6">参数值六的泛型类型</typeparam>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
            <param name="value5">参数值五</param>
            <param name="value6">参数值六</param>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``7(``0,``1,``2,``3,``4,``5,``6,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <typeparam name="In5">参数值五的泛型类型</typeparam>
            <typeparam name="In6">参数值六的泛型类型</typeparam>
            <typeparam name="In7">参数值七的泛型类型</typeparam>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
            <param name="value5">参数值五</param>
            <param name="value6">参数值六</param>
            <param name="value7">参数值七</param>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``8(``0,``1,``2,``3,``4,``5,``6,``7,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <typeparam name="In5">参数值五的泛型类型</typeparam>
            <typeparam name="In6">参数值六的泛型类型</typeparam>
            <typeparam name="In7">参数值七的泛型类型</typeparam>
            <typeparam name="In8">参数值八的泛型类型</typeparam>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
            <param name="value5">参数值五</param>
            <param name="value6">参数值六</param>
            <param name="value7">参数值七</param>
            <param name="value8">参数值八</param>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke(System.Object[],System.Action{System.Object[]})">
            <summary>
            在动态程序域中委托处理。
            </summary>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="values">输入参数值组</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``1(System.Func{``0})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``2(``0,System.Func{``0,``1})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In">参数值的泛型类型</typeparam>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``3(``0,``1,System.Func{``0,``1,``2})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``4(``0,``1,``2,System.Func{``0,``1,``2,``3})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``5(``0,``1,``2,``3,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``6(``0,``1,``2,``3,``4,System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <typeparam name="In5">参数值五的泛型类型</typeparam>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
            <param name="value5">参数值五</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``7(``0,``1,``2,``3,``4,``5,System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <typeparam name="In5">参数值五的泛型类型</typeparam>
            <typeparam name="In6">参数值六的泛型类型</typeparam>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
            <param name="value5">参数值五</param>
            <param name="value6">参数值六</param>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``8(``0,``1,``2,``3,``4,``5,``6,System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <typeparam name="In5">参数值五的泛型类型</typeparam>
            <typeparam name="In6">参数值六的泛型类型</typeparam>
            <typeparam name="In7">参数值七的泛型类型</typeparam>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
            <param name="value5">参数值五</param>
            <param name="value6">参数值六</param>
            <param name="value7">参数值七</param>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``9(``0,``1,``2,``3,``4,``5,``6,``7,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="In1">参数值一的泛型类型</typeparam>
            <typeparam name="In2">参数值二的泛型类型</typeparam>
            <typeparam name="In3">参数值三的泛型类型</typeparam>
            <typeparam name="In4">参数值四的泛型类型</typeparam>
            <typeparam name="In5">参数值五的泛型类型</typeparam>
            <typeparam name="In6">参数值六的泛型类型</typeparam>
            <typeparam name="In7">参数值七的泛型类型</typeparam>
            <typeparam name="In8">参数值八的泛型类型</typeparam>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="value1">参数值一</param>
            <param name="value2">参数值二</param>
            <param name="value3">参数值三</param>
            <param name="value4">参数值四</param>
            <param name="value5">参数值五</param>
            <param name="value6">参数值六</param>
            <param name="value7">参数值七</param>
            <param name="value8">参数值八</param>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DynamicDomain.Invoke``1(System.Object[],System.Func{System.Object[],``0})">
            <summary>
            在动态程序域中委托处理并且返回处理结果。
            </summary>
            <typeparam name="Out">处理返回泛型类型</typeparam>
            <param name="handler">静态委托处理程序(不允许跨应用程序域直接使用变量实例)。</param>
            <param name="values">输入参数值组</param>
        </member>
        <member name="T:App.FunctionLibrary.DynamicDomain.DynamicDomainAssemblyLoader">
            <summary>
            动态域处理
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.AggregateType">
            <summary>
            聚合类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.AggregateType.Count">
            <summary>
            计数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.AggregateType.Sum">
            <summary>
            累计合计加
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.AggregateType.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.AggregateType.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.CompileType">
            <summary>
            编译类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CompileType.VbNet">
            <summary>
            VB.Net代码编译器
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CompileType.CSharp">
            <summary>
            C#代码编译器
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.FILEEVENT">
            <summary>
            文件常数
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.HookCodes">
            <summary>
            Windows钩子常数
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.HookType">
            <summary>
            钩子类型(API钩子函数的常量定义)
            </summary>
            <remarks>每一种类型的Hook可以使应用程序能够监视不同类型的系统消息处理机制，下面描述所有可以利用的Hook类型。</remarks>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_MSGFILTER">
            <summary>
            WH_MSGFILTER 和 WH_SYSMSGFILTER<br/>
            Hooks使我们可以监视菜单，滚动条，消息框，对话框消息并且发现用户使用ALT+TAB or ALT+ESC 组合键切换窗口。<br/>
            WH_MSGFILTER Hook只能监视传递到菜单，滚动条，消息框的消息，<br/>
            以及传递到通过安装了Hook子过程的应用程序建立的对话框的消息。<br/>
            WH_SYSMSGFILTER Hook监视所有应用程序消息。<br/>
            
            WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以在模式循环期间过滤消息，这等价于在主消息循环中过滤消息。<br/>
               
            通过调用CallMsgFilter function可以直接的调用WH_MSGFILTER Hook。<br/>
            通过使用这个函数，应用程序能够在模式循环期间使用相同的代码去过滤消息，如同在主消息循环里一样
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_JOURNALRECORD">
            <summary>
            WH_JOURNALRECORD Hook用来监视和记录输入事件。<br/>
            典型的，可以使用这个Hook记录连续的鼠标和键盘事件，<br/>
            WH_JOURNALRECORD Hook是全局Hook，它不能象线程特定Hook一样使用。<br/>
            WH_JOURNALRECORD是system-wide local hooks，它們不會被注射到任何行程位址空間。<br/>
            (监视和记录输入事件)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_JOURNALPLAYBACK">
            <summary>
            WH_JOURNALPLAYBACK Hook使应用程序可以插入消息到系统消息队列。<br/>
            可以使用这个Hook回放通过使用WH_JOURNALRECORD Hook记录下来的连续的鼠标和键盘事件。<br/>
            只要WH_JOURNALPLAYBACK Hook已经安装，正常的鼠标和键盘事件就是无效的。<br/>
            WH_JOURNALPLAYBACK Hook是全局Hook，它不能象线程特定Hook一样使用。<br/>
            WH_JOURNALPLAYBACK Hook返回超时值，这个值告诉系统在处理来自回放Hook当前消息之前需要等待多长时间（毫秒）。这就使Hook可以控制实时事件的回放。<br/>
            WH_JOURNALPLAYBACK是system-wide local hooks，它們不會被注射到任何行程位址空間。<br/>
            (回放用WH_JOURNALRECORD记录事件)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_KEYBOARD">
            <summary>
            在应用程序中，WH_KEYBOARD Hook用来监视WM_KEYDOWN and WM_KEYUP消息，<br/>
            这些消息通过GetMessage or PeekMessage function返回。<br/>
            可以使用这个Hook来监视输入到消息队列中的键盘消息。<br/>
            键盘钩子，键盘触发消息。WM_KEYUP或WM_KEYDOWN消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_GETMESSAGE">
            <summary>
            应用程序使用WH_GETMESSAGE Hook来监视从GetMessage or PeekMessage函数返回的消息。<br/>
            你可以使用WH_GETMESSAGE Hook去监视鼠标和键盘输入，以及其他发送到消息队列中的消息。<br/>
            发送到窗口的消息。GetMessage或PeekMessage触发
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_CALLWNDPROC">
            <summary>
            WH_CALLWNDPROC和WH_CALLWNDPROCRET Hooks使你可以监视发送到窗口过程的消息。<br/>
            系统在消息发送到接收窗口过程之前调用WH_CALLWNDPROC Hook子程，<br/>
            并且在窗口过程处理完消息之后调用WH_CALLWNDPROCRET Hook子程。<br/>
            WH_CALLWNDPROCRET Hook传递指针到CWPRETSTRUCT结构，再传递到Hook子程。<br/>
            CWPRETSTRUCT结构包含了来自处理消息的窗口过程的返回值，同样也包括了与这个消息关联的消息参数。<br/>
            发送到窗口的消息。由SendMessage触发
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_CBT">
            <summary>
            在以下事件之前，系统都会调用WH_CBT Hook子程，这些事件包括：<br/>
            1. 激活，建立，销毁，最小化，最大化，移动，改变尺寸等窗口事件；<br/>
            2. 完成系统指令；<br/>
            3. 来自系统消息队列中的移动鼠标，键盘事件；<br/>
            4. 设置输入焦点事件；<br/>
            5. 同步系统消息队列事件。<br/>
            Hook子程的返回值确定系统是否允许或者防止这些操作中的一个。<br/>
            (当基于计算机的训练(CBT)事件发生时)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_SYSMSGFILTER">
            <summary>
            WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以监视菜单，滚动条，消息框，对话框消息并且发现用户使用ALT+TAB or ALT+ESC 组合键切换窗口。<br/>
            WH_MSGFILTER Hook只能监视传递到菜单，滚动条，消息框的消息，以及传递到通过安装了Hook子程的应用程序建立的对话框的消息。<br/>
            WH_SYSMSGFILTER Hook监视所有应用程序消息。<br/>
            WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以在模式循环期间过滤消息，这等价于在主消息循环中过滤消息。<br/>
            通过调用CallMsgFilter function可以直接的调用WH_MSGFILTER Hook。<br/>
            通过使用这个函数，应用程序能够在模式循环期间使用相同的代码去过滤消息，如同在主消息循环里一样。<br/>
            同WH_MSGFILTER一样，系统范围的。 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_MOUSE">
            <summary>
            WH_MOUSE Hook监视从GetMessage 或者 PeekMessage 函数返回的鼠标消息。<br/>
            使用这个Hook监视输入到消息队列中的鼠标消息。<br/>
            鼠标钩子,查询鼠标事件消息<br/>
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_HARDWARE">
            <summary>
            当调用GetMessage 或 PeekMessage 来从消息队列种查询非鼠标、键盘消息时
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_DEBUG">
            <summary>
            在系统调用系统中与其他Hook关联的Hook子程之前，系统会调用WH_DEBUG Hook子程。<br/>
            你可以使用这个Hook来决定是否允许系统调用与其他Hook关联的Hook子程。<br/>
            (调试钩子，用来给钩子函数除错)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_SHELL">
            <summary>
            外壳应用程序可以使用WH_SHELL Hook去接收重要的通知。<br/>
            当外壳应用程序是激活的并且当顶层窗口建立或者销毁时，系统调用WH_SHELL Hook子程。<br/>
            WH_SHELL 共有５钟情況：<br/>
            1. 只要有个top-level、unowned 窗口被产生、起作用、或是被摧毁；<br/>
            2. 当Taskbar需要重画某个按钮；<br/>
            3. 当系统需要显示关于Taskbar的一个程序的最小化形式；<br/>
            4. 当目前的键盘布局状态改变；<br/>
            5. 当使用者按Ctrl+Esc去执行Task Manager（或相同级别的程序）。<br/>
            按照惯例，外壳应用程序都不接收WH_SHELL消息。<br/>
            所以，在应用程序能够接收WH_SHELL消息之前，<br/>
            应用程序必须调用SystemParametersInfo function注册它自己。<br/>
            (外壳钩子，当关于WINDOWS外壳事件发生时触发.)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_FOREGROUNDIDLE">
            <summary>
            当应用程序的前台线程处于空闲状态时，可以使用WH_FOREGROUNDIDLE Hook执行低优先级的任务。<br/>
            当应用程序的前台线程大概要变成空闲状态时，系统就会调用WH_FOREGROUNDIDLE Hook子程。<br/>
            (前台应用程序线程变成空闲时候，钩子激活。)
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_CALLWNDPROCRET">
            <summary>
            和 WH_CALLWNDPROC 形成一对儿钩子。<br/>
            发送到窗口的消息。由SendMessage处理完成返回时触发
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_KEYBOARD_LL">
            <summary>
            WH_KEYBOARD_LL Hook监视输入到线程消息队列中的键盘消息。
            (底层键盘钩子)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.HookType.WH_MOUSE_LL">
            <summary>
            WH_MOUSE_LL Hook监视输入到线程消息队列中的鼠标消息。
            (底层键盘钩子)
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.MOUSEEVENTF">
            <summary>
            鼠标事件常量
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MOUSEEVENTF.LEFTDOWN">
            <summary>
            模拟鼠标左键按下
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MOUSEEVENTF.LEFTUP">
            <summary>
            模拟鼠标左键抬起
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MOUSEEVENTF.RIGHTDOWN">
            <summary>
            模拟鼠标右键按下
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MOUSEEVENTF.RIGHTUP">
            <summary>
            模拟鼠标右键抬起
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MOUSEEVENTF.MIDDLEDOWN">
            <summary>
            模拟鼠标中键按下
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MOUSEEVENTF.MIDDLEUP">
            <summary>
            模拟鼠标中键抬起
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MOUSEEVENTF.MOVE">
            <summary>
            移动鼠标
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MOUSEEVENTF.ABSOLUTE">
            <summary>
            标示是否采用绝对坐标
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:App.FunctionLibrary.OutputFormats">
            <summary>
            DeviceInfo输出格式类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.BMP">
            <summary>
            BMP文档格式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.EMF">
            <summary>
            EMF文档格式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.GIF">
            <summary>
            GIF文档格式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.JPEG">
            <summary>
            JPEG文档格式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.EXIF">
            <summary>
            EXIF文档格式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.PDF">
            <summary>
            PDF文档格式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.PNG">
            <summary>
            PNG文档格式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.TIFF">
            <summary>
            TIFF文档格式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.ICON">
            <summary>
            ICON文档格式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.OutputFormats.WMF">
            <summary>
            WMF文档格式
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.VFT">
            <summary>
            VS_VERSION.dwFileType
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.VFT2">
            <summary>
            VS_VERSION.dwFileSubtype for VFT_WINDOWS_DRV
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.VFT_FONT">
            <summary>
            udtVerBuffer.dwFileSubtype for VFT_FONT
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.VK">
            <summary>
            虚拟键常量
            </summary>  
        </member>
        <member name="F:App.FunctionLibrary.VK.VK_SHIFT">
            <summary>
            Shift键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.VK.VK_CONTROL">
            <summary>
            Control键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.VK.VK_MENU">
            <summary>
            等同与Alt键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.VK.VK_ALT">
            <summary>
            Alt键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.VK.VK_PAUSE">
            <summary>
            PauseBreak键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.VK.VK_CAPITAL">
            <summary>
            Caps Lock键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.VK.KeyPressMask">
            <summary>
            KeyPress掩码
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.VOS">
            <summary>
            VS_VERSION.dwFileOS
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.VS_FF">
            <summary>
            VS_VERSION.dwFileFlags
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.XmlNodeType">
            <summary>
            Xml节点的类型。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.XmlNodeType.Node">
            <summary>
            节点(例如，&lt;item&gt;)。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.XmlNodeType.CDATA">
            <summary>
            CDATA 节（例如，&lt;![CDATA[my escaped text]]&gt;）。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.XmlNodeType.Comment">
            <summary>
            注释(例如，&lt;!-- my comment --&gt;)。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.XmlNodeType.Whitespace">
            <summary>
            标记间的空白。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.WatcherEventArgs">
            <summary>
            文件或目录发生改变事件参数集
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WatcherEventArgs.#ctor(System.IO.FileSystemEventArgs)">
            <summary>
            初始化
            </summary>
            <param name="e">文件系统事件参数集</param>
        </member>
        <member name="M:App.FunctionLibrary.WatcherEventArgs.#ctor(System.IO.FileSystemEventArgs,System.String)">
            <summary>
            初始化
            </summary>
            <param name="e">文件系统事件参数集</param>
            <param name="oldName">受改名影响的文件或目录原名称</param>
        </member>
        <member name="M:App.FunctionLibrary.WatcherEventArgs.#ctor(System.IO.RenamedEventArgs)">
            <summary>
            初始化
            </summary>
            <param name="e">文件系统事件参数集</param>
        </member>
        <member name="M:App.FunctionLibrary.WatcherEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="changeType">文件系统中检测到的更改种类</param>
            <param name="directory">受影响的文件或目录的根目录</param>
            <param name="name">受影响的文件或目录名</param>
        </member>
        <member name="M:App.FunctionLibrary.WatcherEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="changeType">文件系统中检测到的更改种类</param>
            <param name="directory">受影响的文件或目录的根目录</param>
            <param name="name">受影响的文件或目录名</param>
            <param name="oldName">受改名影响的文件或目录原名称</param>
        </member>
        <member name="P:App.FunctionLibrary.WatcherEventArgs.Directory">
            <summary>
            受影响的文件或目录的根目录.
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WatcherEventArgs.OldFullPath">
            <summary>
            受影响的文件或目录的前一个完全限定的路径。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WatcherEventArgs.OldName">
            <summary>
            受影响的文件或目录的旧名称。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.MessageReceivedEventArgs">
            <summary>
            接收消息参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MessageReceivedEventArgs.Message">
            <summary>
            发送的消息内容
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MessageReceivedEventArgs.Exception">
            <summary>
            远端回复的异常消息。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.MessageRegistEventArgs">
            <summary>
            注册消息参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MessageRegistEventArgs.Handle">
            <summary>
            发送消息方的句柄
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ConvertAny">
            <summary>
            任意类型转换为任意类型的转换器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CanConvertTo``1(System.Object)">
            <summary>
            Determines whether this instance can convert the specified value.
            </summary>
            <typeparam name="T">The type of to type.</typeparam>
            <param name="value">From value.</param>
            <returns><c>true</c> if this instance can convert the specified from value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CanConvertTo(System.Type,System.Type)">
            <summary>
            Determines whether this instance can convert the specified <paramref name="fromType"/> to the <paramref name="toType"/>.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <returns><c>true</c> if the conversion is valid; otherwise, <c>false</c>.</returns>
            <remarks>
            This method checks 4 types of conversions:
            
            1. If they are the same type, returns true.
            2. If they are both IConvertible types, return true.
            3. If the toType is part of the inheritance chain of fromType.
            4. Direct casting, only returns true if both types have default constructors.
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.TryConvert``1(System.Object,``0@)">
            <summary>
            Attempts to convert the value to the specified type. 
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">Value to convert.</param>
            <param name="toValue">Converted value.</param>
            <returns><c>true</c> if conversion succeeds, <c>false</c> otherwise.</returns>
            <remarks>
            If the conversion fails, the value of <paramref name="toValue"/> is the default
            of that particular type.
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Attempts to convert the value to the specified type. 
            </summary>
            <param name="toType">Value to Convert Type.</param>
            <param name="value">Value to convert.</param>
            <param name="toValue">Converted value.</param>
            <returns><c>true</c> if conversion succeeds, <c>false</c> otherwise.</returns>
            <remarks>
            If the conversion fails, the value of <paramref name="toValue"/> is the default
            of that particular type.
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.ConvertTo``1(System.Object)">
            <summary>
            Converts the specified from value.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>Converted value.</returns>
            <exception cref="T:Microsoft.CSharp.RuntimeBinder.RuntimeBinderException">Raised when the value cannot be converted to the specified type.</exception>
            <exception cref="T:System.InvalidCastException">Raised when the value cannot be converted to the specified type.</exception>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts value to the specified type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="toType">The type to convert to.</param>
            <returns>Object that represents the converted type.</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.Default``1">
            <summary>
            Creates a default instance of <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type to create a default instance of.</typeparam>
            <returns>Default instance of <typeparamref name="T"/>.</returns>
            <remarks>
            For primitive types this will create a value of 0 with the specified type. For
            objects, if the object has a default constructor it will return a default instance
            of the type. If the object does not have a default constructor, it will return
            null.
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.Default(System.Type)">
            <summary>
            Creates a default instance of <paramref name="type"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>Instance of the specified type.</returns>
            <remarks>
            This method uses the generic <see cref="M:App.FunctionLibrary.ConvertAny.Default``1"/> method to create an instance
            of the type.
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.GetCanConvertMethod(System.Type,System.Type)">
            <summary>
            <para>Casting a boxed object to a type even though the type supports an explicit cast to</para>
            <para>that type will fail. The only way to do this is to try to find the explicit or</para>
            <para>implicit type conversion operator on the to type that supports the from type.</para>
            <para>We can search for the reverse one on the original type too...</para>
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CStr(System.Object)">
            <summary>
            转换对象的字符型表达式(处理了Nothing和日期格式化为长日期的情况)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CStr``1(``0)">
            <summary>
            转换对象的字符型表达式(处理了Nothing和日期格式化为长日期的情况)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CBit(System.Object)">
            <summary>
            转换为比特数据类型，针对任意的数据类型转换。
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回1或者0的比特类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CBit``1(``0)">
            <summary>
            转换为比特数据类型，针对任意的数据类型转换。
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回1或者0的比特类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CBit(System.Int32)">
            <summary>
            0转换为0，非0转换为1。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CBool(System.Object)">
            <summary>
            转换为布尔数据类型，针对任意的数据类型转换。
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回True或者Flase的布尔类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CBool``1(``0)">
            <summary>
            转换为布尔数据类型，针对任意的数据类型转换。
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回True或者Flase的布尔类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CDec(System.Object)">
            <summary>
            把数值转换为有效的十进制数(并且丢弃小数末位多余的无效0)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CDec``1(``0)">
            <summary>
            把数值转换为有效的十进制数(并且丢弃小数末位多余的无效0)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CDec``1(``0,System.Int32)">
            <summary>
            把数值转换为有效的十进制数，并且四舍五入为需要保留的小数位数(并且丢弃小数末位多余的无效0)。
            </summary>
            <param name="value">需要转换的双精度数据</param>
            <param name="digit">四舍五入保留的小数位数(最大小数位数)。</param>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CDec(System.Object,System.Int32)">
            <summary>
            把数值转换为有效的十进制数，并且四舍五入为需要保留的小数位数(丢弃小数末位多余的无效0)。
            </summary>
            <param name="value">需要转换的双精度数据</param>
            <param name="digit">四舍五入保留的小数位数(最大小数位数)。</param>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CLng(System.Object)">
            <summary>
            把有效的双精度数值转换为长整数
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回转换成功的长整类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CULng(System.Object)">
            <summary>
            把有效的双精度数值转换为无符号长整数
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回转换成功的长整类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CLng``1(``0)">
            <summary>
            把有效的双精度数值转换为长整数
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回转换成功的长整类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CULng``1(``0)">
            <summary>
            把有效的双精度数值转换为无符号长整数
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回转换成功的长整类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CInt(System.Object)">
            <summary>
            把有效的双精度数值转换为整数
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回转换成功的长整类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CUInt(System.Object)">
            <summary>
            把有效的双精度数值转换为无符号整数
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回转换成功的长整类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CInt``1(``0)">
            <summary>
            把有效的双精度数值转换为整数
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回转换成功的长整类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CUInt``1(``0)">
            <summary>
            把有效的双精度数值转换为无符号整数
            </summary>
            <param name="value">需要转换的数据</param>
            <returns>返回转换成功的长整类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CSng(System.Object)">
            <summary>
            把数值转换为有效的单精度数据
            </summary>
            <param name="value">需要转换的数据</param>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CSng``1(``0)">
            <summary>
            把数值转换为有效的单精度数据
            </summary>
            <param name="value">需要转换的数据</param>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CDbl(System.Object)">
            <summary>
            把数值转换为有效的双精度数据
            </summary>
            <param name="value">需要转换的数据</param>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CDbl``1(``0)">
            <summary>
            把数值转换为有效的双精度数据
            </summary>
            <param name="value">需要转换的数据</param>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.Round(System.Object,System.Int32)">
            <summary>
            把有效的数值进行四舍五入转换
            </summary>
            <param name="value">需要转换的双精度数据</param>
            <param name="digit">保留的小数位数</param>
            <returns>返回转换成功的双精度类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.Round``1(``0,System.Int32)">
            <summary>
            把有效的数值进行四舍五入转换
            </summary>
            <param name="value">需要转换的双精度数据</param>
            <param name="digit">保留的小数位数</param>
            <returns>返回转换成功的双精度类型数据</returns>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CType``1(``0,System.Type)">
            <summary>
            任意类型转换(包括Nullable(Of))。
            </summary>
            <param name="type">转换的目标类型</param>
            <param name="convertibleValue">需要转换的目标对象</param>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CType``2(``1)">
            <summary>
            任意类型转换(包括Nullable(Of))。
            </summary>
            <param name="convertibleValue">需要转换的目标对象</param>
        </member>
        <member name="M:App.FunctionLibrary.ConvertAny.CType``1(System.Object)">
            <summary>
            任意类型转换(包括Nullable(Of))。
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <param name="value">需要转换的目标对象</param>
        </member>
        <member name="T:App.FunctionLibrary.DataExtension">
            <summary>
            数据扩展函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToList``1(System.Data.DataTable)">
            <summary>
            由指定的数据表创建数据实体列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToList(System.Data.DataTable)">
            <summary>
            数据表的行集合输出为行列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToList(System.Data.DataRowCollection)">
            <summary>
            数据行集合输出为行列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToList``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0})">
            <summary>
            数据表的行集合输出为实体列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToArray(System.Data.DataTable)">
            <summary>
            数据表的行集合输出为行数组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToArray(System.Data.DataRowCollection)">
            <summary>
            数据行集合输出为行数组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToArray``1(System.Data.DataTable)">
            <summary>
            数据表创建实体数组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToArray``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0})">
            <summary>
            对数据表的行集合输出数组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToArray``1(System.Data.DataTable,System.String)">
            <summary>
            将当前数据表中指定的字段值复制到新数组中。
            </summary>
            <param name="table">当前数据表</param>
            <param name="columnName">字段限定名</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToArray(System.Data.DataColumnCollection)">
            <summary>
            数据列集合输出为列数组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToArray``1(System.Data.DataColumnCollection,System.Func{System.Data.DataColumn,``0})">
            <summary>
            对数据表的列集合输出数组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToTableSchema``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            由枚举器创建数据架构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            由枚举器生成为数据表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToTable``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <summary>
            由枚举器生成包含列名称集合的数据表。
            </summary>
            <param name="values">需要生成数据表的数据实体列表。</param>
            <param name="columnNames">转换为数据表包含的列名称集合(默认表示所有列)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToTable(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            由数据行对象数组生成数据表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToTable(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String[])">
            <summary>
            由数据行对象数组生成包含列名称集合的数据表。
            </summary>
            <param name="rows">需要转成数据表的数据行列表。</param>
            <param name="columnNames">转换为数据表包含的列名称集合(默认表示所有列)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToDbValue(App.FunctionLibrary.DataType,System.Object)">
            <summary>
            输出为数据字段类型值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FromDbValue(System.Type,System.Object)">
            <summary>
            从数据字段类型输出为系统类型值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FromDbValue(App.FunctionLibrary.DataType,System.Type,System.Object)">
            <summary>
            从数据字段类型输出为系统类型值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToDataType(System.Type)">
            <summary>
            系统数据类型转换为映射数据类型。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToType(App.FunctionLibrary.DataType)">
            <summary>
            映射数据类型转换为系统数据类型
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToDbType(App.FunctionLibrary.DataType)">
            <summary>
            数据实体映射类型转换为数据库设计类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToDataType(System.Data.DbType)">
            <summary>
            数据库设计类型转换为数据实体映射类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Add(System.Data.DataTableCollection,System.String,System.Data.DataTable)">
            <summary>
            将指定的 DataTable 添加到集合中。
            </summary>
            <param name="name">DataTable 名称</param>
            <param name="table">添加到集合中的表</param>
            <param name="tables">数据表集合</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.AddRange(System.Data.DataTable,System.Data.DataRowCollection)">
            <summary>
            当前数据表中添加数据行集合。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.AddRange(System.Data.DataTable,System.Data.DataRow[])">
            <summary>
            当前数据表中添加数据行数组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindAll(System.Data.DataTable,System.String)">
            <summary>
             过滤符合条件的数据行并且返回数据行列表
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合过滤条件的数据行索引数组</returns>
            <remarks>如果没有匹配条件的数据行，则返回长度为0的数组</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindAll(System.Data.DataTable,System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary> 
            过滤单个多个列条件的数据行并且返回数据行列表
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值数组</param>
            <param name="match">搜索比较操作符。</param>
            <returns>返回符合筛选条件的数据行索引数组</returns>
            <remarks>如果没有匹配条件的数据行，则返回长度为0的数组</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindAll(System.Data.DataTable,System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤单个多个列条件的数据行并且返回数据行列表
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="columnName">过滤的列名称数组</param>
            <param name="value">匹配过滤列名称的列值数组</param>
            <param name="match">搜索比较操作符</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindAll(System.Data.DataTable,System.Predicate{System.Data.DataRow})">
            <summary>
            查找所有符合委托比较器的数据行列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindAll(System.Data.DataTable,System.Object,System.String,System.String,App.FunctionLibrary.RecursionDirection,System.Boolean)">
            <summary>
            对数据表进行递归遍历查找，并返回从父到子顺序的筛选数据行组。
            </summary>
            <param name="table">递归的数据表</param>
            <param name="id">递归初始化值</param>
            <param name="IdColumnName">递归值列名称</param>
            <param name="parentColumnName">递归父值列名称</param>
            <param name="direction">递归方向</param>
            <param name="includeSelf">递归结果是否包含初始化值</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindAll(System.Data.DataRowCollection,System.Object,System.String,System.String,App.FunctionLibrary.RecursionDirection,System.Boolean)">
            <summary>
            对数据行集合进行递归遍历查找，并返回从父到子顺序的筛选数据行组。
            </summary>
            <param name="rows">递归的数据行集合</param>
            <param name="id">递归初始化值</param>
            <param name="IdColumnName">递归值列名称</param>
            <param name="parentColumnName">递归父值列名称</param>
            <param name="direction">递归方向</param>
            <param name="includeSelf">递归结果是否包含初始化值</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindAll(System.Data.DataRow[],System.Object,System.String,System.String,App.FunctionLibrary.RecursionDirection,System.Boolean)">
            <summary>
            对数据行组进行递归遍历查找，并返回从父到子顺序的筛选数据行组。
            </summary>
            <param name="rows">递归的数据行组</param>
            <param name="id">递归初始化值</param>
            <param name="IdColumnName">递归值列名称</param>
            <param name="parentColumnName">递归父值列名称</param>
            <param name="direction">递归方向</param>
            <param name="includeSelf">递归结果是否包含初始化值</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindAll(System.Data.DataRowCollection,System.Predicate{System.Data.DataRow})">
            <summary>
            对数据行集合进行遍历查找，并返回所有符合条件的数据行组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindAll(System.Data.DataColumnCollection,System.Predicate{System.Data.DataColumn})">
            <summary>
            对数据列集合进行遍历查找，并返回所有所有符合条件的数据列组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Find(System.Data.DataTable,System.String)">
            <summary>
            查找符合条件的第一个数据行。
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合筛选条件的第一个数据行。</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Find(System.Data.DataTable,System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            查找符合条件的第一个数据行。
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="columnName">过滤的列名称数组</param>
            <param name="value">匹配过滤列名称的列值数组</param>
            <param name="match">搜索比较操作符</param>
            <returns>返回符合筛选条件的第一个数据行。</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Find(System.Data.DataTable,System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合单个列条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="match">搜索比较操作符</param>
            <returns>返回符合筛选条件的第一个数据行。</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Find(System.Data.DataTable,System.Predicate{System.Data.DataRow})">
            <summary>
            查找符合委托比较器的第一个数据行。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Find(System.Data.DataRowCollection,System.Predicate{System.Data.DataRow})">
            <summary>
            对数据行集合遍历查找，并且返回第一个符合条件的数据行。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Find(System.Data.DataColumnCollection,System.Predicate{System.Data.DataColumn})">
            <summary>
            对数据列集合遍历查找，并且返回第一个符合条件的数据列。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.First(System.Data.DataTable)">
            <summary>
            获取数据表的首行，如无数据返回 null。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.First``1(System.Data.DataTable)">
            <summary>
            获取数据表的首行并且返回数据实体，如无数据返回 null。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Last(System.Data.DataTable)">
            <summary>
            获取数据表的尾行，如无数据返回 null。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Last``1(System.Data.DataTable)">
            <summary>
            获取数据表的尾行并且返回数据实体，如无数据返回 null。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindIndex(System.Data.DataTable,System.String)">
            <summary>
            查找符合条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合筛选条件的第一个数据行索引</returns>
            <remarks>如果没有匹配条件的数据行，则返回-1</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindIndex(System.Data.DataTable,System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合单个列条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="columnName">过滤的列名称</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="match">搜索比较操作符。</param>
            <returns>返回符合过滤条件的第一个数据行索引</returns>
            <remarks>如果没有匹配条件的数据行，则返回-1</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindIndex(System.Data.DataTable,System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合单个列条件的第一个数据行并且返回数据行索引
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">搜索比较操作符。</param>
            <returns>返回符合过滤条件的第一个数据行索引</returns>
            <remarks>如果没有匹配条件的数据行，则返回-1</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindIndex(System.Data.DataTable,System.Predicate{System.Data.DataRow})">
            <summary>
            查找符合委托比较器的第一个数据行的索引。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindTable(System.Data.DataTable,System.String)">
            <summary>
            过滤符合条件的数据行并且返回数据表DataTable
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="filter">用来筛选过滤的条件表达式</param> 
            <returns>返回符合过滤条件的数据表</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindTable(System.Data.DataTable,System.Int32,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合多个列条件的数据行并且返回数据表
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="columnIndex">过滤的列索引</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">查找比较操作符。</param>
            <returns>返回符合过滤条件的数据表</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindTable(System.Data.DataTable,System.String,System.Object,App.FunctionLibrary.MatchType)">
            <summary>
            过滤符合多个列条件的数据行并且返回数据表
            </summary>
            <param name="table">过滤查找的数据表对象。</param>
            <param name="columnName">过滤的列名称。</param>
            <param name="value">匹配过滤列名称的列值</param>
            <param name="matching">查找比较操作符。</param>
            <returns>返回符合过滤条件的数据表</returns>
            <remarks>如果没有匹配条件的数据行，则返回Nothing</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.FindTable(System.Data.DataTable,System.Predicate{System.Data.DataRow})">
            <summary>
            过去符合委托比较器的数据行并且返回数据表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ForEach(System.Data.DataColumnCollection,System.Action{System.Data.DataColumn})">
            <summary>
            对数据表列集合进行遍历循环。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ForEach(System.Data.DataRowCollection,System.Action{System.Data.DataRow})">
            <summary>
            对数据表行集合进行遍历循环。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ForEach(System.Data.DataTable,System.Action{System.Data.DataRow})">
            <summary>
            对数据表 Table 的数据行集合进行遍历循环。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Sum(System.Data.DataTable,System.Data.DataColumn)">
            <summary>
            对指定数据表中指定列进行数字累计加合计
            </summary>
            <param name="column">指定的列对象</param>
            <param name="table">在其中进行累加合计计算的数据表。</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Sum(System.Data.DataTable,System.Int32)">
            <summary>
            对指定数据表中指定列进行数字累计加合计
            </summary>
            <param name="columnIndex">指定的列索引</param>
            <param name="table">在其中进行累加合计计算的数据表。</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Sum(System.Data.DataTable,System.String)">
            <summary>
            对指定数据表中指定列进行数字累计加合计
            </summary>
            <param name="columnName">指定的列名称</param>
            <param name="table">在其中进行累加合计计算的数据表。</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Sum``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0})">
            <summary>
            对指定数据表中指定列进行数字累计加合计
            </summary>
            <param name="selector">累计计算值</param>
            <param name="table">在其中进行累加合计计算的数据表。</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Sum(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32)">
            <summary>
            对指定数据行列表中指定列进行数字累计加合计
            </summary>
            <param name="columnIndex">指定的列索引</param>
            <param name="rows">在其中进行累加合计计算的数据行列表。</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Sum(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            对指定数据行列表中指定列进行数字累计加合计
            </summary>
            <param name="columnName">指定的列名称</param>
            <param name="rows">在其中进行累加合计计算的数据行列表。</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Sum``1(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Func{System.Data.DataRow,``0})">
            <summary>
            对指定数据表中指定列进行数字累计加合计
            </summary>
            <param name="selector">累计计算值</param>
            <param name="rows">在其中进行累加合计计算的数据行列表。</param>
            <returns>返回累计加合计值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Sort(System.Data.DataTable,System.String)">
            <summary>
            排序数据表，并且返回排序后的新数据表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.CopyFrom``1(``0,System.Data.DataRow)">
            <summary>
            从目标 DataRow 复制数据到当前实体类中并且返回指定实体类实例。
            </summary>
            <param name="from">包含数据的DataRow对象</param>
            <param name="to">需要拷贝数据的当前实体</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.CopyTo``1(System.Data.DataRow,``0)">
            <summary>
            从当前 DataRow 复制数据到指定实体类中并且返回指定实体类实例。
            </summary>
            <param name="from">包含数据的DataRow对象</param>
            <param name="to">拷贝的目标实体</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.CopyFrom``1(System.Data.DataRow,``0)">
            <summary>
            从目标数据实体复制数据到当前 DataRow 中并且返回 DataRow 实例。
            </summary>
            <param name="from">包含数据的数据实体对象</param>
            <param name="to">需要拷贝数据的当前数据行</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.CopyTo``1(``0,System.Data.DataRow)">
            <summary>
            从当前数据实体复制数据到目标 DataRow 中并且返回 DataRow 实例。
            </summary>
            <param name="from">包含数据的数据实体对象</param>
            <param name="to">拷贝的目标数据行</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.CopyTo``1(System.Data.DataRow)">
            <summary>
            把数据行数据拷贝到指定的泛型数据实体中并且返回该实体。
            </summary>
            <typeparam name="T">指定的泛型类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Copy(System.Data.DataRow)">
            <summary>
            拷贝 DataRow 的精确副本。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.CopyFrom(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            从源数据行中复制所有字段值到当前数据行中,并且返回当前数据行。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.CopyTo(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            从当前数据行中复制所有字段值到目标数据行中，并且返回目标数据行。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Copy(System.Data.DataTable,System.String[])">
            <summary>
            复制表的架构和数据。
            </summary>
            <param name="table">将要复制数据的表对象</param>
            <param name="columnNames">需要拷贝的数据表中包含的列，如果省略列名称将进行全表拷贝，包括架构和数据。</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.CopyExclude(System.Data.DataTable,System.String[])">
            <summary>
            复制表的架构和数据。
            </summary>
            <param name="table">将要复制数据的表对象</param>
            <param name="columnNames">需要拷贝的数据表中排除的列，如果省略列名称将进行全表拷贝，包括架构和数据。</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Value(System.Data.DataRow,System.String)">
            <summary>
            获取数据行中指定列名称的字段值。
            </summary>
            <param name="row">当前数据行对象</param>
            <param name="columnName">指定的列名称</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Value(System.Data.DataRow,System.Int32)">
            <summary>
            获取数据行中指定列索引的字段值
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="row">当前数据行对象</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Value(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            获取数据表中指定行索引和列名称的字段值。
            </summary>
            <param name="table">数据表对象</param>
            <param name="rowIndex">记录行索引</param>
            <param name="columnName">指定的列名称</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Value(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            获取数据表中指定行索引和列索引的字段值
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="table">数据表对象</param>
            <param name="rowIndex">记录行索引</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Text(System.Data.DataRow,System.String)">
            <summary>
            获取数据行总指定列名称的字段文本值
            </summary>
            <param name="columnName">指定的列名称</param>
            <param name="row">当前数据行对象</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Text(System.Data.DataRow,System.Int32)">
            <summary>
            获取数据行中指定列索引的字段文本值
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="row">当前数据行对象</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Text(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            获取数据表中指定行索引和列名称的字段文本值。
            </summary>
            <param name="table">数据表对象</param>
            <param name="rowIndex">记录行索引</param>
            <param name="columnName">指定的列名称</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.Text(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            获取数据表中指定行索引和列索引的字段文本值
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="table">数据表对象</param>
            <param name="rowIndex">记录行索引</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.GroupBy(System.Data.DataTable,System.Func{System.Data.DataRow,System.Object})">
            <summary>
            对数据表进行分组，并且生成分组后的数据表组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.GroupBy(System.Data.DataTable,System.Func{System.Data.DataRow,System.Object[]})">
            <summary>
            对数据表进行分组，并且生成分组后的数据表组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.GroupBy(System.Data.DataTable,System.String)">
            <summary>
            对数据表进行分组，并且生成分组后的数据表组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.GroupBy(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Func{System.Data.DataRow,System.Object})">
            <summary>
            对数据表进行分组，并且生成分组后的数据表组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.GroupBy(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Func{System.Data.DataRow,System.Object[]})">
            <summary>
            对数据表进行分组，并且生成分组后的数据表组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.GroupBy(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            对数据表进行分组，并且生成分组后的数据表组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.MergeTable(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            对数据表进行合并(合并结果以原表结构为准，如表结构不同时仅复制相同列名称和数据类型的数据项)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.GetSchemaTable(System.Type,System.String)">
            <summary>
            根据数据实体类生成类的DataTable架构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.GetSchemaTable(System.Collections.Generic.IList{App.FunctionLibrary.DataMapExtension.DataMapping},System.String)">
            <summary>
            根据数据字段创建架构表(变量字段或者可读写的属性)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.GetSchemaKey(System.Data.DataTable)">
            <summary>
            获取表架构的关键字描述字符串(用于比较两个表结构是否相同时使用)
            </summary>
            <param name="table">表对象</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.SchemaEquals(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            当前数据表是否与目标数据表结构完全相同
            </summary>
            <param name="table1">当前数据表</param>
            <param name="table2">与当前数据表进行比较的目标数据表</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.TableEquals(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            判断两个表是否完全相同
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToString(System.Data.DataTable,System.Boolean,System.String,System.String)">
            <summary>
            获取数据表的格式化字符串。
            </summary>
            <param name="table">数据表</param>
            <param name="columnDelimiter">列分隔符号(默认制表符)。</param>
            <param name="rowDelimiter">行分隔符号(默认回车换行符)。</param>
            <param name="includeColumnName">是否包括列名称。</param>
            <returns>返回格式化的数据表字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToString(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            获取数据表的格式化字符串。
            </summary>
            <param name="table">数据表</param>
            <param name="columnDelimiter">列分隔符号(默认制表符)。</param>
            <param name="rowDelimiter">行分隔符号(默认回车换行符)。</param>
            <param name="includeColumnName">是否包括列名称。</param>
            <returns>返回格式化的数据表字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ParseTable(System.String,System.String,System.String,System.Boolean)">
            <summary>
            由格式化的数据表字符串设置当前数据表DataTable对象，
            并且返回当前数据表DataTable对象，
            同时设置当前数据行DataRow为当前数据表DataTable的第一行。
            </summary>
            <param name="express">格式化的数据表字符串</param>
            <param name="columnDelimiter">列分隔符号(默认制表符)。</param>
            <param name="rowDelimiter">行分隔符号(默认回车换行符)。</param>
            <param name="includeColumnName">是否包括列名称。</param>
            <returns>返回该数据表对象</returns>
            <remarks>依据第一行数据作为字段名称，格式化的数据表字符串必须包含字段名称。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.RowCount(System.Data.DataTable)">
            <summary>
            获取数据表的总记录数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ColumnCount(System.Data.DataTable)">
            <summary>
            获取数据表的总字段数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToXml(System.Data.DataTable)">
            <summary>
            数据表生成为XML文档
            </summary>
            <param name="table">包含数据的数据表</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToXml(System.Data.DataSet)">
            <summary>
            数据集生成为XML文档
            </summary>
            <param name="dataset">包含数据的数据集</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToDataSet(System.String)">
            <summary>
            XML文档解析为DataSet。
            </summary>
            <param name="xml">XML文档</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToDataSet(App.FunctionLibrary.XmlDocument)">
            <summary>
            XML文档解析为DataSet。
            </summary>
            <param name="xml">XML文档</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToTable(App.FunctionLibrary.XmlDocument,System.String)">
            <summary>
            XML文档解析为DataTable。
            </summary>
            <param name="xml">XML文档</param>
            <param name="tableName">获取的表名称(如果不是DataSet结构的XML文档，表名称将忽略)。</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.createTableNode(System.Data.DataTable)">
            <summary>
            创建表节点
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.xmlParseTable(App.FunctionLibrary.XmlNode)">
            <summary>
            解析数据表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToTable(System.String[0:,0:])">
            <summary>
            由二维数组解析为数据表DataTable，
            </summary>
            <param name="data">设置数据表的二维数据数组，第一维为行，第二维为列。</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToTable(System.String[])">
            <summary>
            由一维数组解析为数据表DataTable(只有1列)。
            </summary>
            <param name="data">设置数据表的一维数组。</param>
        </member>
        <member name="M:App.FunctionLibrary.DataExtension.ToTable(System.String,System.String,System.String,System.Boolean)">
            <summary>
            由格式化的数据表字符串设置当前数据表DataTable对象，
            并且返回当前数据表DataTable对象，
            同时设置当前数据行DataRow为当前数据表DataTable的第一行。
            </summary>
            <param name="fromString">格式化的数据表字符串(包含列头)。</param>
            <param name="columnDelimiter">列分隔符号。</param>
            <param name="rowDelimiter">行分隔符号。</param>
            <param name="includeColumnName">是否包括列名称。</param>
            <returns>返回该数据表对象</returns>
            <remarks>依据第一行数据作为字段名称，格式化的数据表字符串必须包含字段名称。</remarks>
        </member>
        <member name="T:App.FunctionLibrary.StackTracer">
            <summary>
            从内存堆栈中获取调用方。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StackTracer.GetCallMethod(System.Reflection.MethodBase,System.Boolean,System.Type[])">
            <summary>
            获取调用当前正在执行的方法的方法。
            </summary>
            <param name="callMethod">被调用的方法。</param>
            <param name="excludes">排除的类型(当调用方法声明于该类型时忽略)</param>
            <param name="throwUnfound">true表示未发现时抛出异常 MissingMethodException,false表示未发现时返回 null。</param>
        </member>
        <member name="M:App.FunctionLibrary.StackTracer.GetCallMethod(System.Type,System.Boolean,System.Type[])">
            <summary>
            获取声明于定义调用类型的调用者(调用者声明于该类型中)。
            </summary>
            <param name="declareType">调用者的声明类型((或为接口和基类)。</param>
            <param name="excludes">排除的类型(当调用方法声明于该类型时忽略)</param>
            <param name="throwUnfound">true表示未发现时抛出异常 MissingMethodException,false表示未发现时返回 null。</param>
        </member>
        <member name="M:App.FunctionLibrary.StackTracer.GetCallName(System.Reflection.MethodBase)">
            <summary>
            获取方法的调用名称(格式:程序集名.类名称.函数名)
            </summary>
            <param name="method">方法实例</param>
        </member>
        <member name="T:App.FunctionLibrary.Trier">
            <summary>
            方法超时调用器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall(System.Action,System.Int32)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``1(System.Action{``0},System.Int32,``0)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <param name="param1">输入参数1</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``2(System.Action{``0,``1},System.Int32,``0,``1)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``3(System.Action{``0,``1,``2},System.Int32,``0,``1,``2)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``4(System.Action{``0,``1,``2,``3},System.Int32,``0,``1,``2,``3)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``5(System.Action{``0,``1,``2,``3,``4},System.Int32,``0,``1,``2,``3,``4)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``6(System.Action{``0,``1,``2,``3,``4,``5},System.Int32,``0,``1,``2,``3,``4,``5)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <typeparam name="T13">输入参数类型13</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
            <param name="param13">输入参数13</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <typeparam name="T13">输入参数类型13</typeparam>
            <typeparam name="T14">输入参数类型14</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
            <param name="param13">输入参数13</param>
            <param name="param14">输入参数14</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <typeparam name="T13">输入参数类型13</typeparam>
            <typeparam name="T14">输入参数类型14</typeparam>
            <typeparam name="T15">输入参数类型15</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
            <param name="param13">输入参数13</param>
            <param name="param14">输入参数14</param>
            <param name="param15">输入参数15</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Int32,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            方法超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <typeparam name="T13">输入参数类型13</typeparam>
            <typeparam name="T14">输入参数类型14</typeparam>
            <typeparam name="T15">输入参数类型15</typeparam>
            <typeparam name="T16">输入参数类型16</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
            <param name="param13">输入参数13</param>
            <param name="param14">输入参数14</param>
            <param name="param15">输入参数15</param>
            <param name="param16">输入参数16</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``1(System.Func{``0},System.Int32)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``2(System.Func{``1,``0},System.Int32,``1)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <param name="param1">输入参数1</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``3(System.Func{``1,``2,``0},System.Int32,``1,``2)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``4(System.Func{``1,``2,``3,``0},System.Int32,``1,``2,``3)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``5(System.Func{``1,``2,``3,``4,``0},System.Int32,``1,``2,``3,``4)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``6(System.Func{``1,``2,``3,``4,``5,``0},System.Int32,``1,``2,``3,``4,``5)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``7(System.Func{``1,``2,``3,``4,``5,``6,``0},System.Int32,``1,``2,``3,``4,``5,``6)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``8(System.Func{``1,``2,``3,``4,``5,``6,``7,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``9(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``10(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``11(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``12(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``13(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``14(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <typeparam name="T13">输入参数类型13</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
            <param name="param13">输入参数13</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``15(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <typeparam name="T13">输入参数类型13</typeparam>
            <typeparam name="T14">输入参数类型14</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
            <param name="param13">输入参数13</param>
            <param name="param14">输入参数14</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``16(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <typeparam name="T13">输入参数类型13</typeparam>
            <typeparam name="T14">输入参数类型14</typeparam>
            <typeparam name="T15">输入参数类型15</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
            <param name="param13">输入参数13</param>
            <param name="param14">输入参数14</param>
            <param name="param15">输入参数15</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``17(System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``0},System.Int32,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16)">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <typeparam name="T1">输入参数类型1</typeparam>
            <typeparam name="T2">输入参数类型2</typeparam>
            <typeparam name="T3">输入参数类型3</typeparam>
            <typeparam name="T4">输入参数类型4</typeparam>
            <typeparam name="T5">输入参数类型5</typeparam>
            <typeparam name="T6">输入参数类型6</typeparam>
            <typeparam name="T7">输入参数类型7</typeparam>
            <typeparam name="T8">输入参数类型8</typeparam>
            <typeparam name="T9">输入参数类型9</typeparam>
            <typeparam name="T10">输入参数类型10</typeparam>
            <typeparam name="T11">输入参数类型11</typeparam>
            <typeparam name="T12">输入参数类型12</typeparam>
            <typeparam name="T13">输入参数类型13</typeparam>
            <typeparam name="T14">输入参数类型14</typeparam>
            <typeparam name="T15">输入参数类型15</typeparam>
            <typeparam name="T16">输入参数类型16</typeparam>
            <param name="param1">输入参数1</param>
            <param name="param2">输入参数2</param>
            <param name="param3">输入参数3</param>
            <param name="param4">输入参数4</param>
            <param name="param5">输入参数5</param>
            <param name="param6">输入参数6</param>
            <param name="param7">输入参数7</param>
            <param name="param8">输入参数8</param>
            <param name="param9">输入参数9</param>
            <param name="param10">输入参数10</param>
            <param name="param11">输入参数11</param>
            <param name="param12">输入参数12</param>
            <param name="param13">输入参数13</param>
            <param name="param14">输入参数14</param>
            <param name="param15">输入参数15</param>
            <param name="param16">输入参数16</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall(System.Delegate,System.Int32,System.Object[])">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <param name="params">调用函数使用的参数</param>
        </member>
        <member name="M:App.FunctionLibrary.Trier.TryCall``1(System.Delegate,System.Int32,System.Object[])">
            <summary>
            函数超时尝试调用(超时抛出 TimeoutException)。
            </summary>
            <typeparam name="T">调用返回结果类型</typeparam>
            <param name="timeout">调用超时时间(毫秒,默认10秒钟)</param>
            <param name="caller">调用委托函数</param>
            <param name="params">调用函数使用的参数</param>
        </member>
        <member name="T:App.FunctionLibrary.TypeExtension">
            <summary>
            System.Type Extensions
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetTypeName(System.Type)">
            <summary>
            获取类型的强名称,格式:程序集名称.类型名称(不同于系统的Type.Name，也不同于Type.Name)。
            </summary>
            <remarks>如果为系统程序集，忽略 System 和 mscorlib。</remarks>
            <returns>如果为枚举型返回List{}{}。</returns>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.getNestType(System.Type,System.String)">
            <summary>
            获取嵌套类型
            </summary>
            <param name="type">嵌套元素类型</param>
            <param name="symbol">嵌套符号</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.getEnumerateSymbol(System.Type,System.String@)">
            <summary>
            由于微软的数组标记的生成顺序和类型展示数据顺序不一致，统一按微软生成顺序生成列表的标记顺序(支持数组和列表的混合模式)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetTypes``1(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
            程序集中包括的所有指定泛型的类型(或者派生于泛型的类型)。
            </summary>
            <typeparam name="T">指定的泛型类型</typeparam>
            <param name="assembly">程序集</param>
            <param name="nonPublic">如果公共或非公共类型都可以匹配，则为 true；如果只有公共类型可以匹配，则为 false。</param>
            <param name="includeSelf">获取结果是否包含泛型类型(false表示仅获取派生类型)。</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetType``1(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
            程序集中包括所指定泛型的首个符合条件的类型(或者派生于泛型的类型)。
            </summary>
            <typeparam name="T">指定的泛型类型</typeparam>
            <param name="assembly">程序集</param>
            <param name="nonPublic">如果公共或非公共类型都可以匹配，则为 true；如果只有公共类型可以匹配，则为 false。</param>
            <param name="includeSelf">获取结果是否包含泛型类型(false表示仅获取派生类型)。</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetTypeOf(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            获取程序集中指定类名称的类型(忽略大小写和命名空间)。
            </summary>
            <param name="assembly">在其中声明该类型的程序集</param>
            <param name="typeName">类型名称，忽略命名空间和大小写。</param>
            <param name="throwUnfound">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetType(System.String,System.Reflection.Assembly,System.Boolean)">
            <summary>
            获取程序集中指定类名称的类型(忽略大小写和命名空间)。
            </summary>
            <param name="declareAssembly">在其中声明该类型的程序集</param>
            <param name="typeName">类型名称，忽略命名空间和大小写。</param>
            <param name="throwUnfound">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetType(System.String,System.String,System.Boolean)">
            <summary>
            根据程序集名称和类型名称获取类型(忽略大小写和命名空间)。
            </summary>
            <param name="typeName">获取的类型名称(如果包括程序集名称时，忽略程序集名称参数)。</param>
            <param name="declareAssembly">在其中声明该类型的程序集(缺省表示系统默认类型 System.* 或 typeName 包含程序集名称。</param>
            <param name="throwUnfound">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetType(System.String,System.Boolean)">
            <summary>
            根据程序集名称和类型名称获取类型(忽略大小写和命名空间)。
            </summary>
            <param name="typeName">获取的类型名称(如果包括程序集名称时，忽略程序集名称参数)。</param>
            <param name="throwUnfound">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.getAssembly(System.String)">
            <summary>
            根据程序集名称获取程序集
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.ToByVal(System.Type)">
            <summary>
            类型转换为非引用传递类型。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.ToByRef(System.Type)">
            <summary>
            类型转换为按引用传递类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.ToDbType(System.Type)">
            <summary>
            系统数据类型转换为 Parameter 数据类型。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.ToType(System.Data.DbType)">
            <summary>
            Parameter 数据类型转换为系统数据类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.NullableType(System.Type)">
            <summary>
            获取可空类型的基础类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GenericDefinitionType(System.Type)">
            <summary>
            获取类型的泛型定义类型。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetGenericArguments(System.Type)">
            <summary>
            获取泛型类型的参数类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetTypeArray(System.Object[],System.Type)">
            <summary>
            获取指定数组中对象的类型
            </summary>
            <param name="args">要确定其类型的对象数组</param>
            <param name="defaultType">当对象为 null 时的默认类型</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.GetDeclareType(System.Reflection.MemberInfo)">
            <summary>
            获取成员信息的声明类型(包括字段、属性和方法的返回类型)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建类型的实例(包括私有的构造函数)
            </summary>
            <param name="type">需要创建实例的类型</param>
            <param name="params">构造函数参数</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.CreateInstance(System.Type,System.Boolean)">
            <summary>
            创建类型实例设置默认值,并且返回实例。
            </summary>
            <param name="type">创建实例的类型</param>
            <param name="includeMember">是否包含对象的成员默认值</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            创建类型的实例(包括私有的构造函数)
            </summary>
            <typeparam name="T">创建对象实例的泛型类型</typeparam>
            <param name="type">需要创建实例的类型</param>
            <param name="params">构造函数参数</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.CreateInstance``1(System.Type,System.Boolean)">
            <summary>
            创建类型实例设置默认值,并且返回实例。
            </summary>
            <typeparam name="T">创建对象实例的泛型类型</typeparam>
            <param name="type">创建实例的类型</param>
            <param name="includeMember">是否包含对象的成员默认值</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.CreateDefault(System.Type)">
            <summary>
            Creates a default instance of the type.
            </summary>
            <param name="t">Type extension reference.</param>
            <returns>System.Object.</returns>
            <remarks>
            If the type is a value type or primitive, it will return a type that is
            that primitive or value type initialized to zero.
            
            If the type is a complex type, and the type contains a default constructor
            it will return a default instance of that type. If the type does not have
            a default constructor, it will return null.
            </remarks>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsNullable(System.Object)">
            <summary>
            判断类型是否为可空类型(System.Nullable)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsNullable(System.Type)">
            <summary>
            判断类型是否为可空类型(System.Nullable)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsValueType(System.Type)">
            <summary>
            判断是否为值类型(不同于 Type.IsValueType)。
            <para>struct:视为对象类型</para>
            <para>string:视为值类型</para>
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsValueType(System.Object)">
            <summary>
            判断是否为值类型(不同于 Type.IsValueType)。
            <para>struct:视为对象类型</para>
            <para>string:视为值类型</para>
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsType(System.Type,System.Type)">
            <summary>
            是否为指定类型的派生类型或可以分配实例为指定类型(包含继承的基类、实现的接口等)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsType``1(``0,System.Type)">
            <summary>
            是否为指定类型的派生类型或可以分配实例为指定类型(包含继承的基类、实现的接口等)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsType``1(System.Type)">
            <summary>
            判断类型是否为指定的泛型类型(包含继承的基类、实现的接口等)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsType``1(System.Object)">
            <summary>
            是否为指定泛型类型的派生类型或可以分配实例为泛型类型(包含继承的基类、实现的接口等)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsSubclassOf(System.Type,System.String)">
            <summary>
            确定当前子类是否是从指定的基类名称派生的。
            </summary>
            <param name="subType">子类</param>
            <param name="baseTypeName">基类名称</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsList(System.Type)">
            <summary>
            确定类型是否为 List(Of ) 列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.IsStatic(System.Type)">
            <summary>
            指示类型是否为静态类
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.HasInterface(System.Type,System.String)">
            <summary>
            判断类型中是否实现了指定名称的接口。
            </summary>
            <param name="type">类型</param>
            <param name="name">接口名称(忽略大小写)</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.HasInterface(System.Type,System.Type)">
            <summary>
            判断类型中是否实现了指定类型的接口。
            </summary>
            <param name="type">类型</param>
            <param name="faceType">接口类型</param>
        </member>
        <member name="M:App.FunctionLibrary.TypeExtension.HasInterface``1(System.Type)">
            <summary>
            判断类型中是否实现了指定的接口。
            </summary>
            <param name="type">类型</param>
            <typeparam name="T">接口类型</typeparam>
        </member>
        <member name="T:App.FunctionLibrary.RawSocket">
            <summary>
            原始套接字，可以接收本机网卡上的数据帧或者数据包
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.RawSocket.IPHeader">
            <summary>
            IP头结构
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_verlen">
            <summary>
            I4位首部长度+4位IP版本号 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_tos">
            <summary>
            8位服务类型TOS 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_totallength">
            <summary>
            16位数据包总长度（字节） 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_id">
            <summary>
            16位标识 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_offset">
            <summary>
            3位标志位 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_ttl">
            <summary>
            8位生存时间 TTL 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_protocol">
            <summary>
            8位协议(TCP, UDP, ICMP, Etc.) 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_checksum">
            <summary>
            16位IP首部校验和 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_srcaddr">
            <summary>
            32位源IP地址 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.IPHeader.ip_destaddr">
            <summary>
            32位目的IP地址 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.SIO_RCVALL">
            <summary>
            监听所有的数据包
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RawSocket.ErrorOccurred">
            <summary>
            套接字在接收包时是否产生错误
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.RawSocket.KeepRunning">
            <summary>
            是否继续进行 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.len_receive_buf">
            <summary>
            得到的数据流的长度
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.receive_buf_bytes">
            <summary>
            收到的字节 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RawSocket.socket">
            <summary>
            声明套接字 
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RawSocket.CreateAndBindSocket(System.String)">
            <summary>
            创建RawSocket，并把它与终结点（IPEndPoint：本机IP和端口）绑定
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RawSocket.Run">
            <summary>
            开始监听
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RawSocket.Shutdown">
            <summary>
            关闭raw socket 
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RawSocket.Dispose">
            <summary>
            消耗资源
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RawSocket.SetSocketOption">
            <summary>
            设置raw socket 
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RawSocket.CallReceive(System.IAsyncResult)">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RawSocket.Receive(System.Byte[],System.Int32)">
            <summary>
            解析接收的数据包，形成PacketArrivedEventArgs事件数据类对象，并引发PacketArrival事件
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.RawSocket.PacketArrivedEventHandler">
            <summary>
            事件句柄：包到达时引发事件 
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.RawSocket.PacketArrival">
            <summary>
            声明时间句柄函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.RawSocket.OnPacketArrival(App.FunctionLibrary.PacketArrivedEventArgs)">
            <summary>
            激活封包到达事件
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.JsonSerializer">
            <summary>
            JavaScript Object Notation 轻量级的数据交换格式序列化处理器。
            </summary>
            <remarks>
            1.并列的数据之间用逗号（", "）分隔。
            2.映射用冒号（": "）表示。
            3.并列数据的集合（数组）用方括号("[]")表示。
            4.映射的集合（对象）用大括号（"{}"）表示。
            +.强名称用括号("()")表示。
            </remarks>
        </member>
        <member name="P:App.FunctionLibrary.JsonSerializer.EscapeCharacters">
            <summary>
            特殊字符转义集合
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.JsonSerializer.EnumAsNameSerializtion">
            <summary>
            枚举按枚举名进行序列化(缺省按值进行序列化)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.JsonSerializer.SerializeElement(App.FunctionLibrary.SerializationElement)">
            <summary>
            元素序列化
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.JsonSerializer.DeserializeElement(System.Type,System.String)">
            <summary>
            元素反序列化
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonSerializer.Index">
            <summary>
            当前处理字符的位置索引
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.JsonSerializer.Jsons">
            <summary>
            Json字符列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.JsonSerializer.ParseValue(System.Type)">
            <summary>
            解析值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.JsonSerializer.ParseObject(System.Type)">
            <summary>
            解析对象
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DatePair">
            <summary>
            日期时间对儿(日期时间范围)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.#ctor">
            <summary>
            初始化日期时间对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.#ctor(System.DateTime,System.DateTime)">
            <summary>
            初始化日期时间对儿。
            </summary>
            <param name="begin">开始时间(最小时间)</param>
            <param name="final">结束时间(最大时间)</param>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.#ctor(System.Int64,System.Int64)">
            <summary>
            初始化日期时间对儿。
            </summary>
            <param name="begin">开始时间(最小时间)的计时周期数(以 100 纳秒为单位表示的日期和时间)。</param>
            <param name="final">结束时间(最大时间)的计时周期数(以 100 纳秒为单位表示的日期和时间)。</param>
        </member>
        <member name="P:App.FunctionLibrary.DatePair.Begin">
            <summary>
            开始时间(最小时间)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DatePair.Final">
            <summary>
            结束时间(最大时间)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DatePair.TimeSpan">
            <summary>
            结束时间与开始时间的时间间隔
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DatePair.IsEmpty">
            <summary>
            日期时间对儿是否为空。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.Contains(System.DateTime)">
            <summary>
            判断日期是否包含在日期时间对儿表示的时间范围内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.Contains(App.FunctionLibrary.DatePair)">
            <summary>
            判断是否包含目标日期时间对儿(相同的对儿视为包含，特例:空对儿包括空对儿)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.Contains(System.DateTime,System.DateTime)">
            <summary>
            判断是否包含目标日期时间对儿(相同的对儿视为包含，特例:空对儿包括空对儿)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.Intersect(App.FunctionLibrary.DatePair)">
            <summary>
            获取与目标日期时间对儿产生的日期时间对儿交集(空对儿表示无交集)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.Intersect(System.DateTime,System.DateTime)">
            <summary>
            获取与目标日期时间对儿产生的日期时间对儿交集(空对儿表示无交集)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DatePair.Empty">
            <summary>
            获取空日期时间对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.ToString">
            <summary>
            日期时间对儿的字符串表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.ToString(System.String,System.String)">
            <summary>
            日期时间对儿的字符串表达式
            </summary>
            <param name="format">日期格式化字符串</param>
            <param name="delimiter">时间对儿分隔符</param>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.Equals(System.Object)">
            <summary>
            确定指定的对象实例是否等于当前日期时间对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.GetHashCode">
            <summary>
            获取日期时间对儿的哈希值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.op_Equality(App.FunctionLibrary.DatePair,App.FunctionLibrary.DatePair)">
            <summary>
            判断日期时间对儿是否相同(null 和 IsEmpty 都视为空)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DatePair.op_Inequality(App.FunctionLibrary.DatePair,App.FunctionLibrary.DatePair)">
            <summary>
            判断日期时间对儿是否不同(null 和 IsEmpty 都视为空)。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Disposer`1">
            <summary>
            销毁处理器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Disposer`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            销毁处理器
            </summary>
            <param name="initial">初始函数</param>
            <param name="final">终结函数</param>
        </member>
        <member name="M:App.FunctionLibrary.Disposer`1.Dispose">
            <summary>
            销毁销毁处理器，同时调用终结函数。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.IgnoredAttribute">
            <summary>
            指示类型、方法、事件、字段或属性被忽略的标记。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.TimePair">
            <summary>
            时间对儿(时间范围)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.#ctor">
            <summary>
            初始化时间对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.#ctor(System.Int64,System.Int64)">
            <summary>
            初始化时间对儿。
            </summary>
            <param name="begin">开始时间(最小时间)的计时周期数(以 100 纳秒为单位表示的时间)。</param>
            <param name="final">结束时间(最大时间)的计时周期数(以 100 纳秒为单位表示的时间)。</param>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            初始化时间对儿。
            </summary>
            <param name="begin">开始时间(最小时间)</param>
            <param name="final">结束时间(最大时间)</param>
        </member>
        <member name="P:App.FunctionLibrary.TimePair.Begin">
            <summary>
            开始时间(最小时间)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.TimePair.Final">
            <summary>
            结束时间(最大时间)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.TimePair.Empty">
            <summary>
            获取空时间对儿。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.TimePair.IsEmpty">
            <summary>
            时间对儿是否为空。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.Contains(System.TimeSpan)">
            <summary>
            判断时间是否包含在时间对儿表示的时间范围内。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.Contains(App.FunctionLibrary.TimePair)">
            <summary>
            判断是否包含目标时间对儿(相同的对儿视为包含，特例:空对儿包括空对儿)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.Contains(System.TimeSpan,System.TimeSpan)">
            <summary>
            判断是否包含目标时间对儿(相同的对儿视为包含，特例:空对儿包括空对儿)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.Intersect(App.FunctionLibrary.TimePair)">
            <summary>
            获取与目标日期时间对儿产生的日期时间对儿交集(空对儿表示无交集)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.Intersect(System.TimeSpan,System.TimeSpan)">
            <summary>
            获取与目标时间对儿产生的时间对儿交集(空对儿表示无交集)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.ToString">
            <summary>
            时间对儿的字符串表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.ToString(System.String)">
            <summary>
            时间对儿的字符串表达式
            </summary>
            <param name="delimiter">时间对儿分隔符</param>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.Equals(System.Object)">
            <summary>
            确定指定的对象实例是否等于当前时间对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.GetHashCode">
            <summary>
            获取时间对儿的哈希值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.op_Equality(App.FunctionLibrary.TimePair,App.FunctionLibrary.TimePair)">
            <summary>
            判断时间对儿是否相同(null 和 IsEmpty 都视为空)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.TimePair.op_Inequality(App.FunctionLibrary.TimePair,App.FunctionLibrary.TimePair)">
            <summary>
            判断时间对儿是否不同(null 和 IsEmpty 都视为空)。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Wildcarder">
            <summary>
            通配符操作对象
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Wildcarder.pattern">
            <summary>
            通配符
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.#ctor(System.String)">
            <summary>
            实例化通配符对象
            </summary>
            <param name="pattern">通配符字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.ToString">
            <summary>
            通配符字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.ToRegex">
            <summary>
            通配符转换输出为正则表达式。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.IsMatch(System.String)">
            <summary>
            判断通配符是否在输入的字符串中找到了匹配项。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.IsMatch(System.String,System.Int32)">
            <summary>
            判断通配符在输入的字符串中，从指定的起始位置开始是否找到了匹配项。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
            <param name="startat">开始搜索的字符位置（从零开始）。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Match(System.String)">
            <summary>
            在指定的字符串中，获取符合通配符的第一个匹配项。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Match(System.String,System.Int32)">
            <summary>
            从字符串中的指定起始位置开始，获取符合通配符的第一个匹配项。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
            <param name="startat">开始搜索的字符位置（从零开始）。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Matches(System.String)">
            <summary>
            在指定的输入字符串中搜索通配符的所有匹配项。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Matches(System.String,System.Int32)">
            <summary>
            从字符串中的指定起始位置开始，获取符合通配符的所有匹配项。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
            <param name="startat">开始搜索的字符位置（从零开始）。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Split(System.String)">
            <summary>
            以通配符拆分输入字符串。
            </summary>
            <param name="input">要拆分的字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Split(System.String,System.Int32)">
            <summary>
            以通配符拆分输入字符串。
            </summary>
            <param name="input">要拆分的字符串。</param>
            <param name="count">可拆分的最大次数。</param> 
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Split(System.String,System.Int32,System.Int32)">
            <summary>
            从指定字符位置开始，以通配符拆分输入字符串。
            </summary>
            <param name="input">要拆分的字符串。</param>
            <param name="count">可拆分的最大次数。</param>
            <param name="startat">输入字符串中开始搜索的字符位置(从零开始)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Replace(System.String,System.String)">
            <summary>
            在指定输入子字符串内，使用指定替换字符串替换与通配符匹配的字符串（其数目为指定的最大数目）。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
            <param name="replacement">替换字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Replace(System.String,System.String,System.Int32)">
            <summary>
            在指定输入子字符串内，使用指定替换字符串替换与通配符匹配的字符串（其数目为指定的最大数目）。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
            <param name="replacement">替换字符串。</param>
            <param name="count">可进行替换的最大次数。</param>
        </member>
        <member name="M:App.FunctionLibrary.Wildcarder.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            在指定输入子字符串内，使用指定替换字符串替换与通配符匹配的字符串（其数目为指定的最大数目）。
            </summary>
            <param name="input">要搜索匹配项的字符串。</param>
            <param name="replacement">替换字符串。</param>
            <param name="count">可进行替换的最大次数。</param>
            <param name="startat">输入字符串中开始执行搜索的字符位置(从零开始)。</param>
        </member>
        <member name="T:App.FunctionLibrary.VirtualInput.KeyboardEvent">
            <summary>
            虚拟键盘事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.KeyboardEvent.KeyDown(System.Windows.Forms.Keys,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            键盘按下并且弹起事件组合
            </summary>
            <param name="keyCode">键码</param>
            <param name="control">是否同时按下Ctrl按键</param>
            <param name="shift">是否同时按下Shift按键</param>
            <param name="alt">是否同时按下Alt按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.KeyboardEvent.Down(System.Windows.Forms.Keys,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            键盘按下事件，必须调用UP方法完成一次键盘的按下弹起事件。
            </summary>
            <param name="keyCode">键码</param>
            <param name="control">是否同时按下Ctrl按键</param>
            <param name="shift">是否同时按下Shift按键</param>
            <param name="alt">是否同时按下Alt按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.KeyboardEvent.Up(System.Windows.Forms.Keys,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            键盘弹起事件，配合Down方法组合使用完成一次键盘的按下弹起事件。
            </summary>
            <param name="keyCode">键码</param>
            <param name="control">是否同时按下Ctrl按键</param>
            <param name="shift">是否同时按下Shift按键</param>
            <param name="alt">是否同时按下Alt按键</param>
        </member>
        <member name="T:App.FunctionLibrary.VirtualInput.MouseEvent">
            <summary>
            虚拟鼠标事件
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.VirtualInput.MouseEvent.Position">
            <summary>
            获取鼠标指针的当前坐标位置(相对于屏幕原点的像素数)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Move(System.Drawing.Point)">
            <summary>
            移动鼠标指针到指定的位置。
            </summary>
            <param name="position">指定的坐标位置(相对于屏幕原点的像素数)。</param> 
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Move(System.Int32,System.Int32)">
            <summary>
            移动鼠标指针到指定的x、y坐标位置处(相对于屏幕原点的像素数)。
            </summary>
            <param name="x">横向X坐标(像素)</param>
            <param name="y">纵向Y坐标(像素)</param>  
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Down(System.Windows.Forms.MouseButtons)">
            <summary>
            模拟鼠标按键按下事件。
            </summary>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Down(System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置按下鼠标按键(在调用Up方法后鼠标指针将移动到原位置)。 
            </summary>
            <param name="x">横向X坐标</param>
            <param name="y">纵向Y坐标</param>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Down(System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置按下鼠标按键(在调用Up方法后鼠标指针将移动到原位置)。
            </summary>
            <param name="position">指定的坐标位置</param> 
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Down(System.IntPtr,System.Windows.Forms.MouseButtons)">
            <summary>
            针对句柄对象执行鼠标按下事件
            </summary>
            <param name="handle">对象句柄指针</param>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Up(System.Windows.Forms.MouseButtons)">
            <summary>
            模拟鼠标按键弹起事件。
            </summary>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Up(System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置弹起鼠标按键(弹起后鼠标指针将移动到Down方法之前的原位置)。
            </summary>
            <param name="x">横向X坐标</param>
            <param name="y">纵向Y坐标</param>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Up(System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置弹起鼠标按键(弹起后鼠标指针将移动到Down方法之前的原位置)。
            </summary>
            <param name="position">指定的坐标位置</param> 
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.UP(System.IntPtr,System.Windows.Forms.MouseButtons)">
            <summary>
            针对句柄对象执行鼠标弹起事件
            </summary>
            <param name="handle">对象句柄指针</param>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Click(System.Windows.Forms.MouseButtons)">
            <summary>
            鼠标单击
            </summary>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Click(System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置单击鼠标按键。
            </summary>
            <param name="x">横向X坐标</param>
            <param name="y">纵向Y坐标</param>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Click(System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置单击鼠标按键。
            </summary>
            <param name="position">指定的坐标位置</param> 
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Click(System.String,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置单击鼠标按键。
            </summary>
            <param name="position">指定的坐标位置字符串(逗号分割的字符)。</param>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.Click(System.IntPtr,System.Windows.Forms.MouseButtons)">
            <summary>
            针对句柄对象单击鼠标单击
            </summary>
            <param name="handle">对象句柄指针</param>
            <param name="buttons">指定的鼠标按键</param>
            <returns>执行成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.DoubleClick(System.Windows.Forms.MouseButtons)">
            <summary>
            鼠标双击
            </summary>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.DoubleClick(System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置双击鼠标按键。
            </summary>
            <param name="x">横向X坐标</param>
            <param name="y">纵向Y坐标</param>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.DoubleClick(System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置双击鼠标按键。
            </summary>
            <param name="position">指定的坐标位置</param> 
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.DoubleClick(System.String,System.Windows.Forms.MouseButtons)">
            <summary>
            移动鼠标指针到指定的位置双击鼠标按键。
            </summary>
            <param name="position">指定的坐标位置字符串(逗号分割的字符)。</param>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="M:App.FunctionLibrary.VirtualInput.MouseEvent.DoubleClick(System.IntPtr,System.Windows.Forms.MouseButtons)">
            <summary>
            针对句柄对象单击鼠标双击
            </summary>
            <param name="handle">对象句柄指针</param>
            <param name="buttons">指定的鼠标按键</param>
        </member>
        <member name="T:App.FunctionLibrary.Messager">
            <summary>
            Windows消息处理器
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.Receiver">
            <summary>
            消息接收窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.MessageID">
            <summary>
            注册的通知消息标识
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.DataMessageID">
            <summary>
            注册的数据消息标识
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.ExceptMessageID">
            <summary>
            注册的异常消息标识
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.ReceiveThread">
            <summary>
            消息接收线程
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.Replied">
            <summary>
            成功回复标志
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.MessageReceiver">
            <summary>
            消息接收器(内部消息接收器将停止其他所有消息接收器)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.InternalMessageReceiver">
            <summary>
            消息接收器(内部消息接收器将停止其他所有消息接收器)
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Messager.MessageType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.MessageType.Unknown">
            <summary>
            其他未知的消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.MessageType.Reply">
            <summary>
            回复消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.MessageType.Registed">
            <summary>
            注册成功消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.MessageType.Unregisted">
            <summary>
            注销注册消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messager.MessageType.Discovery">
            <summary>
            发现消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Messager.#ctor(System.String,System.Boolean,System.Action{App.FunctionLibrary.MessageReceivedEventArgs})">
            <summary>
            实例化进程消息通讯，并且由messageName作为消息名称进行 Windows 消息注册。
            </summary>
            <param name="name">消息名称</param>
            <param name="autoRegistMessage">是否实例化完毕后立即自动注册消息。</param>
            <param name="dispatcher">消息分发器(将停止 Received 事件的响应)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Messager.#ctor(System.String,System.Action{App.FunctionLibrary.MessageReceivedEventArgs},System.Boolean)">
            <summary>
            实例化进程消息通讯，并且由messageName作为消息名称进行 Windows 消息注册。
            </summary>
            <param name="name">消息名称(注册的消息字符串标识符号)</param>
            <param name="dispatcher">消息分发器(将停止 Received 事件的响应)。</param>
            <param name="autoRegistMessage">是否实例化完毕后立即自动注册消息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Messager.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Messager.Dispose">
            <summary>
            注销 Windows 消息，销毁并释放所有资源。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Messager.Name">
            <summary>
            消息名称(注册的消息字符串标识符号)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Messager.Handle">
            <summary>
            Windows消息处理器接收消息的句柄。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Messager.Remoter">
            <summary>
            最后一次消息注册时响应消息的远端句柄(消息接收方，未注册或注销消息时为 IntPtr.Zero)。
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Messager.Received">
            <summary>
            接收到消息事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Messager.Registed">
            <summary>
            消息注册成功事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Messager.Unregisted">
            <summary>
            消息注销成功事件。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Messager.OnReceived(App.FunctionLibrary.MessageReceivedEventArgs)">
            <summary>
            激活消息接收事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Messager.OnRegisted(App.FunctionLibrary.MessageRegistEventArgs)">
            <summary>
            激活消息注册成功事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Messager.OnUnregisted(App.FunctionLibrary.MessageRegistEventArgs)">
            <summary>
            激活消息注销成功事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Messager.DiscoveryMessage">
            <summary>
            发现 Windows 消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Messager.RegistMessage">
            <summary>
            注册 Windows 消息
            </summary>
            <returns>注册消息成功返回消息注册者的句柄，IntPtr.Zero表示注册消息失败。</returns> 
        </member>
        <member name="M:App.FunctionLibrary.Messager.UnregistMessage">
            <summary>
            注销 Windows 消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Messager.SendMessage(System.String,System.IntPtr)">
            <summary>
            发送消息到接收方的消息队列中，并且等待接收方的返回结果。
            </summary>
            <param name="message">消息内容</param>
            <param name="receiver">接收方句柄，发送的目的地。</param>
        </member>
        <member name="M:App.FunctionLibrary.Messager.PostMessage(System.String,System.IntPtr,System.Int32)">
            <summary>
            投递消息到接收方的消息队列中。
            </summary>
            <param name="message">消息内容</param>
            <param name="receiver">接收方句柄，发送的目的地。</param>
            <param name="timeout">指定超时放弃返回的时间(单位:毫秒)。</param>
            <returns>发送成功返回True，失败返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Messager.PostMessage(System.Exception,System.IntPtr,System.Int32)">
            <summary>
            投递异常到接收方的消息队列中。
            </summary>
            <param name="exception">异常对象</param>
            <param name="receiver">接收方句柄，发送的目的地。</param>
            <param name="timeout">指定超时放弃返回的时间(单位:毫秒)。</param>
            <returns>发送成功返回True，失败返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Messager.WndProc(System.Windows.Forms.Message@)">
            <summary>
            消息处理。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Messager.NotifyMessage(System.IntPtr,App.FunctionLibrary.Messager.MessageType,App.FunctionLibrary.Messages)">
            <summary>
            通知消息
            </summary>
            <param name="receiver">接收通知方</param>
            <param name="notifyType">通知类型</param>
            <param name="timeoutMode">超时模式</param>
        </member>
        <member name="M:App.FunctionLibrary.Messager.BroadcastMessage(App.FunctionLibrary.Messager.MessageType)">
            <summary>
            广播消息
            </summary>
            <param name="messageType">消息类型</param>
        </member>
        <member name="M:App.FunctionLibrary.Messager.WaitReply(System.Int32)">
            <summary>
            暂停、休眠
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Pair">
            <summary>
            定义可设置或检索的名值对儿。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pair.Name">
            <summary>
            名值对儿的名称。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pair.Value">
            <summary>
            名值对儿的值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.#ctor">
            <summary>
            实例化名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.#ctor(System.String)">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="name">名值对儿的名称部分</param> 
        </member>
        <member name="M:App.FunctionLibrary.Pair.#ctor(System.String,System.String)">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="name">名值对儿的名称部分</param>
            <param name="value">名值对儿的值部分</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair.#ctor(System.String,System.Object)">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="name">名值对儿的名称部分</param>
            <param name="value">名值对儿的值部分</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="pair">键值对儿</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair.Parse(System.String,System.String,System.Boolean)">
             <summary>
             由字符串表达式解析名值对儿。
             </summary>
             <param name="express">名值对儿的字符串表达式</param>
            <param name="delimiter">名值对儿的字符串分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
             <param name="throwOnError">解析错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair.Parse(System.String,System.String,System.Func{System.String,System.String},System.Func{System.String,System.String},System.Boolean)">
             <summary>
             由字符串表达式解析名值对儿。
             </summary>
             <param name="express">名值对儿的字符串表达式</param>
             <param name="nameParser">名称表达式解析器(如果为null使用默认解析器)</param>
             <param name="valueParser">值表达式解析器(如果为null使用默认解析器)</param>
            <param name="delimiter">名值对儿的字符串分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
             <param name="throwOnError">解析错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair.Parse(System.String,System.Func{System.String,System.String},System.Func{System.String,System.String},System.String,System.Boolean)">
             <summary>
             由字符串表达式解析名值对儿。
             </summary>
             <param name="express">名值对儿的字符串表达式</param>
             <param name="nameParser">名称表达式解析器(如果为null使用默认解析器)</param>
             <param name="valueParser">值表达式解析器(如果为null使用默认解析器)</param>
            <param name="delimiter">名值对儿的字符串分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
             <param name="throwOnError">解析错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair.ToString(System.String)">
             <summary>
             名值对儿输出为字符串表达式。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair.ToString">
            <summary>
            名值对儿输出为字符串表达式(默认分隔符为 =)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.op_Equality(App.FunctionLibrary.Pair,App.FunctionLibrary.Pair)">
            <summary>
            确定两个名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.op_Inequality(App.FunctionLibrary.Pair,App.FunctionLibrary.Pair)">
            <summary>
            确定两个名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.Equals(App.FunctionLibrary.Pair)">
            <summary>
            确定当前名字对与指定的名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.Equals(System.Object)">
            <summary>
            确定当前名字对与指定的名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.GetHashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.op_Implicit(System.Collections.Generic.KeyValuePair{System.String,System.String})~App.FunctionLibrary.Pair">
            <summary>
            名值对儿隐形转换为键值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.op_Implicit(App.FunctionLibrary.Pair)~System.Collections.Generic.KeyValuePair{System.String,System.String}">
            <summary>
            名值对儿隐形转换为键值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.op_Implicit(App.FunctionLibrary.Pair{System.String})~App.FunctionLibrary.Pair">
            <summary>
            名值对儿隐形转换。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.op_Implicit(App.FunctionLibrary.Pair{System.String,System.String})~App.FunctionLibrary.Pair">
            <summary>
            名值对儿隐形转换。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.op_Implicit(App.FunctionLibrary.Pair)~App.FunctionLibrary.Pair{System.String}">
            <summary>
            名值对儿隐形转换。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.op_Implicit(App.FunctionLibrary.Pair)~App.FunctionLibrary.Pair{System.String,System.String}">
            <summary>
            名值对儿隐形转换。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair.op_Implicit(App.FunctionLibrary.Pair)~System.String">
            <summary>
            名值对儿隐形转换未对儿值。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Pair`1">
            <summary>
            定义可设置或检索的名值对儿。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pair`1.Name">
            <summary>
            名值对儿的名称。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pair`1.Value">
            <summary>
            名值对儿的值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.#ctor">
            <summary>
            实例化名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.#ctor(System.String)">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="name">名值对儿的名称部分</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.#ctor(System.String,`0)">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="name">名值对儿的名称部分</param>
            <param name="value">名值对儿的值部分</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.#ctor(System.String,System.Object)">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="name">名值对儿的名称部分</param>
            <param name="value">名值对儿的值部分</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.#ctor(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="pair">键值对儿</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.Parse(System.String,System.String,System.Boolean)">
             <summary>
             由字符串表达式解析名值对儿。
             </summary>
             <param name="express">名值对儿的字符串表达式</param>
            <param name="delimiter">名值对儿的字符串分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
             <param name="throwOnError">解析错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.Parse(System.String,System.String,System.Func{System.String,System.String},System.Func{System.String,`0},System.Boolean)">
             <summary>
             由字符串表达式解析名值对儿。
             </summary>
             <param name="express">名值对儿的字符串表达式</param>
             <param name="nameParser">名称表达式解析器(如果为null使用默认解析器)</param>
             <param name="valueParser">值表达式解析器(如果为null使用默认解析器)</param>
            <param name="delimiter">名值对儿的字符串分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
             <param name="throwOnError">解析错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.Parse(System.String,System.Func{System.String,System.String},System.Func{System.String,`0},System.String,System.Boolean)">
             <summary>
             由字符串表达式解析名值对儿。
             </summary>
             <param name="express">名值对儿的字符串表达式</param>
             <param name="nameParser">名称表达式解析器(如果为null使用默认解析器)</param>
             <param name="valueParser">值表达式解析器(如果为null使用默认解析器)</param>
            <param name="delimiter">名值对儿的字符串分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
             <param name="throwOnError">解析错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.ToString(System.String)">
             <summary>
             名值对儿输出为字符串表达式。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.ToString">
            <summary>
            名值对儿输出为字符串表达式(默认分隔符为 =)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.op_Equality(App.FunctionLibrary.Pair{`0},App.FunctionLibrary.Pair{`0})">
            <summary>
            确定两个名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.op_Inequality(App.FunctionLibrary.Pair{`0},App.FunctionLibrary.Pair{`0})">
            <summary>
            确定两个名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.Equals(App.FunctionLibrary.Pair{`0})">
            <summary>
            确定当前名字对与指定的名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.Equals(System.Object)">
            <summary>
            确定当前名字对与指定的名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.GetHashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.op_Implicit(System.Collections.Generic.KeyValuePair{System.String,`0})~App.FunctionLibrary.Pair{`0}">
            <summary>
            名值对儿隐形转换为键值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.op_Implicit(App.FunctionLibrary.Pair{`0})~System.Collections.Generic.KeyValuePair{System.String,`0}">
            <summary>
            名值对儿隐形转换为键值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.op_Implicit(App.FunctionLibrary.Pair{System.String,`0})~App.FunctionLibrary.Pair{`0}">
            <summary>
            名值对儿隐形转换。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.op_Implicit(App.FunctionLibrary.Pair{`0})~App.FunctionLibrary.Pair{System.String,`0}">
            <summary>
            名值对儿隐形转换。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`1.op_Implicit(App.FunctionLibrary.Pair{`0})~`0">
            <summary>
            名值对儿隐形转换未对儿值。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Pair`2">
            <summary>
            定义可设置或检索的名值对儿。
            </summary>
            <typeparam name="Tname">对儿名称的类型</typeparam>
            <typeparam name="Tvalue">对儿值的类型</typeparam>
        </member>
        <member name="P:App.FunctionLibrary.Pair`2.Name">
            <summary>
            名值对儿的名称。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pair`2.Value">
            <summary>
            名值对儿的值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.#ctor(`0,`1)">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="name">名值对儿的名称</param>
            <param name="value">名值对儿的值</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.#ctor(`0,System.Object)">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="name">名值对儿的名称</param>
            <param name="value">名值对儿的值</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.#ctor(`0)">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="name">名值对儿的名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.#ctor">
            <summary>
            实例化名值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            实例化名值对儿。
            </summary>
            <param name="pair">键值对儿</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.Parse(System.String,System.String,System.Func{System.String,`0},System.Func{System.String,`1},System.Boolean)">
            <summary>
            由字符串表达式解析名值对儿。
            </summary>
            <param name="express">名值对儿的字符串表达式</param>
            <param name="nameParser">名称表达式解析器(如果为null使用默认解析器)</param>
            <param name="valueParser">值表达式解析器(如果为null使用默认解析器)</param>
            <param name="delimiter">名值对儿的字符串分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
            <param name="throwOnError">解析错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.Parse(System.String,System.Func{System.String,`0},System.Func{System.String,`1},System.String,System.Boolean)">
            <summary>
            由字符串表达式解析名值对儿。
            </summary>
            <param name="express">名值对儿的字符串表达式</param>
            <param name="nameParser">名称表达式解析器(如果为null使用默认解析器)</param>
            <param name="valueParser">值表达式解析器(如果为null使用默认解析器)</param>
            <param name="delimiter">名值对儿的字符串分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
            <param name="throwOnError">解析错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.Parse(System.String,System.String,System.Boolean)">
             <summary>
             由字符串表达式解析名值对儿。
             </summary>
             <param name="express">名值对儿的字符串表达式</param>
            <param name="delimiter">名值对儿的字符串分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
             <param name="throwOnError">解析错误时是否抛出异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.ToString(System.String)">
             <summary>
             名值对儿输出为字符串表达式。
             </summary>
            <param name="delimiter">名值对儿字符串表达式分隔符(分隔符左边的作为名值对儿的名称部分，右边的作为名值对儿的值部分)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.ToString">
            <summary>
            名值对儿输出为字符串表达式(默认分隔符为 =)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.op_Equality(App.FunctionLibrary.Pair{`0,`1},App.FunctionLibrary.Pair{`0,`1})">
            <summary>
            确定两个名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.op_Inequality(App.FunctionLibrary.Pair{`0,`1},App.FunctionLibrary.Pair{`0,`1})">
            <summary>
            确定两个名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.Equals(App.FunctionLibrary.Pair{`0,`1})">
            <summary>
            确定当前名字对与指定的名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.Equals(System.Object)">
            <summary>
            确定当前名字对与指定的名字对表示的名和值是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.GetHashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~App.FunctionLibrary.Pair{`0,`1}">
            <summary>
            名值对儿隐形转换为键值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.op_Implicit(App.FunctionLibrary.Pair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
            <summary>
            名值对儿隐形转换为键值对儿。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pair`2.op_Implicit(App.FunctionLibrary.Pair{`0,`1})~`1">
            <summary>
            名值对儿隐形转换未对儿值。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.EMFDeviceInfo">
            <summary>
            打印机设备信息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EMFDeviceInfo.#ctor(App.FunctionLibrary.OutputFormats)">
            <summary>
            实例化设备信息
            </summary>
            <param name="outputFormat">输出格式类型</param>
        </member>
        <member name="M:App.FunctionLibrary.EMFDeviceInfo.#ctor(System.String,App.FunctionLibrary.OutputFormats)">
            <summary>
            由rdlc报表模板文件实例化设备信息
            </summary>
            <param name="outputFormat">输出格式类型</param>
            <param name="rdlcFileName">rdlc报表模板文件</param>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.ColorDepth">
            <summary>
            调色板色深(默认24位)。
            </summary>
            <remarks>
            The pixel depth of the color range supported by the image output. 
            Valid values are 1, 4, 8, 24, and 32. 
            ColorDepth is only supported for TIFF rendering and is otherwise ignored by the report server for other image output formats. 
            Note:For this release of SQL Server, the value of this setting is ignored, and the TIFF image is always rendered as 24-bit.
            </remarks>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.Columns">
            <summary>
            The number of columns to set for the report. 
            This value overrides the report's original settings.
            not used
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.ColumnSpacing">
            <summary>
            The column spacing to set for the report. 
            This value overrides the report's original settings.
            not used
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.DpiX">
            <summary>
            The resolution of the output device in x-direction. 
            The default value is 96.
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.DpiY">
            <summary>
            The resolution of the output device in y-direction. 
            The default value is 96.
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.EndPage">
            <summary>
            The last page of the report to render. 
            The default value is the value for StartPage.
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.StartPage">
            <summary>
            The first page of the report to render. 
            A value of 0 indicates that all pages are rendered. 
            The default value is 1.
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.MarginBottom">
            <summary>
            打印页的底边距(厘米)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.MarginTop">
            <summary>
            打印页的顶边距(厘米)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.MarginLeft">
            <summary>
            打印页的左边距(厘米)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.MarginRight">
            <summary>
            打印页的右边距(厘米)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.OutputFormat">
            <summary>
            One of the Graphics Device Interface (GDI) supported output formats: BMP, EMF, GIF, JPEG, PNG, or TIFF.
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.PageHeight">
            <summary>
            页面高度(厘米)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EMFDeviceInfo.PageWidth">
            <summary>
            页面宽度(厘米)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EMFDeviceInfo.ToMargins">
            <summary>
            输出打印页的边距尺寸(百分之一英寸)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EMFDeviceInfo.ToPaperSize(System.String)">
            <summary>
            输出打印页的纸张(百分之一英寸)。
            </summary>
            <param name="paperName">纸张名称</param>
        </member>
        <member name="M:App.FunctionLibrary.EMFDeviceInfo.ToString">
            <summary>
            设备信息输出为Xml文本字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EMFDeviceInfo.op_Implicit(App.FunctionLibrary.EMFDeviceInfo)~System.String">
            <summary>
            隐形输出为设备信息Xml文档
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.PrinterHandle">
            <summary>
            打印机句柄操作对象
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PrinterHandle.PrinterName">
            <summary>
            打印机名称
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PrinterHandle.#ctor(System.String)">
            <summary>
            实例化打印机句柄操作对象
            </summary>
            <param name="printerName">打印机名称</param>
        </member>
        <member name="M:App.FunctionLibrary.PrinterHandle.Finalize">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PrinterHandle.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PrinterHandle.Value">
            <summary>
            打印机句柄值。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.PrintPage">
            <summary>
            打印页
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PrintPage.#ctor(System.String)">
            <summary>
            打印页
            </summary>
            <param name="printerName">打印机名称</param>
        </member>
        <member name="M:App.FunctionLibrary.PrintPage.#ctor(App.FunctionLibrary.PrinterHandle)">
            <summary>
            打印页
            </summary>
            <param name="handler">打印机操作句柄</param>
        </member>
        <member name="M:App.FunctionLibrary.PrintPage.Write(System.String)">
            <summary>
            往打印页中写入文本信息。
            </summary>
            <param name="message">要打印的文本信息</param>
        </member>
        <member name="M:App.FunctionLibrary.PrintPage.Write(System.Byte[])">
            <summary>
            往打印页中写入字节流。
            </summary>
            <param name="buffer">要打印的字节流。</param>
        </member>
        <member name="M:App.FunctionLibrary.PrintPage.WritePrivate(System.IntPtr,System.Int32)">
            <summary>
            写入指针处指定长度的数据。
            </summary>
            <param name="pBytes">数据首指针地址</param>
            <param name="dwCount">数据长度</param>
        </member>
        <member name="P:App.FunctionLibrary.PrintPage.IsDisposed">
            <summary>
            是否已经销毁
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PrintPage.Finalize">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.PrintPage.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.BaseSerializer">
            <summary>
            基础序列化、串行化操作类
            </summary>
            <remarks>只做对象解析为序列化元素和由序列化元素实例化为对象的操作。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Serialize(System.Object)">
            <summary>
            对象串行化
            </summary>
            <param name="obj">需要进行串行化的对象实例。</param>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.SerializeToString(System.Object)">
            <summary>
            对象串行化
            </summary>
            <param name="obj">需要进行串行化的对象实例。</param>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Deserialize(System.Byte[])">
            <summary>
            对象反串行化
            </summary>
            <param name="serialized">对象串行化的字节流。</param>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Deserialize(System.Type,System.Byte[])">
            <summary>
            对象反串行化
            </summary>
            <param name="type">反串行化的对象类型。</param>
            <param name="serialized">对象串行化的字节流。</param>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Deserialize``1(System.Byte[])">
            <summary>
            泛型类型对象反串行化
            </summary>
            <typeparam name="T">反串行化后的对象类型。</typeparam>
            <param name="serialized">对象序列化的字节流。</param>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Deserialize(System.String)">
            <summary>
            对象反串行化
            </summary>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Deserialize``1(System.String)">
            <summary>
            对象反串行化
            </summary>
            <typeparam name="T">反串行化的对象类型。</typeparam>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Deserialize(System.Type,System.String)">
            <summary>
            对象反串行化
            </summary>
            <param name="type">反串行化的对象类型。</param>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="P:App.FunctionLibrary.BaseSerializer.StrongNaming">
            <summary>
            序列化的结果是否强命名类型(缺省为 false)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.BaseSerializer.EscapeCharacters">
            <summary>
            特殊字符转义集合组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.SerializeElement(App.FunctionLibrary.SerializationElement)">
            <summary>
            派生类必须实现的序列化方法
            </summary>
            <param name="root">根对象节点</param>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.DeserializeElement(System.Type,System.String)">
            <summary>
            派生类必须实现的反序列化方法
            </summary>
            <param name="type">反序列化的目标类型</param>
            <param name="serialized">需要进行反序列化的字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.getElement(System.Object)">
            <summary>
            实例化对象解析为序列化元素
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.getDataFields(System.Object)">
            <summary>
            获取可以序列化的数据字段(包括字段和属性)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.getDataFields(System.Type)">
            <summary>
            获取可以序列化的数据字段(包括字段和属性)
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.BaseSerializer.DataFieldItem">
            <summary>
            数据字段信息实体
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.BaseSerializer.DataFieldItem.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.BaseSerializer.DataFieldItem.Value">
            <summary>
            字段值
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.BaseSerializer.DataFieldItem.Member">
            <summary>
            字段映射的成员信息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.BaseSerializer.DataFieldItem.DeclareType">
            <summary>
            字段的定义类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.BaseSerializer.DataFieldItem.RuntimeType">
            <summary>
            字段的实例类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.CreateObject(App.FunctionLibrary.SerializationElement)">
            <summary>
            由序列化元素创建实例化对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Escaping(System.String,System.Boolean)">
            <summary>
            特殊字符转义
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Unescaping(System.String,System.Boolean)">
            <summary>
            特殊字符反转义
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Escaping(System.Byte[],System.Boolean)">
            <summary>
            特殊字符转义
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.Unescaping(System.Byte[],System.Boolean)">
            <summary>
            特殊字符反转义
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BaseSerializer.GetMemberByName(System.Type,System.String)">
            <summary>
            获取类型的成员信息(具有缓存功能，不重复解析)。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.EscapeArgs">
            <summary>
            字符转义实体
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.EscapeArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            字符转义实体
            </summary>
            <param name="value">需要被转义的字符串</param>
            <param name="output">转义输出的字符串</param>
            <param name="split">转义为拆分用字符串</param>
        </member>
        <member name="P:App.FunctionLibrary.EscapeArgs.Value">
            <summary>
            需要被转义的字符串
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EscapeArgs.Output">
            <summary>
            转义输出的字符串
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.EscapeArgs.Split">
            <summary>
            转义为拆分用字符串
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.BinarySerializer">
            <summary>
            二进制格式序列化处理器(对象类型必须为指定 Serializable 属性)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.BinarySerializer.StrongNaming">
            <summary>
            序列化的结果是否强命名类型(缺省为 true)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BinarySerializer.Serialize(System.Object)">
            <summary>
            对象串行化
            </summary>
            <param name="obj">需要进行串行化的对象实例。</param>
        </member>
        <member name="M:App.FunctionLibrary.BinarySerializer.SerializeToString(System.Object)">
            <summary>
            对象串行化
            </summary>
            <param name="obj">需要进行串行化的对象实例。</param>
        </member>
        <member name="M:App.FunctionLibrary.BinarySerializer.Deserialize(System.Byte[])">
            <summary>
            对象反串行化
            </summary>
            <param name="serialized">对象串行化的字节流。</param>
        </member>
        <member name="M:App.FunctionLibrary.BinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            对象反串行化
            </summary>
            <typeparam name="T">反串行化后的对象类型(如果类型不正确返回 Nothing)。</typeparam>
            <param name="serialized">对象序列化的字节流。</param>
        </member>
        <member name="M:App.FunctionLibrary.BinarySerializer.Deserialize(System.String)">
            <summary>
            对象反串行化
            </summary>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.BinarySerializer.Deserialize(System.Type,System.String)">
            <summary>
            对象反串行化
            </summary>
            <param name="type">反串行化的对象类型。</param>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.BinarySerializer.Deserialize``1(System.String)">
            <summary>
            对象反串行化
            </summary>
            <typeparam name="T">反串行化后的对象类型。</typeparam>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="T:App.FunctionLibrary.IgnoreSerializedAttribute">
            <summary>
            指示可序列化类的字段或属性在序列化时将被忽略。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ISerializable">
            <summary>
            提供序列化和反序列化的自定义格式。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ISerializable.Serializeing(System.Func{System.String,System.String})">
            <summary>
            自定义序列化
            </summary>
            <param name="escape">转义委托函数</param>
        </member>
        <member name="M:App.FunctionLibrary.ISerializable.Deserializing(App.FunctionLibrary.SerializationElement,System.Func{System.String,System.String})">
            <summary>
            自定义反序列化
            </summary>
            <param name="root">反序列化的元素</param>
            <param name="escape">转义委托函数</param>
        </member>
        <member name="T:App.FunctionLibrary.ISerializer">
            <summary>
            序列化处理器接口
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ISerializer.StrongNaming">
            <summary>
            序列化的结果是否包括强类型名称。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ISerializer.Serialize(System.Object)">
            <summary>
            对象串行化
            </summary>
            <param name="obj">需要进行串行化的对象实例。</param>
        </member>
        <member name="M:App.FunctionLibrary.ISerializer.SerializeToString(System.Object)">
            <summary>
            对象序列化为表达式字符串。
            </summary>
            <param name="obj">序列化的对象实例</param>
        </member>
        <member name="M:App.FunctionLibrary.ISerializer.Deserialize(System.Byte[])">
            <summary>
            对象反串行化
            </summary>
            <param name="serialized">对象串行化的数据流。</param>
        </member>
        <member name="M:App.FunctionLibrary.ISerializer.Deserialize``1(System.Byte[])">
            <summary>
            泛型类型对象反串行化
            </summary>
            <typeparam name="T">反串行化后的对象类型。</typeparam>
            <param name="serialized">对象串行化的数据流。</param>
        </member>
        <member name="M:App.FunctionLibrary.ISerializer.Deserialize(System.String)">
            <summary>
            对象反串行化
            </summary>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.ISerializer.Deserialize(System.Type,System.String)">
            <summary>
            对象反串行化
            </summary>
            <param name="type">序列化的类型</param>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.ISerializer.Deserialize``1(System.String)">
            <summary>
            对象反串行化
            </summary>
            <typeparam name="T">反串行化后的对象类型。</typeparam>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="T:App.FunctionLibrary.SerializableException">
            <summary>
            可序列化的异常对象(对异常进行重新封装)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.#ctor">
            <summary>
            初始化 SerializableException 类的新实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.#ctor(System.String,System.Exception)">
            <summary>
            初始化 SerializableException 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <param name="inner">导致当前异常的子异常。</param>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.#ctor(System.Exception)">
            <summary>
            初始化 SerializableException 类的新实例。
            </summary>
            <param name="ex">实例化时包容的异常对象的类型</param>
        </member>
        <member name="P:App.FunctionLibrary.SerializableException.Message">
            <summary>
            获取描述当前异常的消息。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializableException.StackTrace">
            <summary>
            获取调用堆栈上直接帧的字符串表示形式。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializableException.Thrower">
            <summary>
            获取异常的类型(当使用异常实例化当前对象时表示类型为实例化时使用的异常类型，否则表示本实例的异常类型 SerializableException)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializableException.TargetSite">
            <summary>
            获取引发当前异常的方法。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializableException.InnerException">
            <summary>
            获取导致当前异常的 SerializableException 实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.ToException">
            <summary>
            生成抛出的源异常。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.targetSiteString">
            <summary>
            生成TargetSite字符串表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.targetSiteParse(System.String)">
            <summary>
            字符串解析TargetSite对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.App#FunctionLibrary#ISerializable#Serializeing(System.Func{System.String,System.String})">
            <summary>
            当前异常对象序列化为序列化元素
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.App#FunctionLibrary#ISerializable#Deserializing(App.FunctionLibrary.SerializationElement,System.Func{System.String,System.String})">
            <summary>
            序列化元素反序列化为当前异常对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 SerializableException 类的新实例。
            </summary>
            <param name="info">它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.SerializableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用于异常序列化的信息设置
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SerializationElement">
            <summary>
            序列化节点
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.SerializationElement.Elements">
            <summary>
            子元素列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializationElement.#ctor(App.FunctionLibrary.SerializationElement[])">
            <summary>
            序列化节点
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializationElement.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializationElement.Name">
            <summary>
            获取元素的限定名。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializationElement.Value">
            <summary>
            获取或设置元素的值(如果非值类型则为null)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializationElement.DeclareType">
            <summary>
            元素的定义类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializationElement.RuntimeType">
            <summary>
            元素的实例类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializationElement.Member">
            <summary>
            对象类型的数据成员信息(用于赋值时不重复解析类成员)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializationElement.Add(App.FunctionLibrary.SerializationElement)">
            <summary>
            增加子元素
            </summary>
            <param name="element">需要增加的子元素</param>
        </member>
        <member name="M:App.FunctionLibrary.SerializationElement.AddRange(App.FunctionLibrary.SerializationElement[])">
            <summary>
            增加子元素列表
            </summary>
            <param name="elements">需要增加的子元素列表</param>
        </member>
        <member name="M:App.FunctionLibrary.SerializationElement.Remove(App.FunctionLibrary.SerializationElement)">
            <summary>
            移除子元素
            </summary>
            <param name="element">需要移除的子元素</param>
        </member>
        <member name="M:App.FunctionLibrary.SerializationElement.RemoveRange(App.FunctionLibrary.SerializationElement[])">
            <summary>
            移除子元素列表
            </summary>
            <param name="elements">需要移除的子元素列表</param>
        </member>
        <member name="P:App.FunctionLibrary.SerializationElement.Count">
            <summary>
            元素数
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializationElement.Item(System.Int32)">
            <summary>
            获取子元素列表中指定索引的子元素
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerializationElement.Item(System.String)">
            <summary>
            获取子元素列表中指定元素名称的子元素
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerializationElement.ToString">
            <summary>
            字符串表达式
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SimpleSerializer">
            <summary>
            Simple 简单结构紧凑式数据交换格式序列化处理器(适用于结构相对简单固定的大数据量)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SimpleSerializer.EscapeCharacters">
            <summary>
            特殊字符转义集合
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SimpleSerializer.SerializeElement(App.FunctionLibrary.SerializationElement)">
            <summary>
            元素序列化
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SimpleSerializer.DeserializeElement(System.Type,System.String)">
            <summary>
            元素反序列化
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SimpleSerializer.deserializeRecursion(App.FunctionLibrary.SimpleSerializer.SimpleSchemaItem,System.String)">
            <summary>
            反序列化递归函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SimpleSerializer.trimQuotes(System.String)">
            <summary>
            去除开始和结尾可能存在的花括号
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SimpleSerializer.parseSchema(System.String)">
            <summary>
            解析结构
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SimpleSerializer.SimpleSchemaItem">
            <summary>
            简单数据格式架构信息实体
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.SimpleSerializer.SimpleSchemaItem.IsValueType">
            <summary>
            是否为值类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.SimpleSerializer.SimpleSchemaItem.IsArray">
            <summary>
            是否为数组
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.SimpleSerializer.SimpleSchemaItem.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.SimpleSerializer.SimpleSchemaItem.Name">
            <summary>
            字段或属性名称
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.SimpleSerializer.SimpleSchemaItem.Type">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SimpleSerializer.SimpleSchemaItem.Schemas">
            <summary>
            包含的子架构列表
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SoapSerializer">
            <summary>
            Simple Object Access Protocol简单对象访问协议格式序列化处理器。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SoapSerializer.SoapFormatter">
            <summary>
            Soap串行化操作对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.SoapFormatter.#cctor">
            <summary>
            初始化SOAP序列化处理器
            </summary>  
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.SoapFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            将对象或具有指定根的对象图形序列化为给定的 System.IO.Stream。
            </summary>
            <param name="m">流，格式化程序将要序列化的数据置于其中。</param>
            <param name="g">要序列化的对象或对象图形的根。将自动序列化此根对象的所有子对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.SoapFormatter.Deserialize(System.IO.Stream)">
            <summary>
            反序列化所提供流中的数据并重新组成对象图形。
            </summary>
            <param name="m">包含要反序列化的数据的流。</param>
        </member>
        <member name="P:App.FunctionLibrary.SoapSerializer.StrongNaming">
            <summary>
            序列化的结果是否强命名类型(缺省为 true)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.Serialize(System.Object)">
            <summary>
            对象串行化
            </summary>
            <param name="obj">需要进行串行化的对象实例。</param>
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.SerializeToString(System.Object)">
            <summary>
            对象串行化
            </summary>
            <param name="obj">需要进行串行化的对象实例。</param>
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.Deserialize(System.Byte[])">
            <summary>
            对象反串行化
            </summary>
            <param name="serialized">串行化的对象表达文本字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.Deserialize``1(System.Byte[])">
            <summary>
            对象反串行化
            </summary>
            <typeparam name="T">反串行化后的对象类型(如果类型不正确返回 Nothing)。</typeparam>
            <param name="serialized">序列化的对象文本字符串。</param>
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.Deserialize(System.String)">
            <summary>
            对象反串行化
            </summary>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.Deserialize(System.Type,System.String)">
            <summary>
            对象反串行化
            </summary>
            <param name="type">反串行化的对象类型。</param>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.SoapSerializer.Deserialize``1(System.String)">
            <summary>
            对象反串行化
            </summary>
            <typeparam name="T">反串行化后的对象类型。</typeparam>
            <param name="serialized">对象串行化的字符串表达式。</param>
        </member>
        <member name="T:App.FunctionLibrary.XmlSerializer">
            <summary>
            eXtensible Markup Language 可扩展的标记语言格式序列化处理器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlSerializer.Serialize(System.Object)">
            <summary>
            对对象实例进行Xml格式序列化
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlSerializer.Serialize(System.Object,System.Boolean,System.Boolean)">
            <summary>
            对对象实例进行Xml格式序列化
            </summary>
            <param name="obj">进行Xml格式序列化的对象实例</param>
            <param name="declarable">是否包含Xml文档头部的声明部分</param>
            <param name="discardEmpty">是否丢弃空节点,同时丢弃注释和空白行。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlSerializer.SerializeElement(App.FunctionLibrary.SerializationElement)">
            <summary>
            元素序列化
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlSerializer.DeserializeElement(System.Type,System.String)">
            <summary>
            元素反序列化
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.MSG">
            <summary>
            Windows消息结构体
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MSG.hwnd">
            <summary>
            接受消息的窗口句柄
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MSG.message">
            <summary>
            消息标识符
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MSG.wParam">
            <summary>
            32位附加信息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MSG.lParam">
            <summary>
            32位附加信息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MSG.time">
            <summary>
            消息创建的时间 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MSG.pt">
            <summary>
            消息创建时鼠标在屏幕坐标系中的位置
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.POINT.ToPoint">
            <summary>
            输出为坐标对象
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.PrinterDefaults">
            <summary>
            打印机默认值结构
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SYSTEMTIME">
            <summary>
            系统时间
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.XmlArrtibList">
            <summary>
            Xml属性列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.CopyTo(App.FunctionLibrary.XmlAttrib[],System.Int32)">
            <summary>
            从目标数组的指定索引处开始将整个列表复制到兼容的一维 System.Array。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlArrtibList.Count">
            <summary>
            获取属性列表中实际包含的元素数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.Clear">
            <summary>
            从属性列表中移除所有属性。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlArrtibList.IsReadOnly">
            <summary>
            属性列表是否为只读。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.Contains(App.FunctionLibrary.XmlAttrib)">
            <summary>
            确定属性列表中是否存在指定的属性。
            </summary>
            <param name="attrib">搜索的Xml属性。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.IndexOf(App.FunctionLibrary.XmlAttrib)">
            <summary>
            获取Xml属性在属性列表中的索引位置。
            </summary>
            <param name="item">Xml属性</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.Add(App.FunctionLibrary.XmlAttrib)">
            <summary>
            在属性列表的末尾最近新属性
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.Add(System.String,System.Object)">
            <summary>
            在属性列表中新增属性
            </summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.AddRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.XmlAttrib})">
            <summary>
            将指定的Xml属性集合元素添加到Xml属性列表的末尾。
            </summary>
            <param name="attribs">新增的Xml属性元素集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.AddRange(App.FunctionLibrary.XmlAttrib[])">
            <summary>
            将指定的Xml属性集合元素添加到Xml属性列表的末尾。
            </summary>
            <param name="attribs">新增的Xml属性元素集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.Insert(System.Int32,App.FunctionLibrary.XmlAttrib)">
            <summary>
            在属性列表中指定的索引位置新增属性
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.Insert(System.Int32,System.String,System.Object)">
            <summary>
            在属性列表中的指定索引位置新增属性
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{App.FunctionLibrary.XmlAttrib})">
            <summary>
            在属性列表的指定索引位置插入属性集合元素。
            </summary>
            <param name="index">从零开始的索引。</param>
            <param name="attribs">属性元素集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.Remove(App.FunctionLibrary.XmlAttrib)">
            <summary>
            从属性列表中移除指定的属性
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.RemoveAt(System.Int32)">
            <summary>
            从属性列表中移除指定索引位置处的Xml属性。
            </summary>
            <param name="index">从0开始的索引位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.Remove(System.String)">
            <summary>
            在属性列表中移除指定名称的属性
            </summary>
            <param name="name">指定移除的属性名称</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.RemoveRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.XmlAttrib})">
            <summary>
            从属性列表中移除属性集合元素。
            </summary>
            <param name="attribs">移除的属性集合元素</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlArrtibList.Item(System.String,System.Boolean)">
            <summary>
            检索给定属性限定名的Xml属性(如果未查询到属性限定名时自动创建该属性)。
            </summary>
            <param name="name">属性限定名</param>
            <param name="ignorCase">属性限定名是否忽略大小写检索</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlArrtibList.Item(System.Int32)">
            <summary>
            检索给定属性索引的Xml属性(如果属性索引不合法时自动创建该属性)。
            </summary>
            <param name="index">从0开始的索引位置。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.ToString">
            <summary>
            返回表示当前对象的浅表字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.ToXml(System.Boolean)">
            <summary>
            返回Xml属性列表的字符串表达式。
            </summary>
            <param name="discardblank">是的丢弃空值属性</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.Contains(System.String)">
            <summary>
            属性列表中是否保护指定名称的属性。
            </summary>
            <param name="name">属性名称</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.ToXml(System.Text.StringBuilder,System.Boolean)">
            <summary>
            输出Xml节点属性字符串表达式
            </summary>
            <param name="builder">字符串生成器</param>
            <param name="discardblank">是否丢弃空值属性</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlArrtibList.ToArray">
            <summary>
            Xml属性列表输出为Xml属性数组。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.XmlAttrib">
            <summary>
            Xml属性
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlAttrib.#ctor(System.String,System.Object)">
            <summary>
            实例化Xml属性
            </summary>
            <param name="name">属性限定名</param>
            <param name="value">属性表示值</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlAttrib.Name">
            <summary>
            获取属性的限定名。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlAttrib.Value">
            <summary>
            获取或设置属性表示的值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlAttrib.Values">
            <summary>
            获取属性表示的值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlAttrib.HasValue">
            <summary>
            是否存在属性值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlAttrib.Owner">
            <summary>
            属性归属的节点
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlAttrib.ToString">
            <summary>
            返回表示当前对象的浅表字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlAttrib.ToXml(System.Boolean)">
            <summary>
            Xml属性的字符串表达式
            </summary>
            <param name="discardblank">是否丢弃空值属性</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlAttrib.Remove">
            <summary>
            从属性列表中移除当前属性。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlAttrib.Parse(System.String,System.String)">
            <summary>
            由名值对儿表达式解析为Xml属性
            </summary>
            <param name="xmls">名值对儿表达式</param>
            <param name="delimiter">名值对儿的定界符</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlAttrib.Parse(App.FunctionLibrary.Pair)">
            <summary>
            由名值对儿解析为Xml属性
            </summary>
            <param name="pair">名值对儿</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlAttrib.op_Implicit(App.FunctionLibrary.XmlAttrib)~System.String">
            <summary>
            属性隐形转换为属性值
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.XmlDocument">
            <summary>
            XML(eXtensible Markup Language)可扩展的标记语言文档解析器
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.XmlDocument.VirtualNode">
            <summary>
            文档虚根
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.#ctor">
            <summary>
            初始化一个默认的Xml空文档实例。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.#ctor(App.FunctionLibrary.XmlNode)">
            <summary>
            由Xml文档的根节点初始化Xml文档实例。
            </summary>
            <param name="root">Xml根节点</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.#ctor(System.String)">
            <summary>
            由Xml格式字符串表达式初始化Xml文档实例。
            </summary>
            <param name="xmls">Xml格式字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            由Xml文档数据流实例化Xml文档实例。
            </summary>
            <param name="reader">Xml文档数据流</param>
            <param name="encoding">编码字符集(默认:UTF-8)</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.#ctor(System.Byte[],System.Text.Encoding)">
            <summary>
            由Xml文档字节流实例化Xml文档实例。
            </summary>
            <param name="bytes">Xml文档字节流</param>
            <param name="encoding">编码字符集(默认:UTF-8)</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.#ctor(App.FunctionLibrary.Filer)">
            <summary>
            由Xml文件加载Xml文档。
            </summary>
            <param name="xmlfile">Xml文档文件。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.#ctor(App.FunctionLibrary.Filer,System.String)">
            <summary>
            实例化Xml文档，如文档不存在使用根节点名称创建新文档。
            </summary>
            <param name="xmlfile">Xml文档</param>
            <param name="rootname">根节点名称</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.#ctor(System.String,System.String)">
            <summary>
            由Json格式字符实例化Xml文档实例。
            </summary>
            <param name="json">Json格式表达式字符串</param>
            <param name="root">文档根节点名称</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.skipWhitespace(System.String,System.Int32@)">
            <summary>
            忽略空白字符
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Create(System.String)">
            <summary>
            创建只有根节点的空文档
            </summary>
            <param name="root">根节点名称</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Create(System.String,App.FunctionLibrary.XmlNode[])">
            <summary>
            创建只有根节点的空文档
            </summary>
            <param name="root">根节点名称</param>
            <param name="nodes">根节点的子节点集合</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Create(System.String,App.FunctionLibrary.XmlAttrib[])">
            <summary>
            创建只有根节点的空文档
            </summary>
            <param name="root">根节点名称</param>
            <param name="attribs">根节点的属性集合</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Create(System.String,App.FunctionLibrary.XmlElement[])">
            <summary>
            创建只有根节点的空文档
            </summary>
            <param name="root">根节点名称</param>
            <param name="elements">根节点的子节点和属性集合</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlDocument.Root">
            <summary>
            Xml文档的根节点
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlDocument.Declaration">
            <summary>
            Xml文档的声明
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlDocument.Attribs">
            <summary>
            Xml文档根节点属性。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlDocument.IsEmpty">
            <summary>
            判断当前Xml文档是否为空文档(无根节点、无注释节点)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.ToString">
            <summary>
            返回表示当前对象的浅表字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.ToXml(System.Boolean,System.Boolean)">
            <summary>
            输出格式化的Xml文档
            </summary>
            <param name="declarable">是否包括文档头部的声明部分</param>
            <param name="discardblank">是否丢弃空节点,同时丢弃注释和空白行。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.ToXml(System.String,System.String)">
            <summary>
            输出格式化的Xml文档
            </summary>
            <param name="version">文档版本</param>
            <param name="encoding">文档字符集</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.ToJson">
            <summary>
            输出Json格式字符串表达式。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Save(System.String,System.Boolean)">
            <summary>
            Xml文档保存为文件
            </summary>
            <param name="fileName">文件完全限定名</param>
            <param name="discardblank">是否丢弃空节点,同时丢弃注释和空白行。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Write(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Xml文档写入到数据流中。
            </summary>
            <param name="writer">Xml文档写入数据流</param>
            <param name="encoding">编码字符集(默认:UTF-8)</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Write(System.String)">
            <summary>
            Xml文档写入指明文件中。
            </summary>
            <param name="fileName">写入Xml文档的文件完全限定名称。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Find(System.String[])">
            <summary>
            在Xml文档中查找符合名称组条件的第一个子节点(忽略大小写)。
            </summary>
            <param name="names">搜索的子节点名称组(忽略大小写,忽略根节点)</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Find(System.Predicate{App.FunctionLibrary.XmlNode})">
            <summary>
            在Xml根节点的子节点集合中查找第一个符合条件的子节点(忽略大小写,未找到时返回空节点 XmlNode.Empty)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.FindAll(System.String[])">
            <summary>
            在Xml文档中查找所有符合名称组条件的子节点(忽略大小写)。
            </summary>
            <param name="names">搜索的子节点名称组(忽略大小写,忽略根节点)</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.FindAll(System.Predicate{App.FunctionLibrary.XmlNode})">
            <summary>
            在子节点集合中查找所有符合条件的子节点组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.FindCreate(System.String[])">
            <summary>
            在Xml文档中查找符合名称组条件的第一个子节点,如果未找到子节点时则自动创建该节点(忽略大小写)。
            </summary>
            <param name="names">搜索的子节点名称组(忽略大小写,忽略根节点)</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.ForEach(System.Action{App.FunctionLibrary.XmlNode})">
            <summary>
            在Xml文档根节点的子节点集合中循环枚子节点。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.Formatted(System.String)">
            <summary>
            格式化Xml文档。
            </summary>
            <param name="unformatted">需要格式化的Xml文档。</param>
        </member>
        <member name="F:App.FunctionLibrary.XmlDocument.XmlEscapeDict">
            <summary>
            Xml特殊标记字符转义
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.escaping(System.String,System.Boolean)">
            <summary>
            转义Xml文档的标记字符
            </summary>
            <param name="value">需要转义的Xml文档字符串</param>
            <param name="cdata">是否作为CDATA块进行转义(属性值中字符串不允许按CDATA块进行转义)。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.unescaping(System.String)">
            <summary>
            反转义Xml文档的标记字符
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.summary(System.String,System.Int32)">
            <summary>
            获取字符串的摘要字符串。
            </summary>
            <param name="value">处理摘要的字符串</param>
            <param name="lineCount">获取摘要的字符串行数</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlDocument.indent(System.Int32,System.Int32)">
            <summary>
            缩进字符串
            </summary>
            <param name="level">缩进的级别</param>
            <param name="count">缩进占用的空格数目</param>
        </member>
        <member name="T:App.FunctionLibrary.XmlNode">
            <summary>
            Xml节点
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.#ctor(System.String)">
            <summary>
            实例化Xml节点(空节点请使用 XmlNode.Empty)。
            </summary>
            <param name="name">节点限定名</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.#ctor(System.String,System.String)">
            <summary>
            实例化Xml节点(空节点请使用 XmlNode.Empty)。
            </summary>
            <param name="name">节点限定名</param>
            <param name="value">节点表示的值</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.#ctor(System.String,System.String,App.FunctionLibrary.XmlAttrib[])">
            <summary>
            实例化Xml节点(空节点请使用 XmlNode.Empty)。
            </summary>
            <param name="name">节点限定名</param>
            <param name="value">节点表示的值</param>
            <param name="attribs">节点属性组。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.#ctor(System.String,App.FunctionLibrary.XmlAttrib[])">
            <summary>
            实例化包含节点属性的Xml节点。
            </summary>
            <param name="name">节点限定名。</param>
            <param name="attribs">节点属性组。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.#ctor(System.String,App.FunctionLibrary.XmlNode[])">
            <summary>
            实例化包含子节点的Xml节点。
            </summary>
            <param name="name">节点限定名。</param>
            <param name="nodes">子节点列表。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.#ctor(System.String,App.FunctionLibrary.XmlElement[])">
            <summary>
            实例化包含子节点的Xml节点。
            </summary>
            <param name="name">节点限定名。</param>
            <param name="elements">属性或子节点列表。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.#ctor(System.String,App.FunctionLibrary.XmlNodeType)">
            <summary>
            实例化Xml特殊节点。
            </summary>
            <param name="name">节点限定名</param>
            <param name="nodeType">节点类型</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.#ctor(App.FunctionLibrary.XmlNodeType,System.String)">
            <summary>
            实例化Xml特殊节点。
            </summary>
            <param name="nodeType">节点类型</param>
            <param name="value">节点值</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Name">
            <summary>
            获取节点的限定名。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Value">
            <summary>
            获取或设置节点的值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.NodeType">
            <summary>
            获取或设置节点的类型。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Values">
            <summary>
            获取节点的值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Nodes">
            <summary>
            获取节点的所有子节点。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Item(System.String,System.Boolean)">
            <summary>
            获取指定属性名称的属性值。
            </summary>
            <param name="name">属性名称</param>
            <param name="ignorCase">是否忽略属性名称大小写</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Item(System.String,System.String,System.Boolean)">
            <summary>
            获取指定属性名称的子节点属性值。
            </summary>
            <param name="name">属性名称名称</param>
            <param name="defaultValue">属性值默认值</param>
            <param name="ignorCase">是否忽略属性名称大小写</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Attribs">
            <summary>
            获取节点的所有属性。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.HasNodes">
            <summary>
            节点是否包含有Xml子节点(不包括注释和空白节点)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.HasAttribs">
            <summary>
            节点是否包含属性。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.HasAttrib(System.String)">
            <summary>
            节点是否包含指定名称的属性。
            </summary>
            <param name="name">指定的属性名称</param> 
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.HasValue">
            <summary>
            节点是否存在节点值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Level">
            <summary>
            相对根节点的级数(根节点为0)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.IsRoot">
            <summary>
            当前节点是否为根节点。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Indent">
            <summary>
            获取当前节点的缩进字符。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.IsEmpty">
            <summary>
            是否为空节点
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNode.Empty">
            <summary>
            Xml空节点。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.ToString">
            <summary>
            返回表示当前对象的浅表字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.ToXml(System.Boolean)">
            <summary>
            输出Xml节点的Xml格式字符表达式。
            </summary>
            <param name="discardblank">是否丢弃空节点,同时丢弃注释和空白行。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.ToXml(System.Text.StringBuilder,System.Boolean)">
            <summary>
            输出Xml节点的Xml格式字符表达式。
            </summary>
            <param name="builder">字符串生成器</param>
            <param name="discardblank">是否丢弃空节点,同时丢弃注释和空白行。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.ToJson">
            <summary>
            输出Xml子节点的Json格式字符串表达式。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Parse(App.FunctionLibrary.Pair{App.FunctionLibrary.Pair{System.Int32}}[],App.FunctionLibrary.StringTransfer)">
            <summary>
            由Xml文档解析节点
            </summary>
            <param name="pairs">节点的元素对儿</param>
            <param name="transfer">文档转义器</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.parseAttribs(System.String[],App.FunctionLibrary.StringTransfer)">
            <summary>
            解析节点属性
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.FindAll(System.String[])">
            <summary>
            在节点中查找所有符合名称组条件的子节点(忽略大小写)。
            </summary>
            <param name="names">搜索的子节点名称组(忽略大小写)</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.FindAll(System.Predicate{App.FunctionLibrary.XmlNode})">
            <summary>
            在子节点集合中查找所有符合条件的子节点组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Find(System.String[])">
            <summary>
            在节点中查找符合名称组条件的第一个子节点(忽略大小写,未找到时返回空节点 XmlNode.Empty)。
            </summary>
            <param name="names">搜索的子节点名称组(忽略大小写)</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Find(System.Predicate{App.FunctionLibrary.XmlNode})">
            <summary>
            在子节点集合中查找第一个符合条件的子节点(忽略大小写,未找到时返回空节点 XmlNode.Empty)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.FindCreate(System.String[])">
            <summary>
            在节点中查找符合名称组条件的第一个子节点,如果未找到子节点时则自动创建该节点(忽略大小写)。
            </summary>
            <param name="names">搜索的子节点名称组(忽略大小写)</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.ForEach(System.Action{App.FunctionLibrary.XmlNode})">
            <summary>
            循环枚举节点的子节点集合。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Remove">
            <summary>
            从父节点集合中移除当前节点。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Remove(System.Int32)">
            <summary>
            从子节点列表中移除指定索引位置处的Xml子节点。
            </summary>
            <param name="index">从0开始的子节点索引。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Remove(App.FunctionLibrary.XmlNode)">
            <summary>
            在子节点列表中移除指定的子节点
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Remove(App.FunctionLibrary.XmlAttrib)">
            <summary>
            移除指定的节点属性
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Remove(System.String)">
            <summary>
            移除指定名称的节点属性
            </summary>
            <param name="attribName">指定移除的属性名称</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Remove(System.Collections.Generic.IEnumerable{App.FunctionLibrary.XmlNode})">
            <summary>
            从节点列表中移除节点集合元素。
            </summary>
            <param name="nodes">移除的节点集合元素</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Clear">
            <summary>
            从子节点列表中移除所有子节点。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Insert(System.Int32,App.FunctionLibrary.XmlNode)">
            <summary>
            在子节点列表的末尾追加新子节点
            </summary>
            <param name="node">新增的子节点。</param>
            <param name="index">从零开始的索引。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Insert(System.Int32,System.String,System.String)">
            <summary>
            在子节点列表的末尾追加新子节点
            </summary>
            <param name="name">子节点限定名</param>
            <param name="value">子节点表示的值</param>
            <param name="index">从零开始的索引。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Insert(System.Int32,System.String,App.FunctionLibrary.XmlAttrib[])">
            <summary>
            在子节点列表的末尾追加新子节点
            </summary>
            <param name="name">子节点限定名</param>
            <param name="attribs">子节点属性组</param>
            <param name="index">从零开始的索引。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{App.FunctionLibrary.XmlNode})">
            <summary>
            在节点列表的指定索引位置插入节点集合元素。
            </summary>
            <param name="index">从零开始的索引。</param>
            <param name="nodes">节点元素集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Add(App.FunctionLibrary.XmlNode)">
            <summary>
            在子节点列表的末尾追加新子节点
            </summary>
            <param name="node">新增的子节点。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Add(System.String,System.String)">
            <summary>
            在子节点列表的末尾追加新子节点
            </summary>
            <param name="name">子节点限定名</param>
            <param name="value">子节点表示的值</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Add(System.String,App.FunctionLibrary.XmlAttrib[])">
            <summary>
            在子节点列表的末尾追加新子节点
            </summary>
            <param name="name">子节点限定名</param>
            <param name="attribs">子节点属性组</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.AddRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.XmlNode})">
            <summary>
            将指定的Xml节点集合元素添加到子节点列表的末尾。
            </summary>
            <param name="nodes">新增的Xml子节点集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.AddRange(App.FunctionLibrary.XmlNode[])">
            <summary>
            将指定的Xml节点集合元素添加到子节点列表的末尾。
            </summary>
            <param name="nodes">新增的Xml子节点集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.op_Equality(App.FunctionLibrary.XmlNode,App.FunctionLibrary.XmlNode)">
            <summary>
            判断两个Xml节点实例是否相同(NodeEmtpy作为null)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.op_Inequality(App.FunctionLibrary.XmlNode,App.FunctionLibrary.XmlNode)">
            <summary>
            判断两个Xml节点实例是否不相同(NodeEmtpy作为null)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Equals(App.FunctionLibrary.XmlNode)">
            <summary>
            判断当前Xml节点是否和指明节点相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.Equals(System.Object)">
            <summary>
            相等判断
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.GetHashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.op_Implicit(System.Xml.XmlNode)~App.FunctionLibrary.XmlNode">
            <summary>
            System.Xml.XmlNode 转化为 App.FunctionLibrary.XmlNode。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNode.op_Implicit(App.FunctionLibrary.XmlNode)~System.String">
            <summary>
            App.FunctionLibrary.XmlNode 隐形转换为节点值表达式
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.XmlNodeList">
            <summary>
            Xml节点列表
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.XmlNodeList.owner">
            <summary>
            列表归属节点
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNodeList.CoreList">
            <summary>
            包含注释和空白节点的列表。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.XmlNodeList.NodeList">
            <summary>
            不包括注释和空白节点的列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.#ctor(App.FunctionLibrary.XmlNode)">
            <summary>
            初始化节点列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举器(不包括注释和空白节点)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.GetEnumerator">
            <summary>
            获取枚举器(不包括注释和空白节点)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlNodeList.Count">
            <summary>
            获取节点列表中包含的节点数(不包括注释和空白节点)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.Clear">
            <summary>
            从节点列表中移除所有节点。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.CopyTo(App.FunctionLibrary.XmlNode[],System.Int32)">
            <summary>
            将当前节点列表复制到目标数组中(不包括注释和空白节点)。
            </summary>
            <param name="array">复制的目标数组。</param>
            <param name="arrayIndex">从零开始的索引，将在此处开始复制。</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlNodeList.IsReadOnly">
            <summary>
            节点列表是否为只读。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.Contains(App.FunctionLibrary.XmlNode)">
            <summary>
            确定节点列表中是否存在指定的节点。
            </summary>
            <param name="node">搜索的Xml节点。</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlNodeList.Item(System.Int32)">
            <summary>
            检索给定索引处的节点(检索失败返回 null)。
            </summary>
            <param name="index">节点列表中从零开始的索引。</param>
        </member>
        <member name="P:App.FunctionLibrary.XmlNodeList.Item(System.String,System.Boolean)">
            <summary>
            检索给定节点名称的所有节点列表
            </summary>
            <param name="name">节点名称</param>
            <param name="ignorCase">按节点名称检索时是否忽略大小写</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.IndexOf(App.FunctionLibrary.XmlNode)">
            <summary>
            获取Xml节点在节点列表中的索引位置(不包括注释和空白节点)。
            </summary>
            <param name="node">Xml节点</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.ToArray">
            <summary>
            Xml节点列表输出为Xml节点数组(不包括注释和空白节点)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.ToString">
            <summary>
            返回表示当前对象的浅表字符串。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.ToXml(System.Boolean)">
            <summary>
            返回Xml节点列表的字符串表达式。
            </summary>
            <param name="discardblank">是否丢弃空节点,同时丢弃注释和空白行。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.ToXml(System.Text.StringBuilder,System.Boolean)">
            <summary>
            输出Xml节点的Xml格式字符表达式。
            </summary>
            <param name="builder">字符串生成器</param>
            <param name="discardblank">是否丢弃空节点,同时丢弃注释和空白行。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.Add(App.FunctionLibrary.XmlNode)">
            <summary>
            在节点列表的末尾追加新节点
            </summary>
            <param name="node">新增的节点。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.AddRange(System.Collections.Generic.IEnumerable{App.FunctionLibrary.XmlNode})">
            <summary>
            将指定的Xml节点集合元素添加到Xml节点列表的末尾。
            </summary>
            <param name="nodes">新增的Xml节点集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.AddRange(App.FunctionLibrary.XmlNode[])">
            <summary>
            将指定的Xml节点集合元素添加到Xml节点列表的末尾。
            </summary>
            <param name="nodes">新增的Xml节点集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.Add(System.String,System.String)">
            <summary>
            在节点列表的末尾追加新节点
            </summary>
            <param name="name">节点限定名</param>
            <param name="value">节点表示的值</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.Add(System.String,App.FunctionLibrary.XmlAttrib[])">
            <summary>
            在节点列表的末尾追加新节点
            </summary>
            <param name="name">节点限定名</param>
            <param name="attribs">节点属性组</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.Insert(System.Int32,App.FunctionLibrary.XmlNode)">
            <summary>
            在节点列表的指定索引位置插入新节点
            </summary>
            <param name="index">从零开始的索引。</param>
            <param name="node">插入的新节点。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.Insert(System.Int32,System.String,System.String)">
            <summary>
            在节点列表的指定索引位置插入新节点
            </summary>
            <param name="name">节点限定名</param>
            <param name="value">节点表示的值</param>
            <param name="index">从零开始的索引。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{App.FunctionLibrary.XmlNode})">
            <summary>
            在节点列表的指定索引位置插入节点集合元素。
            </summary>
            <param name="index">从零开始的索引。</param>
            <param name="nodes">节点元素集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.Remove(App.FunctionLibrary.XmlNode)">
            <summary>
            在节点列表中移除指定的节点
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.RemoveAt(System.Int32)">
            <summary>
            从节点列表中移除指定索引位置处的Xml节点。
            </summary>
            <param name="index">从0开始的节点索引。</param>
        </member>
        <member name="M:App.FunctionLibrary.XmlNodeList.Remove(System.Collections.Generic.IEnumerable{App.FunctionLibrary.XmlNode})">
            <summary>
            从节点列表中移除节点集合元素。
            </summary>
            <param name="nodes">移除的节点集合元素</param>
        </member>
        <member name="T:App.FunctionLibrary.XmlAttribIndexer">
            <summary>
            属性值索引器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.XmlAttribIndexer.Item(System.String)">
            <summary>
            获取属性的值，如果值为空字符串返回默认值。
            </summary>
            <param name="default">返回默认属性值</param>
        </member>
        <member name="T:App.FunctionLibrary.AssemblyAttribute">
            <summary>
            程序集属性
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AssemblyAttribute.Company">
            <summary>
            获取公司名称信息。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AssemblyAttribute.Description">
            <summary>
            获取程序集说明信息。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AssemblyAttribute.Copyright">
            <summary>
            获取版权信息。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AssemblyAttribute.Title">
            <summary>
            获取程序集标题信息。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AssemblyAttribute.Trademark">
            <summary>
            获取商标信息。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.AssemblyAttribute.Product">
            <summary>
            获取产品名称信息。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DecimalConvert">
            <summary>
            各种特殊进制与十进制之间的转换对象，比如：20进制、100进制.....
            使用时首先设置进制的表示字符ExpressChar
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DecimalConvert.ExpressChars">
            <summary>
            返回或者设置特殊进制的表示字符串，例如：二进制为01，十六进制为0123456789ABCDEF
            </summary>
            <value>设置特殊进制的表示字符串</value>
            <returns>返回特殊进制的表示字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.DecimalConvert.#ctor(System.String)">
            <summary>
            实例化特殊进制转换对象
            </summary>
            <param name="expressChar">进制表示字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.DecimalConvert.#ctor(App.FunctionLibrary.CarryType)">
            <summary>
            实例化特殊进制转换对象
            </summary>
            <param name="carryType">进制类型</param>
        </member>
        <member name="M:App.FunctionLibrary.DecimalConvert.DecimalOf(System.String)">
            <summary>
            由特殊进制字符转换为十进制的数值并且返回
            </summary>
            <param name="express">特殊进制值字符串表达式</param>
            <returns>返回十进制数值</returns>
        </member>
        <member name="M:App.FunctionLibrary.DecimalConvert.ByDecimal(System.Int32)">
            <summary>
            由十进制数值转换为特殊进制值字符串表达式。
            </summary>
            <param name="nums">十进制数值</param>
            <returns>返回特殊进制值字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.DecimalConvert.ByDecimal(System.Int64)">
            <summary>
            由十进制数值转换为特殊进制值字符串表达式。
            </summary>
            <param name="nums">十进制数值</param>
            <returns>返回特殊进制值字符串</returns>
        </member>
        <member name="T:App.FunctionLibrary.PrinterStatus">
            <summary>
            打印机状态
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.Unknown">
            <summary>
            未知的打印状态
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.Ready">
            <summary>
            准备好
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.Paused">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.Error">
            <summary>
            打印错误
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.PendingDeletion">
            <summary>
            正在删除
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.PaperJam">
            <summary>
            卡纸
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.PaperOut">
            <summary>
            缺纸
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.ManualFeed">
            <summary>
            手动进纸
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.PageProblem">
            <summary>
            纸张问题
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.OffLine">
            <summary>
            离线脱机
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.IoActive">
            <summary>
            IO端口已激活
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.Busy">
            <summary>
            繁忙
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.Printing">
            <summary>
            正在打印
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.OutputBinFull">
            <summary>
            出纸盒已满
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.NotAvailable">
            <summary>
            不可用，无效
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.Waiting">
            <summary>
            等待
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.Processing">
            <summary>
            正在处理
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.Initializing">
            <summary>
            初始化中
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.WarmingUp">
            <summary>
            正在预热
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.TonerLow">
            <summary>
            碳粉不足
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.NoToner">
            <summary>
            无碳粉
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.PagePunt">
            <summary>
            当前页无法打印
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.UserIntervention">
            <summary>
            用户干预
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.OutOfMemory">
            <summary>
            内存溢出
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.DoorOpen">
            <summary>
            打印门未关闭
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.ServerUnknown">
            <summary>
            未知服务
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.PrinterStatus.PowerSave">
            <summary>
            禁用
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.WndProcHandler">
            <summary>
            Windows消息处理委托(返回true表示消息将被丢弃,否则返回false)。
            </summary>
            <param name="m">激活事件的Windows消息</param>
        </member>
        <member name="T:App.FunctionLibrary.CompletedEventHandler">
            <summary>
            线程结束时激活的事件
            </summary>
            <param name="sender">激活事件的线程</param> 
            <param name="e">事件句柄</param>
        </member>
        <member name="T:App.FunctionLibrary.ThreadEventHandler">
            <summary>
            线程执行事务时激活的事件(线程间操作数据非安全)
            </summary>
            <param name="sender">触发事件的线程</param>
            <param name="e">事件句柄</param>
        </member>
        <member name="T:App.FunctionLibrary.SocketReceivedEventHandler">
            <summary>
            接收到消息事件，启用端口侦听Listen时才触发此事件，此时Receive函数将失效。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DataReceivedEventHandler">
            <summary>
            串口接收到消息事件。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.MessageReceivedEventHandler">
            <summary>
            消息接收事件
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.MessageRegistEventHandler">
            <summary>
            消息注册事件
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ConnectedEventHandler">
            <summary>
            本机作为服务时远端计算机新连接建立时发生的事件。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DisconnectedEventHandler">
            <summary>
            本机作为服务时远端计算机连接关闭时发生的事件。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.CacherEventHandler">
            <summary>
            缓存器发生的事件
            </summary>
            <param name="sender">激活事件的缓存器</param>
        </member>
        <member name="T:App.FunctionLibrary.DbFactoryEventHandler">
            <summary>
            数据工厂事件
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.FormManager">
            <summary>
            子窗体管理工具
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.#ctor(System.Windows.Forms.Form)">
            <summary>
            实例化子窗体管理工具(自动边距)
            </summary>
            <param name="mainform">主框架窗体</param>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Padding)">
            <summary>
            实例化子窗体管理工具
            </summary>
            <param name="mainform">主框架窗体</param> 
            <param name="margin">子页面在主框架窗口中的边距</param>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
            实例化子窗体管理工具(自动边距)
            </summary>
            <param name="mainform">主框架窗体</param>
            <param name="homeform">主待机窗体</param> 
        </member>
        <member name="M:App.FunctionLibrary.FormManager.#ctor(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Windows.Forms.Padding)">
            <summary>
            实例化子窗体管理工具
            </summary>
            <param name="mainform">主框架窗体</param>
            <param name="homeform">主待机窗体</param>
            <param name="margin">子页面在主框架窗口中的边距</param>
        </member>
        <member name="P:App.FunctionLibrary.FormManager.MainForm">
            <summary>
            主框架窗体
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.MainFormAs``1">
            <summary>
            获取指定类型的主框架窗体
            </summary>
            <typeparam name="T">指定的主框架窗口类型</typeparam>
        </member>
        <member name="P:App.FunctionLibrary.FormManager.HomeForm">
            <summary>
            主待机窗体
            </summary> 
            <value>设置新主待机页面时将自动卸载其他的主待机页面。</value>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.HomeFormAs``1">
            <summary>
            获取指定类型的主待机窗体窗体
            </summary>
            <typeparam name="T">指定的主待机窗体类型</typeparam>
        </member>
        <member name="P:App.FunctionLibrary.FormManager.Margin">
            <summary>
            子页面在主框架窗口中的边距
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.FormManager.GetMargin">
            <summary>
            获取子页面在主框架窗口中的布局边距(由系统自动计算边距)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.GetClientRectangle">
            <summary>
            获取子页面在主框架窗口中的矩形的位置和大小。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.GetFormList(System.Boolean)">
            <summary>
            获取所有已经加载的子窗体列表。
            </summary>
            <param name="includeHomeForm">是否包括主待机窗口 HomeForm。</param>
        </member>
        <member name="P:App.FunctionLibrary.FormManager.CursorBusying">
            <summary>
            设置鼠标的指针图形为繁忙状态
            </summary>
            <value>True表示返回，False表示空闲。</value>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.GoHome">
            <summary>
            直接切换到主待机窗体，只通知子窗口关闭不强制终止。
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.FormManager.GoHome(System.Boolean)">
            <summary>
            返回到主待机窗体，同时卸载所有加载的子窗体。
            </summary>
            <param name="force">True表示强行卸载子窗体，False表示通知子窗口关闭。</param> 
        </member>
        <member name="M:App.FunctionLibrary.FormManager.Show(System.Windows.Forms.Form,System.Windows.Forms.Form[])">
            <summary>
             加载并显示子窗体实例(已经加载的窗口则激活该窗口)。
            </summary>
            <param name="showform">需要加载的子窗体</param>
            <param name="unloadforms">需要卸载的其他子窗体集</param> 
            <remarks>如果需要加载的窗口实例在子窗口列表中已经被加载，则返回已经被加载的子窗口实例，并且自动卸载需要加载的窗口实例。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.Show``1(``0@,System.Windows.Forms.Form[])">
             <summary>
            加载并显示子窗体实例(已经加载的窗口则激活并且传出该窗口实例)。
             </summary>
             <param name="showform">需要加载的子窗体</param>
             <param name="unloadforms">需要卸载的其他子窗体集</param> 
             <remarks>如果需要加载的窗口实例在子窗口列表中已经被加载，则返回已经被加载的子窗口实例，并且自动卸载需要加载的窗口实例。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.ShowDialog(System.Windows.Forms.Form)">
            <summary>
            加载模式子窗体
            </summary>
            <param name="showForm">需要加载的子窗体</param>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.ShowDialog(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
            加载模式子窗体
            </summary>
            <param name="showForm">需要加载的子窗体</param>
            <param name="owner">将拥有模式对话框的顶级窗口</param>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.Unload(System.Windows.Forms.Form[])">
            <summary>
            卸载子窗口
            </summary>
            <param name="unloadform">指明需要卸载的子窗口集合。</param>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.Unload(System.Boolean,System.Windows.Forms.Form[])">
            <summary>
            卸载子窗口
            </summary>
            <param name="force">强行卸载关闭子窗口，True表示强行卸载，False表示通知子窗口关闭。</param>
            <param name="unloadform">指明需要卸载的子窗口集合。</param>
        </member>
        <member name="P:App.FunctionLibrary.FormManager.ActivatedForm">
            <summary>
            当前被激活的最顶层子窗口
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.GetActivatedForm``1">
            <summary>
            获取指定类型的被激活的最顶层子窗口
            </summary>
            <typeparam name="T">指定的被激活的最顶层子窗口类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.Exists(System.Windows.Forms.Form)">
            <summary>
            指定的窗口是否已经被加载到子窗口列表中
            </summary>
            <param name="form">指定的窗口</param>
        </member>
        <member name="E:App.FunctionLibrary.FormManager.Load">
            <summary>
            子窗口加载事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.FormManager.Activated">
            <summary>
            子窗口被激活的事件
            </summary> 
        </member>
        <member name="E:App.FunctionLibrary.FormManager.Deactivate">
            <summary>
            子窗口丢失活动的事件
            </summary> 
        </member>
        <member name="E:App.FunctionLibrary.FormManager.FormClosing">
            <summary>
            子窗口关闭前的事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.FormManager.FormClosed">
            <summary>
            子窗口关闭后的事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.FormManager.SizeChanged">
            <summary>
            子窗口Size 属性改变时的事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.FormManager.VisibleChanged">
            <summary>
            子窗口的Visible 属性值更改时发生
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.ActivateFocused(System.Windows.Forms.Form)">
            <summary>
            设置指定的窗口显示出来并且调整到最前层激活并且获取到焦点。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.AddEventHandler_TopLevel(System.Windows.Forms.Form)">
            <summary>
            委托指定窗体的事件
            </summary>
            <param name="form">指定的子窗体</param>
        </member>
        <member name="M:App.FunctionLibrary.FormManager.IsDefaultIcon(System.Windows.Forms.Form)">
            <summary>
            判断窗口图标是否为系统默认的图标
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.IniParser">
            <summary>
            INI配置文件解析器
            <para>======================</para>
            <para>INI文件结构</para>
            <para>----------------------</para>
            <para>[Section1]</para>
            <para>KeyWord1 = "KeyValue1"</para>
            <para>KeyWord2 = "KeyValue2"</para>
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.Apis.GetPrivateProfileString(System.String,System.String,System.String,System.IntPtr,System.Int32,System.String)">
            <summary>
            获取键值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.Apis.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            设置键值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.Apis.WritePrivateProfileString(System.String,System.String,System.Int32,System.String)">
            <summary>
            重载设置键值
            </summary>
            <returns>非零表示成功，零表示失败</returns>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.Apis.GetPrivateProfileSection(System.String,System.IntPtr,System.Int32,System.String)">
            <summary>
            获取字段名称
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.Apis.WritePrivateProfileSection(System.String,System.String,System.String)">
            <summary>
            设置字段名称
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.Apis.WritePrivateProfileSection(System.String,System.Int32,System.String)">
            <summary>
            重载设置字段名称
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.Apis.GetPrivateProfileSectionNames(System.IntPtr,System.Int32,System.String)">
            <summary>
            获取字段名称集合
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.#ctor(System.String)">
            <summary>
            实例化INI解析器对象
            </summary>
            <param name="fileName">文本文件路径名称</param> 
        </member>
        <member name="T:App.FunctionLibrary.IniParser.KeyEntry">
            <summary>
            键实体
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.KeyEntry.Owner">
            <summary>
            当前键实体的归属键集合
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.KeyEntry.Name">
            <summary>
            键名
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.KeyEntry.Value">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.KeyEntry.Section">
            <summary>
            所属块
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.KeyEntry.KeyWord">
            <summary>
            键名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.KeyEntry.KeyValue">
            <summary>
            键值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.KeyEntry.Remove">
            <summary>
            从归属键集合中移除当前键实体
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.IniParser.KeyCollection">
            <summary>
            键集合
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.KeyCollection.IndexOf(System.String)">
            <summary>
            获取指定键名称的键值项索引。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.KeyCollection.Item(System.String)">
            <summary>
            获取指定键名称的键值项。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.KeyCollection.Item(System.Int32)">
            <summary>
            获取指定键索引的键值项。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.KeyCollection.Section">
            <summary>
            所属块
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.KeyCollection.RemoveAt(System.Int32)">
            <summary>
            删除指定键索引的键值项
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.KeyCollection.Remove(System.String)">
            <summary>
            删除指定键名称的键值项
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.KeyCollection.Remove(App.FunctionLibrary.IniParser.KeyEntry)">
            <summary>
            删除指定的键值项
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.KeyCollection.Add(System.String,System.String)">
            <summary>
            新增键值项
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.IniParser.SectionEntry">
            <summary>
            块实体
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.SectionEntry.Name">
            <summary>
            块名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.SectionEntry.Owner">
            <summary>
            块实体归属的块集合
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.SectionEntry.Keys">
            <summary>
            块内容纳的键值项集合
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.SectionEntry.Item(System.String)">
            <summary>
            获取指定键名称的键值项。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.SectionEntry.Item(System.Int32)">
            <summary>
            获取指定键索引的键值项。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.SectionEntry.Remove">
            <summary>
            从块集合中移除当前块实体
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.Item(System.String)">
            <summary>
            由块名称获取块信息
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.Sections">
            <summary>
            配置块集合
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.IniParser.SectionCollection">
            <summary>
            Ini配置文件块集合
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.SectionCollection.Add(App.FunctionLibrary.IniParser.SectionEntry)">
            <summary>
            新增块配置
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.SectionCollection.Add(System.String)">
            <summary>
            新增块配置
            </summary>
            <param name="name">块名称</param>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.SectionCollection.Remove(App.FunctionLibrary.IniParser.SectionEntry)">
            <summary>
            删除配置块并且删除块包含的所有键值项
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.SectionCollection.Remove(System.String)">
            <summary>
            删除配置块并且删除块包含的所有键值项
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.SectionCollection.RemoveAt(System.Int32)">
            <summary>
            删除配置块并且删除块包含的所有键值项
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.SectionCollection.IndexOf(System.String)">
            <summary>
            由块配置名称获取在块配置列表中的索引位置。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.SectionCollection.Item(System.Int32)">
            <summary>
            由块配置索引获取块配置信息
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.IniParser.SectionCollection.Item(System.String)">
            <summary>
            由块名称获取块信息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.TransferredFromCrLf(System.String)">
            <summary>
            字符串转义(从回车符号转换为转义字符)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.IniParser.TransferredToCrLf(System.String)">
            <summary>
            字符串转义(由转义字符转换为回车字符)
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Register">
            <summary>
            注册表管理器
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Register.originalAdmin">
            <summary>
            当前登录Windows的用户是否具有管理员权限。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Register.originalAccess">
            <summary>
            当前登录Windows的用户是否具有注册表的操作权限。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Register.rootKey">
            <summary>
            注册表根键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Register.defaultKey">
            <summary>
            当前操作的注册表键(实例化时键名路径指示的默认键)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Register.#ctor(App.FunctionLibrary.RootKey,System.String[])">
            <summary>
            实例化注册表管理器
            </summary>
            <param name="rootKey">根键</param>
            <param name="subkeyNames">默认子键名称路径</param>
        </member>
        <member name="M:App.FunctionLibrary.Register.#ctor(System.String,System.String)">
            <summary>
            实例化注册表管理器(应用程序)。
            </summary>
            <param name="appName">应用程序名称或项目名称。</param>
            <param name="section">应用程序的键值组名称。</param>
        </member>
        <member name="M:App.FunctionLibrary.Register.#ctor(System.String)">
            <summary>
            实例化注册表管理器(当前默认应用程序)。
            </summary>
            <param name="keyPaths">键名称路径表达式(\分割)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Register.GetRootType(System.String)">
            <summary>
            获取根键类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Register.GetKeyNames(System.String)">
            <summary>
            获取键名称组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Register.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Register.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Register.KeyValueIndexer">
            <summary>
            键值索引器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Register.KeyValueIndexer.Item(System.String)">
            <summary>
            获取或者设置默认键对象的指明键名的键值。
            </summary>
            <param name="keyName">相对于默认键对象的子键名路径</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.KeyValueIndexer.Item(System.String[])">
            <summary>
            获取或者设置默认键对象的子键名称路径的键值。
            </summary>
            <param name="subkeyNames">相对于默认键对象的子键名路径</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.KeyValueIndexer.Item(Microsoft.Win32.RegistryKey,System.String[])">
            <summary>
            获取或者设置指定键对象并且指明了该键的子键名称路径的键值。
            </summary>
            <param name="key">指定的键对象</param>
            <param name="subkeyNames">相对于键对象的子键名路径</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.KeyValueIndexer.Item(System.String,System.Object)">
            <summary>
            获取默认键对象的指明键名的键值。
            </summary>
            <param name="keyName">指明的键名</param>
            <param name="defaults">默认键值</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.KeyValueIndexer.Item(System.String[],System.Object)">
            <summary>
            获取默认键对象的子键名字路径的键值。
            </summary>
            <param name="subkeyNames">相对于默认键的子键名路径</param>
            <param name="defaults">默认键值</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.KeyValueIndexer.Item(Microsoft.Win32.RegistryKey,System.String[],System.Object)">
            <summary>
            获取指定键对象并且指明了该指定键的子键名字路径的键值。
            </summary>
            <param name="key">指定的键对象</param>
            <param name="subkeyNames">相对于键对象的子键名路径</param>
            <param name="defaults">默认键值</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.Value">
            <summary>
            注册表键值属性
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Register.Item(System.String)">
            <summary>
            获取或者设置默认键对象的指明键名的键值。
            </summary>
            <param name="keyName">相对于默认键对象的子键名路径</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.Item(System.String[])">
            <summary>
            获取或者设置默认键对象的子键名称路径的键值。
            </summary>
            <param name="subkeyNames">相对于默认键对象的子键名路径</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.Item(Microsoft.Win32.RegistryKey,System.String[])">
            <summary>
            获取或者设置指定键对象并且指明了该键的子键名称路径的键值。
            </summary>
            <param name="key">指定的键对象</param>
            <param name="subkeyNames">相对于键对象的子键名路径</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.Item(System.String,System.Object)">
            <summary>
            获取默认键对象的指明键名的键值。
            </summary>
            <param name="keyName">指明的键名</param>
            <param name="defaults">默认键值</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.Item(System.String[],System.Object)">
            <summary>
            获取默认键对象的子键名字路径的键值。
            </summary>
            <param name="subkeyNames">相对于默认键的子键名路径</param>
            <param name="defaults">默认键值</param>
        </member>
        <member name="P:App.FunctionLibrary.Register.Item(Microsoft.Win32.RegistryKey,System.String[],System.Object)">
            <summary>
            获取指定键对象并且指明了该指定键的子键名字路径的键值。
            </summary>
            <param name="key">指定的键对象</param>
            <param name="subkeyNames">相对于键对象的子键名路径</param>
            <param name="defaults">默认键值</param>
        </member>
        <member name="M:App.FunctionLibrary.Register.GetKeyValues(System.String[])">
            <summary>
            获取指定注册表键中子键名对应的键名/键值对。
            </summary>
            <param name="subkeyNames">相对于默认键的子键名路径</param>
        </member>
        <member name="M:App.FunctionLibrary.Register.GetKeyValues(Microsoft.Win32.RegistryKey,System.String[])">
            <summary>
            获取指定注册表键中子键名对应的键名/键值对。
            </summary>
            <param name="key">指定的注册表键。</param>
            <param name="subkeyNames">相对于键对象的子键名路径。</param>
        </member>
        <member name="M:App.FunctionLibrary.Register.Delete(System.String[])">
            <summary>
            删除指定的键对象。
            </summary>
            <param name="subkeyNames">相对于默认键的子键名路径。</param>
        </member>
        <member name="M:App.FunctionLibrary.Register.Delete(Microsoft.Win32.RegistryKey,System.String[])">
            <summary>
            删除指定的键对象。
            </summary>
            <param name="key">指定的键对象。</param>
            <param name="subkeyNames">相对于键对象的子键名路径。</param>
        </member>
        <member name="T:App.FunctionLibrary.SerialPort">
            <summary>
            SerialPort串行端口通讯模块
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            实例化串行通讯端口
            </summary>
            <param name="portName">端口号，默认为COM1。</param>
            <param name="baudRate">波特率</param>
            <param name="timeOut">超时时间：毫秒</param>
            <param name="endChar">字符串的终止字符(默认为vbCr回车符号)。</param>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits,System.Int32,System.String,System.Boolean)">
            <summary>
            实例化串行通讯端口
            </summary>
            <param name="portName">端口号(例如：COM1)</param>
            <param name="baudRate">波特率</param>
            <param name="dataBits">数据位</param>
            <param name="stopBits">停止位</param>
            <param name="parity">奇偶校验</param>
            <param name="timeOut">超时时间：毫秒</param>
            <param name="endChar">字符串的终止字符(默认为ASCII=13的回车符号)。</param>
            <param name="discardNull">在传输数据时是否忽略 Null/Nothing 字节(默认不忽略)。</param>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.PortName">
            <summary>
            通讯端口号，包括但不限于所有可用的 COM 端口(默认为 COM1)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.TimeOut">
            <summary>
            读取、写入端口数据的超时时间:毫秒。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.BaudRate">
            <summary>
            通讯端口的波特率。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.StopBits">
            <summary>
            每个字节的标准停止位数。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.DataBits">
            <summary>
            每个字节的标准数据位长度。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.Parity">
            <summary>
            奇偶校验检查协议。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.Tag">
            <summary>
            其他附注变量，对本对象没有实际的意义。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.EndChar">
            <summary>
            终止字符
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.DiscardNull">
            <summary>
            在传输数据时是否忽略 Null/Nothing 字节。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.Encoding">
            <summary>
            字符集编码方式。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.IsOpen">
            <summary>
            端口当前的打开状态
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.IsListening">
            <summary>
            端口是否处于侦听进行中
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.DtrEnable">
            <summary>
            获取或设置一个值，该值在串行通信过程中启用数据终端就绪 (DTR) 信号。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPort.RtsEnable">
            <summary>
            获取或设置一个值，该值指示在串行通信中是否启用请求发送 (RTS) 信号。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Open">
            <summary>
            打开通讯端口(原则谁打开谁关闭端口)
            </summary> 
            <returns>打开成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Close">
            <summary>
            关闭通讯端口(原则谁打开谁关闭端口)
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.TryOpen">
            <summary>
            尝试打开端口，如果能打开或者本对象已经打开返回 True，并且端口处于打开状态，否则返回 False。
            </summary>
            <returns>端口可以正常打开或者已经打开的返回True，否则返回False。</returns>
            <remarks>端口已经被其他程序或者对象占用的返回False。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Write(System.String)">
            <summary>
            写入数据到通讯端口(不改变先前的端口打开状态，如果不含有结束字符EncChar将自动附加结束字符到写入字符的末尾。)
            </summary>
            <param name="text">写入的文本字符串</param> 
            <returns>写入成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Write(System.Byte[])">
            <summary>
            写入数据到通讯端口(不改变先前的端口打开状态)
            </summary>
            <param name="buffer">写入的缓存字节数组</param> 
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Read">
            <summary>
            从通讯端口读取数据(不改变先前的端口打开状态)
            </summary>
            <returns>读取成功返回读取的文本字符串，否则返回空字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Read(System.String@)">
            <summary>
            从通讯端口读取数据(不改变先前的端口打开状态)
            </summary>
            <param name="text">返回的读取字符串(发生错误时返回错误信息)。</param>
            <returns>读取成功返回True，否则返回False(读取超时返回空字符串)。</returns>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Read(System.Byte[]@)">
            <summary>
            从通讯端口读取所有数据(不改变先前的端口打开状态)
            </summary>
            <param name="buffer" >读出的字节数组</param> 
            <returns>写入成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Listen">
            <summary>
            启动端口侦探(将自动打开端口；接收到消息时触发Received事件，此时ReadOut函数将失效。)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.Stop">
            <summary>
            停止端口侦听(将自动关闭端口。)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.DiscardBuffer(App.FunctionLibrary.BufferType)">
            <summary>
            清理通讯的端口输入、输出缓冲区。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerialPort.GetPortNames">
            <summary>
            获取当前计算机的串行端口名称数组。
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.SerialPort.Received">
            <summary>
            接收到消息事件，启用端口侦探Listen后才触发此事件，此时Read函数将失效。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ConnectionBuilder">
            <summary>
            连接字符串生成器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConnectionBuilder.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConnectionBuilder.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="P:App.FunctionLibrary.ConnectionBuilder.Item(System.String)">
            <summary>
            获取或设置指定连接配置属性名称的配置值。
            </summary>
            <param name="name">配置属性名称</param>
        </member>
        <member name="M:App.FunctionLibrary.ConnectionBuilder.ToString">
            <summary>
            生成连接字符串
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConnectionBuilder.ToString(System.Boolean)">
            <summary>
            生成连接字符串
            </summary>
            <param name="keepPassword">是否在连接成功后保持密码信息</param>
        </member>
        <member name="P:App.FunctionLibrary.ConnectionBuilder.Server">
            <summary>
            数据库服务器计算机的名称或者网络IP地址(Server属性值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ConnectionBuilder.Provider">
            <summary>
            数据库引擎名称(Provider 属性值，一般用于OleDb数据连接类别)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ConnectionBuilder.DataSource">
            <summary>
            数据源名称(Data Source 属性值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ConnectionBuilder.DataBase">
            <summary>
            数据库名称(Initial Catalog 属性值或者数据库文件名称)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ConnectionBuilder.UserID">
            <summary>
            数据库登录用户名(User ID 属性值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ConnectionBuilder.Password">
            <summary>
            数据库登录密码(Password 属性值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ConnectionBuilder.Timeout">
            <summary>
            连接超时秒数(Connect Timeout 属性值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ConnectionBuilder.ExtendedProperties">
            <summary>
            扩展属性(Extended Properties 属性值)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConnectionBuilder.op_Implicit(App.FunctionLibrary.ConnectionBuilder)~System.String">
            <summary>
            连接语句隐形转换为字符串表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ConnectionBuilder.op_Implicit(System.String)~App.FunctionLibrary.ConnectionBuilder">
            <summary>
            数据库连接字符串隐形转换为连接语句管理器
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.CrossQuery">
            <summary>
            数据库报表交叉查询类模块
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.DBaser">
            <summary>
            数据管理工厂
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CrossQuery.#ctor">
            <summary>
            实例化交叉查询对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CrossQuery.#ctor(App.FunctionLibrary.DBFactory)">
            <summary>
            实例化交叉查询对象
            </summary>
            <param name="db">数据库工厂</param>
        </member>
        <member name="T:App.FunctionLibrary.CrossQuery.RelatingMap">
            <summary>
            表结构信息
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.RelatingMap.TableName">
            <summary>
            交叉表的名称(或者子查询脚本字符串)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.RelatingMap.CodeColumn">
            <summary>
            表示编号的列名称
            </summary>
            <value>设置编码列名称</value>
            <returns>返回编码列名称</returns>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.RelatingMap.TextColumn">
            <summary>
            表示标题的列名称
            </summary>
            <value>设置标题列名称</value>
            <returns>返回标题列名称</returns>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.RelatingMap.OrdinalColumn">
            <summary>
            表示排序的列名称(缺省表示使用编码列)
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.CrossQuery.CrossMap">
            <summary>
            查询的类别结构体
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.CrossMap.TableName">
            <summary>
            要求统计的表名称(或者子查询脚本字符串)
            </summary> 
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.CrossMap.QueryType">
            <summary>
            统计类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.CrossMap.RowMap">
            <summary>
            关联行数据映射
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.CrossMap.ColMap">
            <summary>
            关联列数据映射
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.CrossMap.RowColumn">
            <summary>
            关联行数据的列名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.CrossMap.ColColumn">
            <summary>
            关联列数据的列名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.CrossMap.ValueColumn">
            <summary>
            表示统计值的列名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CrossQuery.CrossMap.NullValue">
            <summary>
            空值的表示值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CrossQuery.Cross(App.FunctionLibrary.CrossQuery.CrossMap)">
            <summary>
            交叉查询
            </summary>
            <param name="map">交叉查询的映射配置信息</param>
            <returns>返回交叉查询的结果数据表(其中数据列的Caption属性为列名称、ColumnName属性为列编码；第一列为行编码、第二列为行名称)。</returns> 
        </member>
        <member name="M:App.FunctionLibrary.CrossQuery.Cross``1(System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair},System.Collections.Generic.IEnumerable{App.FunctionLibrary.Pair},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String)">
            <summary>
            交叉查询
            </summary>
            <param name="rows">行数据实体列表</param>
            <param name="columns">列数据实体列表</param>
            <param name="content">内容数据实体类别</param>
            <param name="rowField">作为行数据的字段名</param>
            <param name="colField">作为列数据的字段名</param>
            <param name="valueField">作为值数据的字段名</param>
            <returns>返回交叉查询的结果数据表(其中数据列的Caption属性为列名称、ColumnName属性为列编码；第一列为行编码、第二列为行名称)。</returns> 
        </member>
        <member name="M:App.FunctionLibrary.CrossQuery.Cross(System.Data.DataTable,System.Data.DataTable,System.Data.DataTable,App.FunctionLibrary.CrossQuery.CrossMap)">
            <summary>
            交叉查询
            </summary>
            <param name="rowTable">行数据表</param>
            <param name="colTable">列数据表</param>
            <param name="content">内容数据表</param>
            <param name="map">数据表交叉查询关联配置</param>
            <returns>返回交叉查询的结果数据表(其中数据列的Caption属性为列名称、ColumnName属性为列编码；第一列为行编码、第二列为行名称)。</returns> 
        </member>
        <member name="T:App.FunctionLibrary.MessageWindow">
            <summary>
            消息接收窗体
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MessageWindow.#ctor(App.FunctionLibrary.WndProcHandler)">
            <summary>
            实例化消息接收器(对线程间操作是安全的)
            </summary>
            <param name="handler">消息处理器</param>
        </member>
        <member name="M:App.FunctionLibrary.MessageWindow.#ctor(App.FunctionLibrary.WndProcHandler,System.IntPtr)">
            <summary>
            实例化消息接收器(对线程间操作是安全的)
            </summary>
            <param name="handler">消息处理器</param>
            <param name="hwnd">分发消息的目标窗口句柄</param>
        </member>
        <member name="M:App.FunctionLibrary.MessageWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MessageWindow.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MessageWindow.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ParameterBuilder">
            <summary>
            参数集生成器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.#ctor(System.Data.Common.DbCommand)">
            <summary>
            实例化参数生成器
            </summary>
            <param name="command">创建参数的Command对象</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.#ctor(System.Data.Common.DbParameter[])">
            <summary>
            实例化参数生成器
            </summary>
            <param name="params">初始化的参数组</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Clear">
            <summary>
            清理参数集
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.Data.Common.DbParameter)">
            <summary>
            新增参数。
            </summary>
            <param name="param">参数对象</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Object)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="value">参数对象的值。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Object,System.Data.DbType)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="value">参数对象的值。</param>
            <param name="dataType">参数数据类型</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="value">参数对象的值。</param>
            <param name="dataType">参数数据类型</param>
            <param name="size"> 参数的长度。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="dataType">参数数据类型。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="value">参数对象的值。</param>
            <param name="dataType">参数数据类型。</param>
            <param name="size"> 参数的长度。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Object,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="value">参数对象的值。</param>
            <param name="dataType">参数数据类型。</param>
            <param name="size"> 参数的长度。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Object,System.Data.ParameterDirection,System.Data.DbType)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="value">参数对象的值。</param>
            <param name="dataType">参数数据类型。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="value">参数对象的值。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Data.DbType)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="dataType">参数数据类型。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Data.DbType,System.Int32)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="dataType">参数数据类型。</param>
            <param name="size"> 参数的长度。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="dataType">参数数据类型。</param>
            <param name="size"> 参数的长度。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Data.ParameterDirection,System.Data.DbType)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="dataType">参数数据类型。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Add(System.String,System.Data.ParameterDirection)">
            <summary>
            新增参数。
            </summary>
            <param name="name">参数限定名。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.AddRange(System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
             将指定集合的元素添加到参数集列表的末尾。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.ToArray">
            <summary>
            参数集生成器数据生成参数集数组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.Copy">
            <summary>
            获取参数集生成器的精确副本
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.op_Implicit(App.FunctionLibrary.ParameterBuilder)~System.Data.Common.DbParameter[]">
            <summary>
            参数生成器隐形输出为参数集数组。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.op_Implicit(System.Data.Common.DbParameter[])~App.FunctionLibrary.ParameterBuilder">
            <summary>
            参数数组隐形输出为参数生成器
            </summary>
            <param name="params">参数组</param>
        </member>
        <member name="P:App.FunctionLibrary.ParameterBuilder.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的参数。
            </summary>
            <param name="index">指定的索引位置</param>
        </member>
        <member name="P:App.FunctionLibrary.ParameterBuilder.Item(System.String)">
            <summary>
            获取或设置指定参数名称的参数值。
            </summary>
            <param name="name">参数名称</param>
        </member>
        <member name="P:App.FunctionLibrary.ParameterBuilder.Item(System.String,System.Data.ParameterDirection)">
            <summary>
            设置指定参数名称的参数值。
            </summary>
            <param name="name">参数名称</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="P:App.FunctionLibrary.ParameterBuilder.Item(System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            设置指定参数名称的参数值。
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数数据类型。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="P:App.FunctionLibrary.ParameterBuilder.Item(System.String,System.Data.ParameterDirection,System.Data.DbType)">
            <summary>
            设置指定参数名称的参数值。
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数数据类型。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="P:App.FunctionLibrary.ParameterBuilder.Item(System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            设置指定参数名称的参数值。
            </summary>
            <param name="name">参数名称</param>
            <param name="size"> 参数的长度。</param>
            <param name="dbType">参数数据类型。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="P:App.FunctionLibrary.ParameterBuilder.Item(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            设置指定参数名称的参数值。
            </summary>
            <param name="name">参数名称</param>
            <param name="size"> 参数的长度。</param>
            <param name="dbType">参数数据类型。</param>
            <param name="direction">参数的输入、输出方向。</param>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.IndexOf(System.String)">
            <summary>
            获取指定参数名称的索引值。
            </summary>
            <param name="name">参数名称</param>
        </member>
        <member name="P:App.FunctionLibrary.ParameterBuilder.ReturnValue">
            <summary>
            存储过程的返回值(只返回整数型参数值，如果未设置 "返回值参数" 时默认返回 0)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ParameterBuilder.Count">
            <summary>
            参数总数量
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.getParameterName(System.String)">
            <summary>
            获取有效参数名(不包括前导字符和其他非法字符)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParameterBuilder.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.WhereBuilder">
            <summary>
            条件语句表达式
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.TimeMark">
            <summary>
            日期、时间符号(默认：撇号')
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.Logical">
            <summary>
            逻辑运算类别。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.Match">
            <summary>
            条件比较操作类别
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.Value">
            <summary>
            条件值
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.IsEmpty">
            <summary>
            判断条件语句生成器是否为空的表达式或者条件语句都无效。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.Empty">
            <summary>
            获取一个空条件语句副本。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WhereBuilder.childrens">
            <summary>
            当前生成器的子条件列表。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WhereBuilder.owner">
            <summary>
            当前生成器的归属生成器。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.topowner">
            <summary>
            获取当前生成器的最顶级归属生成器。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WhereBuilder.unmarkValue">
            <summary>
            是否为无符号值(一般为字段名称，不表示为值)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WhereBuilder.keepEmpty">
            <summary>
            是否保留空值条件表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.#ctor">
            <summary>
            实例化条件语句生成器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.#ctor(System.String)">
            <summary>
            依据条件表达式实例化。
            </summary>
            <param name="whereString">需要的解析的条件表达式。</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.#ctor(System.String,System.Object,App.FunctionLibrary.MatchType,System.Boolean)">
            <summary>
            字符串按模糊类型实例化条件语句生成器。
            </summary>
            <param name="columnName">条件列名称</param>
            <param name="value">条件列值</param> 
            <param name="match">比较操作符匹配方式</param>
            <param name="keep">是否保留空值的条件表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.#ctor(System.String,System.Object,System.Object)">
            <summary>
            按条件值的数据类型 Between 模式实例化条件语句生成器。
            </summary>
            <param name="columnName">追加的条件列名称</param>
            <param name="begin">追加的开始条件值</param>
            <param name="final">追加的结束条件值</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            字符串按模糊类型实例化条件语句生成器。
            </summary>
            <param name="columnName">条件列名称</param>
            <param name="value">条件列值</param> 
            <param name="keep">是否保留空值的条件表达式</param>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.Item(System.Int32)">
            <summary>
            获取表达式中索引位置处的子条件表达式。
            </summary>
            <param name="index">从0开始的索引位置</param>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.Item(System.String)">
            <summary>
            获取表达式中指定字段名称的子条件表达式的值。
            </summary>
            <param name="name">子条件表达式的字段名称</param>
        </member>
        <member name="P:App.FunctionLibrary.WhereBuilder.Item(System.String,System.Boolean)">
            <summary>
            获取表达式中指定字段名称的子条件表达式的值。
            </summary>
            <param name="name">子条件表达式的字段名称</param>
            <param name="keep">是否保留空值的条件表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Clear">
            <summary>
            重置当前条件语句生成器，并且返回当前条件语句生成器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.And">
            <summary>
            追加 "与运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.And(App.FunctionLibrary.WhereBuilder)">
            <summary>
            追加 "与运算" 子条件，并且返回追加的子条件语句生成器。
            </summary>
            <param name="wb">追加的子条件</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.And(System.String)">
            <summary>
            追加 "与运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
            <param name="whereString">追加的子条件字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.And(System.String,System.Object,App.FunctionLibrary.MatchType,System.Boolean)">
            <summary>
            追加 "与运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
            <param name="columnName">条件列名称</param>
            <param name="value">条件列值</param>
            <param name="match">比较操作运算符</param>
            <param name="keep">是否保留空值的条件表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.And(System.String,System.Object,System.Object)">
            <summary>
            追加 "与运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
            <param name="columnName">追加的条件列名称</param>
            <param name="begin">追加的开始条件值</param>
            <param name="final">追加的结束条件值</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.And(System.String,System.Object,System.Boolean)">
            <summary>
            追加 "与运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
            <param name="columnName">条件列名称</param>
            <param name="value">条件列值</param>
            <param name="keep">是否保留空值的条件表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Or">
            <summary>
            追加 "或运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Or(App.FunctionLibrary.WhereBuilder)">
            <summary>
            追加 "或运算" 子条件，并且返回追加的的子条件语句生成器。
            </summary>
            <param name="wb">追加的子条件</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Or(System.String)">
            <summary>
            追加 "或运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
            <param name="whereString">追加的子条件字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Or(System.String,System.Object,App.FunctionLibrary.MatchType,System.Boolean)">
            <summary>
            追加 "或运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
            <param name="columnName">条件列名称</param>
            <param name="value">条件列值</param>
            <param name="match">比较操作运算符</param>
            <param name="keep">是否保留空值的条件表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Or(System.String,System.Object,System.Object)">
            <summary>
            追加 "或运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
            <param name="columnName">追加的条件列名称</param>
            <param name="begin">追加的开始条件值</param>
            <param name="final">追加的结束条件值</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Or(System.String,System.Object,System.Boolean)">
            <summary>
            追加 "或运算" 条件语句，并且返回新的子条件语句生成器。
            </summary>
            <param name="columnName">条件列名称</param>
            <param name="value">条件列值</param>
            <param name="keep">是否保留空值的条件表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.ToString">
            <summary>
            从顶级父开始生成条件语句字符串(包括 \nWhere 关键字前缀)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.ToString(System.String)">
            <summary>
            从顶级父开始生成条件语句字符串。
            </summary>
            <param name="prefix">Where 关键字前缀表达式，默认:\nWhere</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.CreateParameter(App.FunctionLibrary.DBFactory,System.String)">
            <summary>
            创建条件表达式数据参数(Pair.Name=条件表达式子句，Pair.Value=参数集)。
            </summary>
            <param name="factory">创建条件表达式使用的数据工厂</param>
            <param name="prefix">Where 关键字前缀表达式，默认:\nWhere</param>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.getWhereString">
            <summary>
            获取当前生成器的条件语句字符串。
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.getWhereParameter(App.FunctionLibrary.ParameterBuilder@,App.FunctionLibrary.DBFactory)">
            <summary>
            创建条件表达式数据参数(Pair.Name表示不包括Where的条件表达式，Pair.Value表示参数集)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Copy">
            <summary>
            获取当前 WhereBuilder 的一个包括子条件表达式完全副本。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Clone">
            <summary>
            获取当前 WhereBuilder 的一个不包括子条件表达式副本。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.op_Implicit(App.FunctionLibrary.WhereBuilder)~System.String">
            <summary>
            条件语句生成器隐形转换为字符串(包含 Where 关键字，等同于 WhereBuilder.ToString(true))。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.op_Implicit(System.String)~App.FunctionLibrary.WhereBuilder">
            <summary>
            条件字符串表达式隐形转换为条件语句。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.op_Equality(App.FunctionLibrary.WhereBuilder,App.FunctionLibrary.WhereBuilder)">
            <summary>
            判断两个条件语句表达式是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.op_Inequality(App.FunctionLibrary.WhereBuilder,App.FunctionLibrary.WhereBuilder)">
            <summary>
            判断两个条件语句表达式是否不同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.Equals(System.Object)">
            <summary>
            获取当前条件语句与目标对象是否相同。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WhereBuilder.GetHashCode">
            <summary>
            获取当前条件语句的哈希值
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Logger">
            <summary>
            日志管理器
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Logger.queuer">
            <summary>
            日志队列
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Logger.ID">
            <summary>
            日志ID
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Logger.LogName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Logger.LogPath">
            <summary>
            日志文件路径
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Logger.Disabled">
            <summary>
            日志配置信息是否生效
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Logger.KeepDays">
            <summary>
            日志保留的天数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Logger.#ctor(App.FunctionLibrary.Filer)">
            <summary>
            实例化日志管理器
            </summary>
            <param name="file">日志文件
            <para>不再自动按日期分文件保存日志,</para>
            <para>全部日志信息都保存在指定的日志文件中,</para>
            <para>并且也不再受控于日志配置管理。</para>
            </param>
        </member>
        <member name="M:App.FunctionLibrary.Logger.#ctor(System.String)">
            <summary>
            实例化日志管理器
            </summary>
            <param name="logName">日志名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Logger.#ctor(System.Type)">
            <summary>
            实例化日志管理器
            </summary>
            <param name="type">产生日志的对象类型实例</param>
        </member>
        <member name="M:App.FunctionLibrary.Logger.#ctor(System.Reflection.Assembly)">
            <summary>
            实例化日志管理器
            </summary>
            <param name="assembly">产生日志的程序集实例</param>
        </member>
        <member name="M:App.FunctionLibrary.Logger.syncMySettings(App.FunctionLibrary.Logger.LoggesManager.LogInfo[],System.String)">
            <summary>
            同步当前日志配置
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Logger.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Logger.Write(System.String)">
            <summary>
            写入日志信息(超时30秒钟将放弃写入)。
            </summary>
            <param name="message">写入的日志信息</param>
        </member>
        <member name="M:App.FunctionLibrary.Logger.Write(System.Exception)">
            <summary>
            异常对象写入日志信息(超时30秒钟将放弃写入)。
            </summary>
            <param name="ex">写入日志的异常对象</param>
        </member>
        <member name="M:App.FunctionLibrary.Logger.Write(System.String,System.Object[])">
            <summary>
            使用指定的格式信息，将指定的对象数组（后跟当前行终止符）的文本表示形式写入日志信息。
            </summary>
            <param name="format">复合格式字符串。</param>
            <param name="arg">要使用 format 写入的对象的数组。</param>
        </member>
        <member name="M:App.FunctionLibrary.Logger.Read(System.DateTime)">
            <summary>
            读取日志信息
            </summary>
            <param name="day">读取日志的日期</param>
        </member>
        <member name="M:App.FunctionLibrary.Logger.Clear">
            <summary>
            清理日志文件里面的所有日志信息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Logger.WaitCompleted(System.Int32)">
            <summary>
            等待写入完成
            </summary>
            <param name="millisecondsTimeout">等待写入超时的毫秒数</param>
        </member>
        <member name="P:App.FunctionLibrary.Logger.LoggesManager.LogConfiges">
            <summary>
            日志管理器配置信息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Logger.LoggesManager.clear">
            <summary>
            清理过期日志文件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Logger.LoggesManager.readConfigs">
            <summary>
            读取日志配置信息
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.MemorySharer">
            <summary>
            共享内存管理器(共享的内存每次只能写入一次，重复写入将重新创建内存共享；为了避免内存泄露，使用完毕后及时销毁)。
            </summary>
            <remarks>从内存中定义一个不被使用的内存区域，这个被定义的内存区域只能通过内存地图来使用。</remarks>
        </member>
        <member name="P:App.FunctionLibrary.MemorySharer.Name">
            <summary>
            共享内存的名称。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.#ctor(System.String)">
            <summary>
            实例化共享内存管理器(为了避免内存泄露，使用完毕后及时销毁)。
            </summary>
            <param name="name">共享内存的名称</param>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.Write(System.String,System.Text.Encoding)">
            <summary>
            在共享内存中写入文本字符串表达式(如共享内存未打开将自动打开)。
            </summary>
            <param name="text">需要写入共享内存的字符串表达式</param>
            <param name="encoding">字符集(默认 Encoding.UTF8)</param>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.Write(System.Byte[])">
            <summary>
            在共享内存中写入字节数据流。
            </summary>
            <param name="buffer">需要写入共享内存的字节数据流</param>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.Read">
            <summary>
            从共享内存中读取字节流数据(如共享内存未打开将自动打开)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.Read(System.Text.Encoding)">
            <summary>
            从共享内存中读取字符串表达式(如共享内存未打开将自动打开)。
            </summary>
            <param name="encoding">字符集(默认 Encoding.UTF8)</param>
        </member>
        <member name="T:App.FunctionLibrary.MemorySharer.MemorySharedCore">
            <summary>
            共享内存核心
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MemorySharer.MemorySharedCore.BaseAddress">
            <summary>
            共享的内存基地址
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MemorySharer.MemorySharedCore.Name">
            <summary>
            共享内存的名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MemorySharer.MemorySharedCore.Size">
            <summary>
            共享的内存大小
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.MemorySharedCore.#ctor(System.String,System.Int32)">
            <summary>
            初始化共享内存
            </summary>
            <param name="name">共享内存的名称</param>
            <param name="size">共享的内存大小</param>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.MemorySharedCore.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.MemorySharedCore.Write(System.Byte[])">
            <summary>
            共享内存写入数据
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MemorySharer.MemorySharedCore.Read">
            <summary>
            读取共享内存数据
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.PhysicalDrive">
            <summary>
            获取硬盘物理序列号
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.PhysicalDrive.SerialNumber">
            <summary>
            获取计算机上安装的第一块物理硬盘的序列号。
            </summary>
            <returns>读取错误返回空字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.PhysicalDrive.RemoveInvalidChar(System.String)">
            <summary>
            移除非法字符
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Filer">
            <summary>
            实例化文件管理器(提供文件的各种操作方法)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.#ctor(System.IO.FileInfo)">
            <summary>
            根据文件信息实例化一个文件管理器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.#ctor(System.String)">
            <summary>
            实例化文件管理器
            </summary>
            <param name="fileName">文件或目录的完全限定名称。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.#ctor(System.Uri)">
            <summary>
            实例化文件管理器
            </summary>
            <param name="url">URL表示的文件名称。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.#ctor(System.Reflection.Assembly)">
            <summary>
            由程序集实例化程序集文件管理器。
            </summary>
            <param name="assembly">非基于通用对象文件格式 (COFF) 的映像程序集。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.#ctor(System.IO.DirectoryInfo)">
            <summary>
            实例化文件管理器
            </summary>
            <param name="dir">目录信息</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.#ctor(System.String,System.String)">
            <summary>
            实例化文件管理器
            </summary>
            <param name="dir">目录或文件(如果为目录应以 \ 作为结尾符)。</param>
            <param name="name">文件名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.#ctor(App.FunctionLibrary.Filer,System.String)">
            <summary>
            实例化文件管理器
            </summary>
            <param name="dir">目录或文件路径</param>
            <param name="name">文件名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.DiscoveryAssembly(System.String)">
            <summary>
            发现并获取指定程序集简单名称的文件信息(未发现的程序集返回 null,分别检查了当前工作目录、应用程序域目录、系统目录、程序集安装目录的 .dll和.exe两种程序集)。
            </summary>
            <param name="assemblyName">程序集的简单名称。这通常（但不一定）是程序集的清单文件的文件名。</param>
            <returns>返回探测到的文件，否则返回null。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Discovering(System.String,System.String[])">
            <summary>
            在当前文件目录中尝试侦测程序集文件。
            </summary>
            <param name="assemblyName">表示的程序集简单名称。</param>
            <param name="extensions">尝试侦测的程序集文件扩展名,注意扩展名的顺序，仅侦测第一个符合条件的程序集(如不需扩展名或程序集名称包含扩展名时，请用空字符串)。</param>
            <returns>返回探测到的程序集文件，否则返回 null。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Discovering_AllDirectories(System.String,System.String[])">
            <summary>
            在当前文件目录包含所有子目录中尝试侦测程序集文件。
            </summary>
            <param name="assemblyName">表示的程序集简单名称。</param>
            <param name="extensions">尝试侦测的程序集文件扩展名,注意扩展名的顺序，仅侦测第一个符合条件的程序集(如不需扩展名或程序集名称包含扩展名时，请用空字符串)。</param>
            <returns>返回探测到的程序集文件，否则返回 null。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Finalize">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Dispose">
            <summary>
            销毁文件管理器并且释放所有资源
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.IsDisposed">
            <summary>
            文件管理器是否已销毁。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用于文件对象的序列化信息设置
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Serializeing(System.Func{System.String,System.String})">
            <summary>
            文件对象序列化为序列元素
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Deserializing(App.FunctionLibrary.SerializationElement,System.Func{System.String,System.String})">
            <summary>
            序列元素反序列化为文件对象
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.FullName">
            <summary>
            表示目录或文件的完全限定名称。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Name">
            <summary>
            文件名称(包括扩展名)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Extension">
            <summary>
            获取表示文件扩展名部分的字符串。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.NameWithoutExtension">
            <summary>
            文件名称(不包括扩展名)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.CreateTime">
            <summary>
            获取或设置当前文件或目录的创建时间。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.ModifyTime">
            <summary>
            获取或设置上次写入当前文件或目录的时间。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.LastAccessTime">
            <summary>
            获取或设置上次访问当前文件或目录的时间。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Path">
            <summary>
            文件路径或目录名称。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Parent">
            <summary>
            获取文件或者目录的父目录。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Directory">
            <summary>
            文件父目录或路径的目录信息
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.IsPath">
            <summary />
        </member>
        <member name="P:App.FunctionLibrary.Filer.IsFolder">
            <summary>
            判断文件是否为一个目录(不存在的目录结尾符为 \ 的仍旧解释为目录)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.IsReadOnly">
            <summary>
            获取或设置文件的只读属性
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.IsFolderEmpty">
            <summary>
            判断文件夹是否为空(如非文件夹、空文件夹信息、文件夹不存在时均返回 false)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Length">
            <summary>
            获取文件的大小(字节)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Attributes">
            <summary>
            获取或设置当前文件或目录的特性。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.IsOpened">
            <summary>
            文件是否已经被打开独占锁定
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.IsOpened2">
            <summary>
            不能解决文件只读的问题。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.IsOpened1">
            <summary>
            不能解决文件只读的问题。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.ToString">
            <summary>
            获取管理的文件完全限定名。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.SuspendWatcher">
            <summary>
            挂起文件系统侦听通知事件。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.ResumeWatcher">
            <summary>
            恢复文件系统侦听通知事件。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.SuspendAllWatcher">
            <summary>
            挂起所有文件系统侦听通知事件。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.ResumeAllWatcher">
            <summary>
            恢复所有文件系统侦听通知事件。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.WorkDir">
            <summary>
            获取默认应用程序域进程的可执行文件工作目录(一般指默认程序域执行的第一个可执行文件目录)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.TempDir">
            <summary>
            获取当前登录 Windows 操作系统用户的临时目录。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.TempFile(System.String,System.String,System.Int32)">
            <summary>
            创建临时目录下唯一命名的零字节临时文件。
            </summary>
            <param name="extension">临时文件扩展名</param>
            <param name="prefixion">临时文件前缀字符串</param>
            <param name="randomCount">临时文件唯一随机字符串长度(不允许小于4个字符)</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.TempFile(App.FunctionLibrary.Filer,System.String,System.String,System.Int32)">
            <summary>
            创建临时目录下唯一命名的零字节临时文件。
            </summary>
            <param name="dir">创建临时文件的目录</param>
            <param name="extension">临时文件扩展名</param>
            <param name="prefixion">临时文件前缀字符串</param>
            <param name="randomCount">临时文件唯一随机字符串长度(不允许小于4个字符)</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Combine(System.String)">
            <summary>
            当前文件管理器表示的路径追加文件名称组成新的文件管理器(不改变当前文件管理器)。
            </summary>
            <param name="name">在当前文件管理器表示的路径中追加的文件简单名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Combine(App.FunctionLibrary.Filer)">
            <summary>
            当前文件管理器表示的路径追加文件名称组成新的文件管理器(不改变当前文件管理器)。
            </summary>
            <param name="name">在当前文件管理器表示的路径中追加文件的简单名称</param>
        </member>
        <member name="P:App.FunctionLibrary.Filer.IsAssemblied">
            <summary>
            判断当前文件是否为程序集(不存在的文本返回false)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GetAssembly">
            <summary>
            获取当前管理器表示文件的程序集(如应用程序域中存在对应文件名称的程序集，将不重新创建而直接使用历史版本的程序集)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GetStream(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            获取文件的数据流。
            </summary>
            <param name="mode">确定如何打开或创建文件。</param>
            <param name="access">确定流对象访问文件的方式。</param>
            <param name="share">确定文件如何由进程共享。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GetStream(System.IO.FileAccess,System.IO.FileMode,System.IO.FileShare)">
            <summary>
            获取文件的数据流。
            </summary>
            <param name="mode">确定如何打开或创建文件。</param>
            <param name="access">确定流对象访问文件的方式。</param>
            <param name="share">确定文件如何由进程共享。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Read(System.Int32,System.Int32)">
            <summary>
            获取文件字节流数据
            </summary>
            <param name="offset">从零开始的字节偏移量，从此处开始从文件流中读取的数据。</param>
            <param name="count">要从数据流中最多读取的字节数。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Read(System.Text.Encoding)">
            <summary>
            读取文件字符串
            </summary>
            <param name="encoding">编码集(缺省使用默认编码集)</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Write(System.Byte[],System.IO.FileMode,System.Int32,System.Int32)">
            <summary>
            文件写入字节数组
            </summary>
            <param name="bytes">待写入的字节数组</param>
            <param name="offset">从零开始的字节偏移量，从此处开始从字节数组中读取的数据。</param>
            <param name="count">要从字节数组中最多读取的字节数。</param>
            <param name="mode">确定如何打开或创建文件。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Write(System.IO.Stream,System.IO.FileMode,System.Int32,System.Int32)">
            <summary>
            文件写入数据流
            </summary>
            <param name="source">待写入的源数据流</param>
            <param name="offset">从零开始的字节偏移量，从此处开始从数据流中读取的数据。</param>
            <param name="count">要从数据流中最多读取的字节数。</param>
            <param name="mode">确定如何打开或创建文件。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Write(System.String,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            文件写入字符串
            </summary>
            <param name="strings">文件写入的字符串</param>
            <param name="encoding">编码集(缺省使用 UTF8 编码集)</param>
            <param name="mode">确定如何打开或创建文件。</param>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Exists">
            <summary>
            获取指示的文件或者路径是否存在。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.ExistsTimeout(System.Int32)">
            <summary>
            获取指示的文件或者路径是否存在。
            </summary>
            <param name="timeout">超时时间:秒钟</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Refresh">
            <summary>
            刷新文件信息状态
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Rename(System.String)">
            <summary>
            文件重命名
            </summary>
            <param name="newName">重命名的新名称(不包括路径)</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.MoveTo(System.String)">
            <summary>
            将指定文件移到新位置，并提供指定新文件名称。
            </summary>
            <param name="destFileName">文件的新完全限定名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.CopyFrom(App.FunctionLibrary.Filer,System.Boolean)">
            <summary>
            从目标文件复制到当前文件。
            </summary>
            <param name="sourfile">源文件</param>
            <param name="overwrite">如果可以覆盖当前文件，则为 true；否则为 false。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.CopyTo(System.String,System.Boolean)">
            <summary>
            从当前文件复制到指定的目标文件。
            </summary>
            <param name="destfile">目标文件</param>
            <param name="overwrite">如果可以覆盖目标文件，则为 true；否则为 false。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.CopyTo(App.FunctionLibrary.Filer,System.Boolean)">
            <summary>
            从当前文件复制到指定的目标文件。
            </summary>
            <param name="destfile">目标文件</param>
            <param name="overwrite">如果可以覆盖目标文件，则为 true；否则为 false。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Delete(System.Boolean)">
            <summary>
            永久删除文件
            </summary>
            <param name="recursive">如果为目录时，是否移除目录中的子目录和文件。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Create">
            <summary>
            创建文件或目录,并且返回(如果是文件将创建0字节长度的文件)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Clear">
            <summary>
            清理目录内的所有文件及子目录
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GetDirs(System.String,System.Boolean)">
            <summary>
            获取文件路径包括的所有子目录。
            </summary>
            <param name="searchPattern">
            文件名匹配的搜索字符串(默认搜索所有文件,多个搜索条件用 [; | ,] 作为定界符)。<br/>
            不能以两个句点（".."）结束，<br/>
            不能在 DirectorySeparatorChar 或 AltDirectorySeparatorChar 的前面包含两个句点（".."），<br/>
            也不能包含 InvalidPathChars 中的任何字符。
            </param>
            <param name="allDirectories">true表示搜索当前目录和所有子目录，false表示仅搜索当前目录。。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GetFiles(System.String,System.Boolean)">
            <summary>
            获取文件路径包括的所有文件。
            </summary>
            <param name="searchPattern">
            文件名匹配的搜索字符串(默认搜索所有文件,多个搜索条件用 [; | ,] 作为定界符)。<br/>
            不能以两个句点（".."）结束，<br/>
            不能在 DirectorySeparatorChar 或 AltDirectorySeparatorChar 的前面包含两个句点（".."），<br/>
            也不能包含 InvalidPathChars 中的任何字符。
            </param>
            <param name="allDirectories">true表示搜索当前目录和所有子目录，false表示仅搜索当前目录。。</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Attaching(System.Byte[])">
            <summary>
            追加指定的二进制字节流信息到当前文件中(覆盖原有追加信息)。
            </summary>
            <param name="binary">需要追加的二进制字节流(空字节流表示清除附加信息)</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Detaching">
            <summary>
            获取当前文件中追加的二进制字节流
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.ShortName">
            <summary>
            获取当前文件的短路径文件名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.LongName">
            <summary>
            获取当前文件的长路径文件名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.UriName">
            <summary>
            文件的Uri访问名。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Uri">
            <summary>
            文件的Uri访问地址。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.LargeIcon">
            <summary>
            获取文件的大图标(如文件不存在按扩展名获取)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.SmallIcon">
            <summary>
            获取文件的小图标(如文件不存在按扩展名获取)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.TypeName">
            <summary>
            获取文件的类型名称(如文件不存在按扩展名获取)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GetDefaultIcon(System.Drawing.Icon@,System.Drawing.Icon@)">
            <summary> 
            获取缺省图标 
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Version">
            <summary>
            获取当前管理器表示文件的文件版本信息。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GetVerInfo(System.String)">
            <summary>
            获取文件版本信息
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Filer.VersionInfo">
            <summary>
            版本信息
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.VersionInfo.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.VersionInfo.Directory">
            <summary>
            文件目录
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.VersionInfo.FileVersion">
            <summary>
            文件版本
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.VersionInfo.ProductVersion">
            <summary>
            产品版本
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.VersionInfo.FileFlag">
            <summary>
            文件标志
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.VersionInfo.FileOS">
            <summary>
            文件操作系统
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.VersionInfo.FileType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.VersionInfo.FileSubType">
            <summary>
            文件子类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.HashCode">
            <summary>
            获取文件的哈希值(用于比较文件内容是否相同)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Watcher(System.Action{App.FunctionLibrary.WatcherEventArgs})">
            <summary>
            侦听文件系统更改通知(侦听本文件管理器指示的文件路径)，并在目录或目录中的文件发生更改时引发事件。
            </summary>
            <param name="changed">当文件或目录发生改变时发生事件委托器。</param>
            <remarks>侦听文件未设置、侦听目录不存在，或者侦听事件委托器未设置时将停止侦听操作。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Watcher(System.String,System.Action{App.FunctionLibrary.WatcherEventArgs})">
            <summary>
            侦听文件系统更改通知(侦听本文件管理器指示的文件路径)，并在目录或目录中的文件发生更改时引发事件。
            </summary>
            <param name="changed">当文件或目录发生改变时发生事件委托器。</param>
            <param name="filter">获取或设置筛选字符串，用于确定在目录中监视哪些文件(*.*或空字符表示监视所有文件,只能指定一个筛选字符串)。</param>
            <remarks>侦听文件未设置、侦听目录不存在，或者侦听事件委托器未设置时将停止侦听操作。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Watcher(System.IO.NotifyFilters,System.Action{App.FunctionLibrary.WatcherEventArgs})">
            <summary>
            侦听文件系统更改通知(侦听本文件管理器指示的文件路径)，并在目录或目录中的文件发生更改时引发事件。
            </summary>
            <param name="changed">当文件或目录发生改变时发生事件委托器。</param>
            <param name="notifyFilter">获取或设置要监视的更改类型(缺省监视所有更改)。</param>
            <remarks>侦听文件未设置、侦听目录不存在，或者侦听事件委托器未设置时将停止侦听操作。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Watcher(System.String,System.IO.NotifyFilters,System.Action{App.FunctionLibrary.WatcherEventArgs})">
            <summary>
            侦听文件系统更改通知(侦听本文件管理器指示的文件路径)，并在目录或目录中的文件发生更改时引发事件。
            </summary>
            <param name="changed">当文件或目录发生改变时发生事件委托器。</param>
            <param name="filter">获取或设置筛选字符串，用于确定在目录中监视哪些文件(*.*或空字符表示监视所有文件,只能指定一个筛选字符串)。</param>
            <param name="notifyFilter">获取或设置要监视的更改类型(缺省监视所有更改)。</param>
            <remarks>侦听文件未设置、侦听目录不存在，或者侦听事件委托器未设置时将停止侦听操作。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Filer.RetrieveProcessToken">
            <summary>
            获取进程令牌
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GiveRestorePrivilege">
            <summary>
            提升进程特权
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.LsaWrapper.#ctor(System.String)">
            <summary>
            local system if systemName is null
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.SetSecurityRights(System.Security.AccessControl.FileSystemRights)">
            <summary>
            设置文件权限
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Filer.Permissions">
            <summary>
            获取或设置当前文件权限(基于当前登录 Windows 用户)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.op_Equality(App.FunctionLibrary.Filer,App.FunctionLibrary.Filer)">
            <summary>
            判断两个文件完全限定名称表示的文件是否一致。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.op_Inequality(App.FunctionLibrary.Filer,App.FunctionLibrary.Filer)">
            <summary>
            判断两个文件完全限定名称表示的文件是否非一致。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.op_Addition(App.FunctionLibrary.Filer,System.String)">
            <summary>
            文件路径与文件简单名称组合为一个新的文件。
            </summary>
            <param name="path">表示的文件路径</param>
            <param name="name">表示的文件简单名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.op_Addition(App.FunctionLibrary.Filer,App.FunctionLibrary.Filer)">
            <summary>
            文件路径与文件简单名称组合为一个新的文件。
            </summary>
            <param name="path">表示的文件路径</param>
            <param name="name">表示的文件简单名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Filer.op_Implicit(App.FunctionLibrary.Filer)~System.String">
            <summary>
            文件隐形转换为字符串(按文件完全限定名称 FullName)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.op_Implicit(App.FunctionLibrary.Filer)~System.IO.FileInfo">
            <summary>
            文件管理对象转换为文件信息对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.op_Implicit(App.FunctionLibrary.Filer)~System.IO.DirectoryInfo">
            <summary>
            文件管理对象转换为目录信息对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.op_Implicit(System.IO.FileInfo)~App.FunctionLibrary.Filer">
            <summary>
            文件信息对象转换为文件管理对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.op_Implicit(System.IO.DirectoryInfo)~App.FunctionLibrary.Filer">
            <summary>
            目录信息对象转换为文件管理对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.Equals(System.Object)">
            <summary>
            确定指定的对象实例是否等于当前文件。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Filer.GetHashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Pointer">
            <summary>
            内存指针操作器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.#ctor(System.Int32)">
            <summary>
            实例化指针操作对象。
            </summary>
            <param name="size">在非托管内存中分配的内存块大小</param> 
        </member>
        <member name="M:App.FunctionLibrary.Pointer.#ctor(System.IntPtr)">
            <summary>
            实例化指针操作对象。
            </summary>
            <param name="ptr">指明的指针</param> 
        </member>
        <member name="M:App.FunctionLibrary.Pointer.#ctor(System.Type)">
            <summary>
            实例化指针操作对象。
            </summary>
            <param name="type">在非托管内存中分配需要使用内存块的类型。</param> 
        </member>
        <member name="M:App.FunctionLibrary.Pointer.#ctor(System.Object,System.Boolean)">
            <summary>
            实例化指针操作对象(以目标对象的地址作为指针)。
            </summary>
            <param name="structure">作为指针地址的目标对象</param>
            <param name="isfixed">
            <para>true表示为指定的对象分配句柄并固定下来不被垃圾回收器销毁</para>
            <para>false表示将数据从托管对象封送到非托管内存块</para>
            </param>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.InitIndexer">
            <summary>
            初始化索引器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.Finalize">
            <summary>
            销毁指针操作器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.Dispose">
            <summary>
            销毁指针使用的所有资源
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pointer.Size">
            <summary>
            对象字节流总长度
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pointer.Value">
            <summary>
            当前内存指针值
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pointer.Byte">
            <summary>
            获取指针偏移地址处的字节
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pointer.Bytes">
            <summary>
            获取指针偏移地址处的字节数组
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pointer.Item(System.Int32)">
            <summary>
            获取当前指针指明偏移地址处的指针对象。
            </summary>
            <param name="index">地址偏移量</param>
        </member>
        <member name="P:App.FunctionLibrary.Pointer.Short">
            <summary>
            获取或者设置按给定偏移量的 16 位带符号整数。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pointer.Integer">
            <summary>
            获取或者设置按给定偏移量的 32 位带符号整数。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pointer.Long">
            <summary>
            获取或者设置 64 位有符号整数。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Pointer.String">
            <summary>
            获取或设置以当前指针获取或者设置字符串。
            </summary>
            <returns>获取当前指针非托管内存中存储的字符串(如果Length不大于0则获取第一个空字符之前的所有字符)。</returns>
            <value>把字符串以当前指针复制到非托管内存中。</value>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.ToInt32">
            <summary>
            将此指针的值转换为 32 位有符号的整数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.ToInt64">
            <summary>
            将此指针的值转换为 64 位的有符号的整数。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.ToString">
            <summary>
            将此指针的数值转换为其等效的字符串表示形式。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.ToString(System.String)">
            <summary>
            将此指针的数值转换为其等效的字符串表示形式。
            </summary>
            <param name="format">format: 格式规范，控制指针对象的转换方式。</param>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.ToInstance``1">
            <summary>
            将当前指针表示的数据从非托管内存块封送到新分配指定泛型类型的托管对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.CopyInstance``1(``0)">
            <summary>
            从托管内存中复制泛型类型对象实例到当前指针表示的非托管内存块中。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.op_Equality(App.FunctionLibrary.Pointer,App.FunctionLibrary.Pointer)">
            <summary>
            判断两个指针对象是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.op_Inequality(App.FunctionLibrary.Pointer,App.FunctionLibrary.Pointer)">
            <summary>
            判断两个指针对象是否不相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.Equals(App.FunctionLibrary.Pointer)">
            <summary>
            判断当前指针是否和指明指针对象相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.op_Addition(App.FunctionLibrary.Pointer,System.Int32)">
            <summary>
            指针值加上偏移量。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.op_Subtraction(App.FunctionLibrary.Pointer,System.Int32)">
            <summary>
            指针值减去偏移量。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.op_Implicit(System.IntPtr)~App.FunctionLibrary.Pointer">
            <summary>
            指针或句柄转换为指针操作器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.op_Implicit(App.FunctionLibrary.Pointer)~System.IntPtr">
            <summary>
            指针操作器转换为指针
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.op_Implicit(App.FunctionLibrary.Pointer)~System.Int32">
            <summary>
            指针对象转换为整数表示。
            </summary>
            <param name="value">指针对象</param>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.op_Implicit(App.FunctionLibrary.Pointer)~System.Int64">
            <summary>
            指针对象转换为整数表示。
            </summary>
            <param name="value">指针对象</param>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.Equals(System.Object)">
            <summary>
            相等判断
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Pointer.GetHashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Printer">
            <summary>
            打印机管理器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Printer.#ctor(System.String)">
            <summary>
            实例化打印机管理器。
            </summary>
            <param name="name">打印机名称(缺省使用当前默认打印机)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Printer.#ctor">
            <summary>
            实例化打印机管理器(系统默认打印机)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Printer.Finalize">
            <summary>
            销毁
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Printer.Name">
            <summary>
            打印机名称
            </summary>
            <value>如果为空则表示默认打印机</value>
        </member>
        <member name="P:App.FunctionLibrary.Printer.Status">
            <summary>
            获取打印机状态
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Printer.IsAvailabled">
            <summary>
            判断当前打印机是否有效(True表示有效，False表示无效)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Printer.DeviceInfo">
            <summary>
            EMF设备信息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Printer.InchToCm(System.Decimal)">
            <summary>
            英寸转换为厘米
            1英寸 = 2.5400厘米
            1厘米=0.3937英寸
            </summary>        
        </member>
        <member name="M:App.FunctionLibrary.Printer.CmToInch(System.Decimal)">
            <summary>
            厘米转换为英寸
            1英寸 = 2.5400厘米
            1厘米 = 0.3937英寸
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Printer.CreatePaper(System.String,System.Decimal,System.Decimal)">
            <summary>
            创建自定义纸张
            </summary>
            <param name="paperName">自定义纸张名称</param>
            <param name="width">纸张的宽度(厘米)。</param>
            <param name="height">纸张的高度(厘米)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Printer.RemovePaper(System.String)">
            <summary>
            删除自定义纸张
            </summary>
            <param name="paperName">自定义纸张名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Printer.PaperExists(System.String)">
            <summary>
            判断指定的纸张是否存在。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Printer.PaperEquals(System.String,System.Decimal,System.Decimal)">
            <summary>
            判断指定名称的纸张尺寸是否和指定尺寸近似相同。
            </summary>
            <param name="paperName">纸张名称</param>
            <param name="width">纸张的宽度(厘米)。</param>
            <param name="height">纸张的高度(厘米)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Printer.PaperEquals(System.Drawing.Printing.PaperSize,System.Decimal,System.Decimal)">
            <summary>
            判断指定的纸张尺寸是否和指定尺寸近似相同。
            </summary>
            <param name="paper">纸张尺寸</param>
            <param name="width">纸张的宽度(厘米)。</param>
            <param name="height">纸张的高度(厘米)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Printer.GetPaper(System.String)">
            <summary>
            获取指定纸张名称的纸张(不存在的纸张名称返回Nothing)。
            </summary>
            <param name="paperName">纸张名称(不存在的纸张名称返回Nothing)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Printer.GetPaper(System.Decimal,System.Decimal)">
            <summary>
            获取指定纸张尺寸的纸张(不存在的纸张返回 null)。
            </summary>
            <param name="width">纸张的宽度(厘米)。</param>
            <param name="height">纸张的高度(厘米)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Printer.AlmostEquals(System.Decimal,System.Decimal)">
            <summary>
            判断两个值近似相同
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Printer.GetPrinters">
            <summary>
            获取打印机名称列表
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Printer.DefaultPrinter">
            <summary>
            获取或者设置默认打印机
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Printer.PrintPage">
            <summary>
            打印文档(使用完毕必须调用 Dispose() 销毁打印文档)。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Socketer">
            <summary>
            嵌套字通讯协议对象
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.LowLevelProtocolReplyString">
            <summary>
            本嵌套字内部使用的应答协议字符串前缀标识
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.mysocket">
            <summary>
            系统嵌套字对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.#ctor">
            <summary>jin
            实例化嵌套字(默认UDP通讯协议)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.#ctor(System.Net.Sockets.ProtocolType)">
            <summary>
            实例化嵌套字
            </summary>
            <param name="protocolType">网络通讯协议类型</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.ProtocolType">
            <summary>
            网络通讯协议类型
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.IsListening">
            <summary>
            当前嵌套字是否处于侦听状态
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.IsBounded">
            <summary>
            本地端口是否已经被绑定状态
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.IsConnected">
            <summary>
            网络连接到目标计算机的状态
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.Port">
            <summary>
            Internet目标主机通讯端口号，不改变当前本机通讯端口号。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.Address">
            <summary>
            Internet目标主机通讯IP地址，不改变当前本机的通讯地址。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.Timeout">
            <summary>
            通讯超时时间：毫秒。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.Encoding">
            <summary>
            字符集编码方式
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.EndChar">
            <summary>
            终止字符、结束字符
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetLocalAddress">
            <summary>
            获取本地网络的 Internet TCP/IP 4 网络通讯协议中的第一个以太网配置的地址。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetLocalAddress(System.String)">
            <summary>
            获取访问服务器时使用的本机IP地址
            </summary>
            <param name="serverNameOrIPAddress">服务器名称或者IP地址(如果是本机，返回环回地址：127.0.0.1)</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetLocalAddresses">
            <summary>
            获取本机可以使用的Internet TCP/IP 4 网际协议 (IP) 地址列表。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.IsIPAddress(System.String)">
            <summary>
            判断给定的点阵格式的IP地址是否为有效地址。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetIPAddresses(System.String)">
            <summary>
            获取指定名称的主机可以使用的 Internet TCP/IP 4 网络通讯协议列表。
            </summary>
            <param name="hostName">主机名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.IsPublicAddress(System.String)">
            <summary>
            判断一个指明的地址是否为公网地址(True表示公网地址，False表示私有的局域网地址)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.IPAddressToLong(System.String)">
            <summary>
            IP地址转换为长整形表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetLocalMacAddress">
            <summary>
            获取本地计算机中以太网络接口的第一块网卡物理地址(取不到地址时返回 00:00:00:00:00:00)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetLocalMacAddress(System.String)">
            <summary>
            获取访问服务器时使用的本机Mac地址
            </summary>
            <param name="hostNameOrIPAddress">服务器名称或者IP地址(如果是本机，返回本机以太网络接口的第一块网卡地址)</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetPhsicalAddressToString(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            获取网卡物理地址字符串表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetMacAddress(System.String)">
            <summary>
            获取指定IP地址或者主机名称的网卡物理MAC地址。
            </summary>
            <param name="ipAddressOrHostname">指定的IP地址或者主机名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetLocalMacAddress_ByWin32API">
            <summary>
            获取本地计算机中以太网络接口的第一块网卡物理地址(取不到地址时返回 00:00:00:00:00:00)。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.NCBCONST.NCBNAMSZ">
            <summary>
            absolute length of a net name
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.NCBCONST.MAX_LANA">
            <summary>
            lana's in range 0 to MAX_LANA inclusive
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.NCBCONST.NCBENUM">
            <summary>
            NCB ENUMERATE LANA NUMBERS
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.NCBCONST.NRC_GOODRET">
            <summary>
            good return
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.NCBCONST.NCBRESET">
            <summary>
            NCB RESET
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.NCBCONST.NCBASTAT">
            <summary>
            NCB ADAPTER STATUS
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.NCBCONST.NUM_NAMEBUF">
            <summary>
            Number of NAME's BUFFER
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetHostName">
            <summary>
            根据机器IP地址获取计算机名称(Dns名称)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.GetHostName(System.String)">
            <summary>
            根据机器IP地址获取计算机名称(Dns名称)
            </summary>
            <param name="ip">获取计算机名称的目标主机IP地址。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.IsLocalAddress(System.String)">
            <summary>
            判断指定的主机名称或者地址是否为本地计算机
            </summary>
            <param name="hostNameOrAddress">指定的主机名称或者地址</param>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.NetworkAvailabled">
            <summary>
            指示本地计算机是否有任何可用的网络连接。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.Available">
            <summary>
            获取已经从网络接收且可供读取的数据量。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.BindPort(System.Net.IPEndPoint)">
            <summary>
            绑定端口号
            </summary>
            <param name="host">绑定的本地主机</param>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.thdListen">
            <summary>
            侦听线程
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Listen">
            <summary>
            启动侦听(Tcp通信方式作为客户机时使用,使用本地IP地址族中的第一块网卡地址,如未绑定端口号时自动绑定)。
            </summary>
            <remarks>端口号为0，使用本地IP地址族中的第一块网卡地址。</remarks>
            <returns>侦听成功返回侦听地址，否则抛出异常。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Listen(System.String@)">
            <summary>
            启动侦听并且返回侦听的IP地址(Tcp通信并且作为服务机或者Udp通信,使用本地IP地址族中的第一块网卡地址,如未绑定端口号时自动绑定)。
            </summary>
            <param name="message">发生错误时返回的错误信息。</param>
            <remarks>端口号为0，使用本地IP地址族中的第一块网卡地址。</remarks>
            <returns>侦听成功返回侦听地址，否则返回Nothing。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Listen(System.Int32)">
            <summary>
            启动侦听(Tcp通信并且作为服务机或者Udp通信,使用本地IP地址族中的第一块网卡地址,如未绑定端口号时自动绑定)。
            </summary>
            <param name="port">侦听的本地端口号(0～65535之间的数值)。</param>
            <remarks>使用本地IP地址族中的第一块网卡地址。</remarks>
            <returns>侦听成功返回侦听地址，否则抛出异常。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Listen(System.Int32,System.String@)">
            <summary>
            启动侦听并且返回侦听的IP地址(Tcp通信并且作为服务机或者Udp通信,使用本地IP地址族中的第一块网卡地址,如未绑定端口号时自动绑定)。
            </summary>
            <param name="port">侦听的本地端口号(0～65535之间的数值)。</param>
            <param name="message">发生错误时返回的错误信息。</param>
            <remarks>使用本地IP地址族中的第一块网卡地址。</remarks>
            <returns>侦听成功返回侦听地址，否则返回Nothing。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Listen(System.Net.IPAddress,System.Int32,System.String@)">
            <summary>
            启动侦听(Tcp通信并且作为服务机或者Udp通信,使用本地IP地址族中的第一块网卡地址,如未绑定端口号时自动绑定)。
            </summary>
            <param name="address">侦听本地的IP地址。</param>
            <param name="port">侦听的本地端口号(0～65535之间的数值)。</param>
            <param name="message">发生错误时返回的错误信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Listen(System.Net.IPAddress,System.Int32)">
            <summary>
            启动侦听(Tcp通信并且作为服务机或者Udp通信,使用本地IP地址族中的第一块网卡地址,如未绑定端口号时自动绑定)。
            </summary>
            <param name="address">侦听本地的IP地址。</param>
            <param name="port">侦听的本地端口号(0～65535之间的数值)。</param> 
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Listen(System.Net.IPEndPoint,System.String@)">
            <summary>
            启动侦听(Tcp通信并且作为服务机或者Udp通信,使用本地IP地址族中的第一块网卡地址,如未绑定端口号时自动绑定)。
            </summary>
            <param name="host">侦听的本地主机地址。</param>
            <param name="message">发生错误时返回的错误信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.StartReceiving(System.Net.Sockets.Socket)">
            <summary>
            启动消息接收线程,并且委托事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.TcpLinstenConnect">
            <summary>
            TCP侦听线程委托过程
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Connect">
            <summary>
            启动嵌套字连接到远端服务器(必须正确配置IpAddress、Port属性)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Connect(System.String@)">
            <summary>
            启动嵌套字连接到远端服务器(必须正确配置IpAddress、Port属性)。
            </summary>
            <param name="message">连接嵌套字发生错误时的错误信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Connect(System.String,System.Int32)">
            <summary>
            启动嵌套字连接到远端服务器。
            </summary>
            <param name="ipaddress">目标主机的通讯IP地址</param>
            <param name="port">目标主机的通讯端口号</param> 
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Connect(System.String,System.Int32,System.String@)">
            <summary>
            启动嵌套字连接到远端服务器。
            </summary>
            <param name="address">目标主机的通讯IP地址</param>
            <param name="port">目标主机的通讯端口号</param> 
            <param name="message">连接嵌套字发生错误时的错误信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Connect(System.Net.IPEndPoint)">
            <summary>
            启动嵌套字连接到远端服务器。
            </summary>
            <param name="remote">远端目标计算机的通讯节点</param> 
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Connect(System.Net.IPEndPoint,System.String@)">
            <summary>
            启动嵌套字连接到远端服务器。
            </summary>
            <param name="remote">远端目标计算机的通讯节点</param>
            <param name="message">连接嵌套字发生错误时的错误信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Close">
            <summary>
            关闭嵌套字并且释放所有资源(如果启动了侦听，将立即停止侦听)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.String)">
            <summary>
            发送网络消息
            </summary>
            <param name="message">消息内容文本</param> 
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.String,System.String,System.Int32)">
            <summary>
            发送网络消息
            </summary>
            <param name="message">消息内容文本</param>
            <param name="ipaddress">发送的目标主机IP地址</param>
            <param name="port">目标主机通讯端口号</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.String,System.Net.EndPoint)">
            <summary>
            发送网络消息
            </summary>
            <param name="message">消息内容文本</param>
            <param name="endpoint">目标计算机的节点</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.String,System.Net.Sockets.Socket,System.Net.EndPoint)">
            <summary>
            发送网络消息
            </summary>
            <param name="message">消息内容文本</param>
            <param name="endpoint">目标计算机的节点</param>
            <param name="socket">发送消息使用的嵌套字对象，一般为远程计算机建立连接时的嵌套字对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.String,System.Net.Sockets.Socket)">
            <summary>
            发送网络消息
            </summary>
            <param name="message">消息内容文本</param>
            <param name="socket">发送消息使用的嵌套字对象，一般为远程计算机建立连接时的嵌套字对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.String,System.String,System.Int32,System.Net.Sockets.Socket)">
            <summary>
            发送网络消息
            </summary>
            <param name="message">消息内容文本</param>
            <param name="address">发送的目标主机IP地址</param>
            <param name="port">目标主机通讯端口号</param>
            <param name="socket">目标嵌套字</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.String,System.Net.EndPoint,System.Net.Sockets.Socket)">
            <summary>
            发送网络消息
            </summary>
            <param name="message">消息内容文本</param>
            <param name="endpoint">目标计算机的节点</param>
            <param name="socket">发送消息使用的嵌套字对象，一般为远程计算机建立连接时的嵌套字对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.Byte[],System.Net.EndPoint,System.Net.Sockets.Socket)">
            <summary>
            发送网络消息
            </summary>
            <param name="buffer">消息内容字节组</param>
            <param name="endpoint">目标计算机的节点</param>
            <param name="socket">发送消息使用的嵌套字对象，一般为远程计算机建立连接时的嵌套字对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.Byte[],System.Net.EndPoint)">
            <summary>
            发送网络消息
            </summary>
            <param name="buffer">消息内容字节组</param>
            <param name="endpoint">目标计算机的节点</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.Byte[],System.Net.Sockets.Socket)">
            <summary>
            发送网络消息
            </summary>
            <param name="buffer">消息内容字节组</param>
            <param name="socket">发送消息使用的嵌套字对象，一般为远程计算机建立连接时的嵌套字对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Send(System.Byte[])">
            <summary>
            发送网络消息
            </summary>
            <param name="buffer">消息内容字节组</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Receive(System.String@)">
            <summary>
            从Internet目标主机接收数据
            </summary>
            <param name="message">接收成功返回接收的文本字符串，接收失败返回错误信息。</param> 
            <returns>接收成功返回True，否则返回False(接收超时返回空字符串)。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Receive(System.String@,System.Net.IPEndPoint@)">
            <summary>
            从Internet目标主机接收数据
            </summary>
            <param name="message">接收成功返回接收的文本字符串，接收失败返回错误信息。</param>
            <param name="remote">发送数据的远端计算机节点(接收失败返回Nothing)。</param>
            <returns>接收成功返回True，否则返回False(接收超时返回空字符串)。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Receive(System.String@,System.Net.IPEndPoint@,System.Net.Sockets.Socket)">
            <summary>
            从Internet目标主机接收数据
            </summary>
            <param name="message">接收成功返回接收的文本字符串，接收失败返回错误信息。</param>
            <param name="remote">发送数据的远端计算机节点(接收失败返回Nothing)。</param>
            <param name="socket">接收数据的嵌套字</param>
            <returns>接收成功返回True，否则返回False(接收超时返回空字符串)。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Receive(System.Net.IPEndPoint@)">
            <summary>
            从Internet主机接收数据
            </summary>
            <returns>接收成功返回接收的文本字符串，否则返回空字符串。</returns>
            <param name="remote">发送数据的远端计算机节点(接收失败返回Nothing)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Receive">
            <summary>
            从Internet主机接收数据
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Receive(System.Net.Sockets.Socket)">
            <summary>
            从Internet目标主机接收数据
            </summary>
            <param name="socket">接收数据的嵌套字</param>
            <remarks>失败抛出异常</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Receive(System.Net.Sockets.Socket,System.Net.IPEndPoint@)">
            <summary>
            从Internet目标主机接收数据
            </summary>
            <param name="remote">发送数据的远端计算机节点(接收失败返回 null)。</param>
            <param name="socket">接收数据的嵌套字</param>
            <remarks>失败抛出异常</remarks>
        </member>
        <member name="E:App.FunctionLibrary.Socketer.Received">
            <summary>
            接收到消息事件，启用端口侦听Listen时才触发此事件，此时Receive函数将失效。
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Socketer.Connected">
            <summary>
            本机作为服务时远端计算机新连接建立时发生的事件。
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Socketer.Disconnected">
            <summary>
            本机作为服务时远端计算机连接关闭时发生的事件。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.MessageString(System.Byte[],System.Int32)">
            <summary>
            消息数据流转化为消息文本
            </summary>
            <param name="data">消息数据流</param>
            <param name="length">数据流长度</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.MessageDispatch(System.String,System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            消息数据分发(true表示消息已分发)
            </summary>
            <param name="message">消息内容</param>
            <param name="remote">远端目标计算机节点</param>
            <param name="socket">嵌套字对象</param>
        </member>
        <member name="F:App.FunctionLibrary.Socketer.ListenQueue_UDP">
            <summary>
            通讯协议远端计算机连接队列
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Socketer.ReceivingThread">
            <summary>
            侦听接收消息线程
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.ReceivingThread.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Ping(System.String)">
            <summary>
            Ping 指定的服务器(默认1000毫秒,尝试3次)。
            </summary>
            <param name="hostNameOrAddress">要对其执行 ping 操作的服务器的 URL、计算机名称或 IP 号。</param>
            <remarks>如果目标服务器禁Ping也返回 True。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Ping(System.String,System.Int32,System.Int32)">
            <summary>
            Ping 指定的服务器。
            </summary>
            <param name="hostNameOrAddress">要对其执行 ping 操作的服务器的 URL、计算机名称或 IP 号。</param>
            <param name="timeout">用于联系目标的时间阈值（以毫秒为单位）。默认值为 1000。</param>
            <param name="tryCount">尝试Ping的次数</param>
            <remarks>如果目标服务器禁Ping也返回 True。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Ping(System.String,System.String@)">
            <summary>
            Ping 指定的服务器(默认1000毫秒)。
            </summary>
            <param name="hostNameOrAddress">要对其执行 ping 操作的服务器的 URL、计算机名称或 IP 号。</param>
            <param name="message">发生错误时的错误描述信息。</param>
            <remarks>如果目标服务器禁Ping也返回 True。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Ping(System.String,System.Int32,System.String@)">
            <summary>
            Ping 指定的服务器(如果目标服务器禁Ping也返回 True)。
            </summary>
            <param name="hostNameOrAddress">要对其执行 ping 操作的服务器的 URL、计算机名称或 IP 号。</param>
            <param name="timeout">用于联系目标的时间阈值（以毫秒为单位）。默认值为 1000。</param>
            <param name="message">发生错误时的错误描述信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.Ping(System.String,System.Int32)">
            <summary>
            Ping 指定的服务器,并返回应答结果。
            </summary>
            <param name="hostNameOrAddress">要对其执行 ping 操作的服务器的 URL、计算机名称或 IP 号。</param>
            <param name="timeout">用于联系目标的时间阈值（以毫秒为单位）。默认值为 1000。</param>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.RemoteHostOnline(System.String)">
            <summary>
            获取远程主机是否在线(如发生异常也视为不在线)
            </summary>
            <param name="ipAddressOrHostname">远程主机名称或IP地址</param>
        </member>
        <member name="T:App.FunctionLibrary.Socketer.PingReply">
            <summary>
            Ping 远程主机的应答返回
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.PingReply.#ctor(System.Net.NetworkInformation.PingReply)">
            <summary>
            Ping 远程主机的应答返回
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Socketer.PingReply.#ctor(System.Boolean,System.String)">
            <summary>
            Ping 远程主机的应答返回
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.PingReply.Status">
            <summary>
            获取发送 Internet 控制消息协议 (ICMP) 回送请求并接收相应 ICMP 回送答复消息的尝试的状态。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.PingReply.Address">
            <summary>
            获取发送 Internet 控制消息协议 (ICMP) 回送答复的主机地址。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.PingReply.RoundtripTime">
            <summary>
            获取发送 Internet 控制消息协议 (ICMP) 回送请求并接收相应 ICMP 回送答复消息所用的毫秒数。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.PingReply.Options">
            <summary>
            获取用于将答复传输到 Internet 控制消息协议 (ICMP) 回送请求的选项。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.PingReply.Buffer">
            <summary>
            获取 Internet 控制消息协议 (ICMP) 回送答复消息中收到的数据缓冲区。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.PingReply.Message">
            <summary>
            获取应答状态的字符串描述信息。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Socketer.PingReply.IsSuccess">
            <summary>
            Ping结果是否成功(如果目标服务器禁Ping也视为成功)。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Threader">
            <summary>
            线程操作对象
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Threader.myhost">
            <summary>
            宿主对象
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Threader.mythread">
            <summary>
            线程对象
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Threader.locker">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Threader.signal">
            <summary>
            挂起信号
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor">
            <summary>
            实例化线程
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.String)">
            <summary>
            实例化线程
            </summary> 
            <param name="name">线程名称</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.String,System.Windows.Forms.Control)">
            <summary>
            实例化线程
            </summary> 
            <param name="name">线程名称</param>
            <param name="host">宿主控件或者窗口对象。</param>
            <remarks>当宿主对象Dispose销毁时当前线程也将自动终止,开始事件和停止事件以宿主对象的委托进行执行。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>
            实例化线程
            </summary> 
            <param name="name">线程名称</param>
            <param name="host">宿主控件或者窗口对象。</param>
            <remarks>当宿主对象Dispose销毁时当前线程也将自动终止,开始事件和停止事件以宿主对象的委托进行执行。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.Windows.Forms.Control,System.Action{App.FunctionLibrary.ThreadEventArgs},System.Action{App.FunctionLibrary.CompletedEventArgs},System.Action{App.FunctionLibrary.ThreadEventArgs})">
            <summary>
            实例化线程
            </summary> 
            <param name="host">宿主控件或者窗口对象。</param>
            <param name="started">线程开始事件委托</param>
            <param name="transact">线程执行事件委托</param>
            <param name="completed">线程完成事件委托</param>
            <remarks>当宿主对象Dispose销毁时当前线程也将自动终止,开始事件和停止事件以宿主对象的委托进行执行。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.Windows.Forms.Control,System.Action{App.FunctionLibrary.ThreadEventArgs},System.Action,System.Action{App.FunctionLibrary.ThreadEventArgs})">
            <summary>
            实例化线程
            </summary>
            <param name="host">宿主控件或者窗口对象。</param>
            <param name="started">线程开始事件委托</param>
            <param name="transact">线程执行事件委托</param>
            <param name="completed">线程完成事件委托</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.Windows.Forms.Control,System.Action{App.FunctionLibrary.ThreadEventArgs},System.Action,System.Action)">
            <summary>
            实例化线程
            </summary>
            <param name="host">宿主控件或者窗口对象。</param>
            <param name="started">线程开始事件委托</param>
            <param name="transact">线程执行事件委托</param>
            <param name="completed">线程完成事件委托</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.Windows.Forms.Control,System.Action,System.Action,System.Action)">
            <summary>
            实例化线程
            </summary>
            <param name="host">宿主控件或者窗口对象。</param>
            <param name="started">线程开始事件委托</param>
            <param name="transact">线程执行事件委托</param>
            <param name="completed">线程完成事件委托</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.Action{App.FunctionLibrary.ThreadEventArgs},System.Action{App.FunctionLibrary.CompletedEventArgs},System.Action{App.FunctionLibrary.ThreadEventArgs})">
            <summary>
            实例化线程
            </summary> 
            <param name="started">线程开始事件委托</param>
            <param name="transact">线程执行事件委托</param>
            <param name="completed">线程完成事件委托</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.Action{App.FunctionLibrary.ThreadEventArgs},System.Action,System.Action{App.FunctionLibrary.ThreadEventArgs})">
            <summary>
            实例化线程
            </summary>
            <param name="started">线程开始事件委托</param>
            <param name="transact">线程执行事件委托</param>
            <param name="completed">线程完成事件委托</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.Action{App.FunctionLibrary.ThreadEventArgs},System.Action,System.Action)">
            <summary>
            实例化线程
            </summary>
            <param name="started">线程开始事件委托</param>
            <param name="transact">线程执行事件委托</param>
            <param name="completed">线程完成事件委托</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.#ctor(System.Action,System.Action,System.Action)">
            <summary>
            实例化线程
            </summary>
            <param name="started">线程开始事件委托</param>
            <param name="transact">线程执行事件委托</param>
            <param name="completed">线程完成事件委托</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Dispose">
            <summary>
            强行终止线程并且销毁所有线程资源(不能保证线程内的事务执行完成)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Threader.Name">
            <summary>
            设置或者返回线程名称。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Threader.Interval">
            <summary>
            线程循环执行时的时间间隔，单位：毫秒。(不改变线程Start启动时的运行方式)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Threader.Status">
            <summary>
            返回线程的运行状态
            </summary>
            <returns>返回线程的运行状态</returns>
        </member>
        <member name="P:App.FunctionLibrary.Threader.IsAlive">
            <summary>
            指示线程的执行状态(如果此线程已启动并且尚未正常终止或中止，则为 true；否则为 false。)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Threader.IsSleep">
            <summary>
            指示线程的休眠状态(线程已经启动，被阻止或挂起)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Threader.Tag">
            <summary>
            其他标签信息，附注备注信息
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Threader.Params">
            <summary>
            与线程关联的用户自定义数据数据槽，对于线程没有实际意义，只用于跨线程操作时线程间的传值。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Threader.RunCount">
            <summary>
            循环次数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Start">
            <summary>
            启动线程(单次直接运行模式)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Start(System.Object[])">
            <summary>
            带参数启动线程(线程运行完毕即刻终止)。
            </summary>
            <param name="params">清空线程数据槽(Params)并重置为参数组的内容。</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Start(System.Boolean,System.Int32)">
            <summary>
            启动线程(直接循环模式)。
            </summary>
            <param name="doLoop">线程是否按循环模式运行</param>
            <param name="interval">循环的时间间隔(单位:毫秒，小于等于0表示直接循环不间歇)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Start(System.Int32,System.Int32)">
            <summary>
            启动线程(线程间歇循环一定次数后自行终止)。
            </summary>
            <param name="runCount">线程循环的次数(在到达循环次数后直接终止，小于0表示永远循环，0或1表示仅执行一次后自动终止)。</param>
            <param name="interval">循环的时间间隔(单位:毫秒，小于等于0表示直接循环不间歇)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.ReStart">
            <summary>
            重新启动线程(不改变线程Start启动时的运行方式,重置线程运行次数)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Abort">
            <summary>
            在调用此方法的线程上引发 ThreadAbortException，以开始终止此线程的过程。
            调用此方法通常会终止线程。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Threader.sleepLength">
            <summary>
            Sleep方法请求休眠的时间长度和请求时刻。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Threader.sleepTick">
            <summary>
            Sleep方法请求休眠的时间长度和请求时刻。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Waiting(System.Int32)">
            <summary>
            休眠、暂停休眠线程(只执行一次,如果线程正在处理业务逻辑时，将不会立即休眠，只有当业务逻辑全部处理完毕后才会真正休眠)。
            </summary>
            <param name="interval">线程休眠的时间：毫秒</param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Sleep(System.Int32)">
            <summary>
            将当前线程挂起指定的时间。
            </summary>
            <param name="millisecond">线程被阻塞的毫秒数。
            <para>指定零 (0) 以指示应挂起此线程以使其他等待线程能够执行。</para>
            <para>指定 System.Threading.Timeout.Infinite 以无限期阻止线程。</para></param>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Suspend">
            <summary>
            挂起线程
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Resume">
            <summary>
            继续挂起的线程，同时解除线程休眠。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Join">
            <summary>
            在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到线程终止为止。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.Join(System.Int32)">
            <summary>
            在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到线程终止或经过了指定时间为止。
            </summary>
            <param name="millisecondsTimeout">等待线程终止的毫秒数。</param>
        </member>
        <member name="E:App.FunctionLibrary.Threader.Started">
            <summary>
            线程启动时激活的事件(仅当设置委托控件Invoker后，线程间操作才是安全的。)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.OnStarted(App.FunctionLibrary.ThreadEventArgs)">
            <summary>
            触发线程开始事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Threader.Transact">
            <summary>
            线程执行事务时激活的事件(线程间操作数据非安全)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.OnTransact(App.FunctionLibrary.ThreadEventArgs)">
            <summary>
            激活线程事务处理事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Threader.Completed">
            <summary>
            线程结束时激活的事件(循环线程在未退出循环之前不会被激活；仅当设置委托控件Invoker后，线程间操作才是安全的。)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.OnCompleted(App.FunctionLibrary.CompletedEventArgs)">
            <summary>
            激活线程完成事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Threader.ExecuteTrans">
            <summary>
            线程执行事务
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Windowser">
            <summary>
            基于句柄的窗口操作器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.Handle">
            <summary>
            当前窗口句柄
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.#ctor(System.Int32)">
            <summary>
            实例化窗口操作器
            </summary>
            <param name="handle">需要操作的窗口句柄值(0表示桌面窗口)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.#ctor(System.Int64)">
            <summary>
            实例化窗口操作器
            </summary>
            <param name="handle">需要操作的窗口句柄值(0表示桌面窗口)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.#ctor(System.IntPtr)">
            <summary>
            实例化窗口操作器
            </summary>
            <param name="handle">需要操作的窗口句柄指针</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.#ctor(System.Windows.Forms.Control)">
            <summary>
            实例化窗口操作器
            </summary>
            <param name="obj">需要窗口句柄操作的控件对象</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.Dispose">
            <summary>
            关闭并释放窗口句柄
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetControl(System.String)">
            <summary>
            获取当前窗口中指明控件文本的控件句柄。
            </summary>
            <param name="text">指明的控件文本</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetControl(System.String[])">
            <summary>
            获取当前窗口指定类名称组的首个子控件或者窗口。
            </summary>
            <param name="classNames">从当前窗口开始的类名数组</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetControls(System.String[])">
            <summary>
            获取当前窗口指定类名称组的子控件或者窗口组。
            </summary>
            <param name="classNames">从当前窗口开始的类名数组</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.ToString">
            <summary>
            窗口表示句柄的浅表字符串。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.ClassName">
            <summary>
            获取句柄窗口的类型名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.Text">
            <summary>
            获取或者设置当前窗口的文本字符串
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.Checked">
            <summary>
            获取或者设置当前窗口的Check属性状态
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.ListBox">
            <summary>
            当前窗口作为列表项控件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.Click">
            <summary>
            针对句柄对象单击鼠标左键
            </summary>
            <returns>执行成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.Focus">
            <summary>
            使当前窗口获得焦点
            </summary>
            <returns>执行成功返回True，否则返回False。</returns>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.Parent">
            <summary>
            设置或者获取父窗口句柄。
            </summary>
            <value>设置的父句柄大于0表示绑架当前窗口，不大于0表示取消绑架。</value>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SetParent(System.IntPtr,System.Boolean)">
            <summary>
            设置父窗口或父容器。
            </summary>
            <param name="parent">父窗口或容器的句柄</param>
            <param name="handleStyle">是否处理窗口样式</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.Owner(System.String)">
            <summary>
            查找当前句柄的指定类名称的父窗口
            </summary>
            <param name="parentClassName" >父窗体的类名称。</param>
            <returns>返回找到的父页面窗口句柄</returns>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.TopOwner">
            <summary>
            查找当前句柄的顶层归属窗口
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.TopWindow">
            <summary>
            获取子窗口中最顶层的窗口(GetTopWindow)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.TopChild(System.String)">
            <summary>
            获取归属于当前窗口的顶层子窗口。
            </summary>
            <param name="windowName">顶层子窗口标题文本名称(严格匹配，不支持模糊检索)</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.ChildWindows">
            <summary>
            枚举当前句柄的所有子窗口
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetWindow(System.String)">
            <summary>
            根据页面窗口的标题文本名称返回顶层窗体句柄。
            </summary>
            <param name="windowName">标题文本名称(严格匹配，不支持模糊检索)。</param>
            <returns>找到的窗体句柄</returns>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetWindow(System.String,System.String[])">
            <summary>
            根据类名称及窗口文本返回窗口句柄
            </summary>
            <param name="text">窗口控件的文本(模糊检索包含该字符串)</param>
            <param name="classNames">类名称数组</param>
            <returns>返回符合筛选条件的第一个窗口句柄</returns>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetWindows(System.String)">
            <summary>
            根据页面窗口的标题文本名称检索所有顶层窗体的句柄数组(模糊检索)。
            </summary>
            <param name="likeName">标题文本名称(模糊检索)</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetWindows">
            <summary>
             将枚举所有顶级窗口，但不枚举子窗口。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetWindows(System.String[])">
            <summary>
            根据页面窗口的标题文本名称检索所有顶层窗体的句柄数组
            </summary>
            <param name="classNames">从当前窗口开始的类名数组</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.FindWindowsByClassName(System.IntPtr,System.String[],System.Int32)">
            <summary>
            在指明句柄的窗口中搜索指定类名称组的句柄组
            </summary>
            <param name="parent">在指明句柄的窗口中查询窗口</param>
            <param name="classNames">搜索的类名组</param>
            <param name="index">当前搜索的类名称索引</param>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.ForegroundWindow">
            <summary>
            系统的顶层窗口(GetForegroundWindow)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.ActiveWindow">
            <summary>
            获取当前活动的窗口(GetActiveWindow)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.FocusedWindow">
            <summary>
            获取当前具有输入焦点的窗口(GetFocus)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetDesktopWindow">
            <summary>
            获取桌面窗口
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.CursorPosWindow">
            <summary>
            获取光标位置处的窗口。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.Activate">
            <summary>
            激活指定句柄的窗口并且使其获取到焦点
            </summary> 
            <returns>成功返回True，否则返回False。</returns>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.WindowState">
            <summary>
            获取或设置窗体的窗口状态。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.CurrentThreadId">
            <summary>
            获取当前执行代码运行的线程标识。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.ThreadId">
            <summary>
            获取当前句柄窗口运行的线程标识
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.ProcessId">
            <summary>
            获取当前句柄窗口运行的进程标识
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.AttachThread(System.IntPtr)">
            <summary>
            把当前窗口归属的线程附加到指明句柄归属的线程中。
            </summary>
            <param name="winHandler">归属于目标线程的窗口句柄。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.AttachThread(System.Int32)">
            <summary>
            把当前窗口归属线程附加到指明的线程中。
            </summary>
            <param name="threadId">指明线程标识的线程。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.DetachThread(System.IntPtr)">
            <summary>
            把当前窗口归属的线程从目标句柄归属的线程中分离。
            </summary>
            <param name="winHandler">归属于目标线程的窗口句柄。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.DetachThread(System.Int32)">
            <summary>
            把当前窗口归属的线程从目标线程标识中分离。
            </summary>
            <param name="threadId">指明线程标识的线程。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.ThreadAttach(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            线程联接(通过与线程关联的句柄)。
            </summary>
            <param name="curwin">当前需要附加线程关联的句柄。</param>
            <param name="dstwin">目的附加到的线程关联句柄。</param>
            <param name="isAttach">TRUE联接线程，FALSE撤消连接</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.ThreadAttach(System.Int32,System.Int32,System.Boolean)">
            <summary>
            线程联接(通过与线程关联的句柄)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.TopMost">
            <summary>
            窗体是否应显示为最顶层窗体(不抢占当前输入焦点)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.Visible">
            <summary>
            窗口的可见性
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.Enabled">
            <summary>
            窗口的可用性
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.IsDisposed">
            <summary>
            获取一个值，该值指示控件是否已经被释放。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.RelationWindow(App.FunctionLibrary.RelationWindowType)">
            <summary>
            获取当前窗口的关联窗口的句柄
            </summary>
            <param name="relation">关联类型</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.Close(System.String)">
            <summary>
            关闭一个已经打开的窗口(CloseWindow)。
            </summary>
            <param name="parentClassName" >父窗体的类名称，缺省或者不正确表示关闭顶层句柄窗口。</param>  
        </member>
        <member name="M:App.FunctionLibrary.Windowser.KillProcess">
            <summary>
            强行销毁当前窗口归属的进程(DestroyProcess)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.KillProcess(System.Int32)">
            <summary>
            强行销毁指定进程ID号的进程。
            </summary>
            <param name="processID">进程ID号</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.KeyDown(System.Windows.Forms.Keys)">
            <summary>
            键盘按下
            </summary>
            <param name="keyCode">键码</param>  
        </member>
        <member name="M:App.FunctionLibrary.Windowser.KeyUp(System.Windows.Forms.Keys)">
            <summary>
            键盘弹起
            </summary>
            <param name="keyCode">键码</param>  
        </member>
        <member name="P:App.FunctionLibrary.Windowser.Menu">
            <summary>
            取得窗口中一个菜单的句柄
            </summary>
            <returns>获取依附于指定窗口的一个菜单的句柄（如果有菜单）；否则返回零</returns>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.SystemMenu">
            <summary>
            获取窗口中的系统菜单句柄
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.MenuClick(System.IntPtr)">
            <summary>
            模拟点击菜单
            </summary>
            <param name="menu">菜单项在窗口中的ID号码</param> 
        </member>
        <member name="M:App.FunctionLibrary.Windowser.MenuItem(System.IntPtr,System.Int32)">
            <summary>
            返回位于菜单中指定位置处的菜单项
            </summary>
            <param name="menu">菜单句柄</param>
            <param name="index">菜单项在菜单中的位置(从0开始)。</param>
            <returns>指定条目的菜单ID。如条目属于一个弹出式菜单，就返回-1；如指定的条目属于一个分隔符（比如一条分隔线）则返回0</returns>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SubMenu(System.IntPtr,System.Int32)">
            <summary>
            返回位于菜单中指定位置处的子菜单
            </summary>
            <param name="menu">菜单句柄</param>
            <param name="index">子菜单在菜单中的位置(从0开始)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.MenuItemCount(System.IntPtr)">
            <summary>
            获取指定菜单句柄的菜单项的数量。
            </summary>
            <param name="menu">菜单句柄</param>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.ClientRectangle">
            <summary>
            获取表示控件的工作区的矩形(获取失败返回 Rectangle.Empty)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.DisplayRectangle">
            <summary>
            获取表示控件显示区域的矩形(获取失败返回 Rectangle.Empty)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.Location">
            <summary>
            获取或设置窗口的左上角坐标信息。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.Size">
            <summary>
            获取或设置窗口的矩形区域大小。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.FlashWindow">
            <summary>
            闪烁显示指定窗口。这意味着窗口的标题和说明文字会发生变化，似乎从活动切换到非活动状态、或反向切换。
            通常对不活动的窗口应用这个函数，引起用户的注意。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Windowser.ShowBorder">
            <summary>
            窗口是否显示边框
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.Update">
            <summary>
            强制立即更新窗口，窗口中以前屏蔽的所有区域都会重画
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.BringToFront">
            <summary>
            将窗口带到 Z 顺序的前面。 
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendToBack">
            <summary>
            将窗口带到 Z 顺序的后面。 
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessage(App.FunctionLibrary.Messages)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessage(App.FunctionLibrary.Messages,System.IntPtr,System.IntPtr)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessage(App.FunctionLibrary.Messages,System.Int32,System.IntPtr)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessage(App.FunctionLibrary.Messages,System.Int32,System.String)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessage(App.FunctionLibrary.Messages,System.Int32,System.Int32)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessage(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessage(System.Int32,System.Int32,System.String)">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessageTimeout(App.FunctionLibrary.Messages,System.Int32)">
            <summary>
            超时发送Windows消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessageTimeout(App.FunctionLibrary.Messages,System.Int32,System.Int32,System.Int32)">
            <summary>
            超时发送Windows消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessageTimeout(App.FunctionLibrary.Messages,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            超时发送Windows消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessageTimeout(App.FunctionLibrary.Messages,System.Int32,System.String,System.Int32)">
            <summary>
            超时发送Windows消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessageTimeout(App.FunctionLibrary.Messages,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            超时发送Windows消息
            </summary>
            <param name="wMsg">消息类型，消息标识。</param>
            <param name="timeout">超时值，采用毫秒为单位(默认:1秒钟)</param>
            <param name="lParam">消息参数</param>
            <param name="wParam">消息参数</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendMessageTimeout(System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            超时发送Windows消息
            </summary>
            <param name="wMsg">消息类型，消息标识。</param>
            <param name="timeout">超时值，采用毫秒为单位(默认:1秒钟)</param>
            <param name="lParam">消息参数</param>
            <param name="wParam">消息参数</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.PostMessage(App.FunctionLibrary.Messages,System.IntPtr,System.IntPtr)">
            <summary>
            投递消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.PostMessage(App.FunctionLibrary.Messages,System.Int32,System.String)">
            <summary>
            投递消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.PostMessage(App.FunctionLibrary.Messages,System.Int32,System.Int32)">
            <summary>
            投递消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.PostMessage(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            投递消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.PostMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
            投递消息
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendNotifyMessage(App.FunctionLibrary.Messages,System.IntPtr,System.IntPtr)">
            <summary>
            该函数将指定的消息发送到一个窗口。如果该窗口是由调用线程创建的；此函数为该窗口调用窗口程序，并等待窗口程序处理完消息后再返回。
            如果该窗口是由不同的线程创建的，此函数将消息传给该窗口程序，并立即返回，不等待窗口程序处理完消息。
            </summary>
            <param name="wMsg">指定被发送的消息。</param>
            <param name="wParam">指定附加的消息指定信息。</param>
            <param name="lParam">指定附加的消息指定信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendNotifyMessage(App.FunctionLibrary.Messages,System.IntPtr,System.String)">
            <summary>
            该函数将指定的消息发送到一个窗口。如果该窗口是由调用线程创建的；此函数为该窗口调用窗口程序，并等待窗口程序处理完消息后再返回。
            如果该窗口是由不同的线程创建的，此函数将消息传给该窗口程序，并立即返回，不等待窗口程序处理完消息。
            </summary>
            <param name="wMsg">指定被发送的消息。</param>
            <param name="wParam">指定附加的消息指定信息。</param>
            <param name="lParam">指定附加的消息指定信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SendNotifyMessage(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            该函数将指定的消息发送到一个窗口。如果该窗口是由调用线程创建的；此函数为该窗口调用窗口程序，并等待窗口程序处理完消息后再返回。
            如果该窗口是由不同的线程创建的，此函数将消息传给该窗口程序，并立即返回，不等待窗口程序处理完消息。
            </summary>
            <param name="wMsg">指定被发送的消息。</param>
            <param name="wParam">指定附加的消息指定信息。</param>
            <param name="lParam">指定附加的消息指定信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.Snapshot">
            <summary>
            捕获窗口快照图像(包括标题和边框)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SnapClient">
            <summary>
            捕获窗口工作区域快照图像(不包括标题和边框)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SnapScreen(System.Boolean)">
            <summary>
            截取窗口对应屏幕图像(当前句柄为0时表示截取全屏,截屏是否返回 null)。
            </summary>
            <param name="includeCursor">是否包含鼠标指针</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SnapScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            屏幕截图
            </summary> 
            <param name="x">截取屏幕的X坐标</param>
            <param name="y">截取屏幕的Y坐标</param>
            <param name="width">截取屏幕图像区域的宽度</param>
            <param name="height">截取屏幕图像区域的高度</param>
            <param name="includeCursor">是否包含鼠标指针</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.SnapScreen(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            屏幕截图
            </summary> 
            <param name="rect">需要截取的屏幕区域(屏幕绝对坐标)</param>
            <param name="includeCursor">是否包含鼠标指针</param>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetCurrentCursor">
            <summary>
            获取当前鼠标图标的句柄
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Implicit(System.IntPtr)~App.FunctionLibrary.Windowser">
            <summary>
            句柄转换为句柄窗口操作器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Implicit(App.FunctionLibrary.Windowser)~System.IntPtr">
            <summary>
            句柄窗口转换为句柄
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Implicit(App.FunctionLibrary.Windowser)~System.Int32">
            <summary>
            句柄窗口转换为整型句柄值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Implicit(App.FunctionLibrary.Windowser)~System.Int64">
            <summary>
            句柄窗口转换为长整型句柄值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Implicit(System.Windows.Forms.Control)~App.FunctionLibrary.Windowser">
            <summary>
            控件转换为句柄窗口。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Implicit(App.FunctionLibrary.Windowser)~System.Windows.Forms.Control">
            <summary>
            句柄窗口转换为控件对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.Equals(System.Object)">
            <summary>
            确定当前句柄窗口是否与指明的句柄相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.GetHashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Equality(App.FunctionLibrary.Windowser,App.FunctionLibrary.Windowser)">
            <summary>
            确定两个句柄窗口表示的句柄是否相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Inequality(App.FunctionLibrary.Windowser,App.FunctionLibrary.Windowser)">
            <summary>
            确定两个句柄窗口表示的句柄是否不相等。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Equality(App.FunctionLibrary.Windowser,System.Int32)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Inequality(App.FunctionLibrary.Windowser,System.Int32)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Equality(App.FunctionLibrary.Windowser,System.Int64)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Inequality(App.FunctionLibrary.Windowser,System.Int64)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Equality(App.FunctionLibrary.Windowser,System.IntPtr)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Inequality(App.FunctionLibrary.Windowser,System.IntPtr)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Equality(System.Int32,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Inequality(System.Int32,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Equality(System.Int64,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Inequality(System.Int64,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Equality(System.IntPtr,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_Inequality(System.IntPtr,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_GreaterThan(App.FunctionLibrary.Windowser,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_LessThan(App.FunctionLibrary.Windowser,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_GreaterThan(App.FunctionLibrary.Windowser,System.Int32)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_LessThan(App.FunctionLibrary.Windowser,System.Int32)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_GreaterThan(App.FunctionLibrary.Windowser,System.Int64)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_LessThan(App.FunctionLibrary.Windowser,System.Int64)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_GreaterThan(App.FunctionLibrary.Windowser,System.IntPtr)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_LessThan(App.FunctionLibrary.Windowser,System.IntPtr)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_GreaterThanOrEqual(App.FunctionLibrary.Windowser,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_LessThanOrEqual(App.FunctionLibrary.Windowser,App.FunctionLibrary.Windowser)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_GreaterThanOrEqual(App.FunctionLibrary.Windowser,System.Int32)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_LessThanOrEqual(App.FunctionLibrary.Windowser,System.Int32)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_GreaterThanOrEqual(App.FunctionLibrary.Windowser,System.Int64)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_LessThanOrEqual(App.FunctionLibrary.Windowser,System.Int64)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_GreaterThanOrEqual(App.FunctionLibrary.Windowser,System.IntPtr)">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Windowser.op_LessThanOrEqual(App.FunctionLibrary.Windowser,System.IntPtr)">
            <summary />
        </member>
        <member name="T:App.FunctionLibrary.ListBoxIndexer">
            <summary />
        </member>
        <member name="P:App.FunctionLibrary.ListBoxIndexer.Count">
            <summary>
            获取列表项总数目。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ListBoxIndexer.SelectedIndex">
            <summary>
            获取列表项控件当前选中的索引
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ListBoxIndexer.Text(System.Int32)">
            <summary>
            获取列表项文本
            </summary>
            <param name="index">获取文本的列表项索引</param>
        </member>
        <member name="M:App.FunctionLibrary.ListBoxIndexer.Add(System.String)">
            <summary>
            新增列表项
            </summary>
            <param name="text">新增的列表项文本</param>
        </member>
        <member name="M:App.FunctionLibrary.ListBoxIndexer.Insert(System.Int32,System.String)">
            <summary>
            插入列表项
            </summary>
            <param name="text">插入的列表项文本</param>
            <param name="index">插入列表项的位置索引</param>
        </member>
        <member name="M:App.FunctionLibrary.ListBoxIndexer.Delete(System.Int32)">
            <summary>
            删除列表项
            </summary>
            <param name="index">删除的列表项索引</param>
        </member>
        <member name="M:App.FunctionLibrary.ListBoxIndexer.Clear">
            <summary>
            清空列表项
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ListBoxIndexer.Find(System.String)">
            <summary>
            查找列表项索引
            </summary>
            <param name="text">查找的字符(精确匹配)</param>
        </member>
        <member name="M:App.FunctionLibrary.ListBoxIndexer.Find(System.Int32,System.String)">
            <summary>
            查找列表项索引
            </summary>
            <param name="index">查找开始的索引</param>
            <param name="text">查找的字符(非精确匹配)</param>
        </member>
        <member name="T:App.FunctionLibrary.WindowHook">
            <summary>
            WindowsHook钩子函数。
            </summary>
            <remarks>注意事项：钩子只能安装一次，因为是全局的钩子，如果重复安装，只有最后一个安装的钩子起作用。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.WindowHook.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowHook.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.KeyDown">
            <summary>
            键盘按下事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.KeyPress">
            <summary>
            键盘按下字符事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.KeyUp">
            <summary>
            键盘抬起事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.MouseDown">
            <summary>
            鼠标按下事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.MouseMove">
            <summary>
            鼠标移动事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.MouseUp">
            <summary>
            鼠标抬起事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.MouseWheel">
            <summary>
            鼠标中建滚动事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.Click">
            <summary>
            鼠标单击事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.DoubleClick">
            <summary>
            鼠标双击事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.WindowHook.WndProc">
            <summary>
            Windows钩子函数激活的Windows消息事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowHook.Open">
            <summary>
            安装钩子(根据钩子事件自动判断钩子类型)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowHook.Open(System.String@)">
            <summary>
            安装钩子(根据钩子事件自动判断钩子类型)。
            </summary>
            <param name="message">打开钩子失败时返回的异常消息。</param>
        </member>
        <member name="M:App.FunctionLibrary.WindowHook.Close">
            <summary>
            卸载所有钩子,结束本模块的操作。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowHook.Close(System.String@)">
            <summary>
            卸载所有钩子,结束本模块的操作。
            </summary>
            <param name="message">卸载钩子失败时返回的异常消息。</param>
        </member>
        <member name="M:App.FunctionLibrary.WindowHook.SetCallWndProcHook(App.FunctionLibrary.WndProcHandler)">
            <summary>
            装载全局消息钩子函数(返回接受消息的窗口句柄)。
            </summary>
            <param name="callback">消息回调函数</param>
        </member>
        <member name="M:App.FunctionLibrary.WindowHook.SetCallWndProcUnhook">
            <summary>
            卸载全局消息钩子函数。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.WindowHook.MouseHookStruct">
            <summary>
            鼠标钩子结构
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.MouseHookStruct.Point">
            <summary>
            POINT结构对象，保存鼠标在屏幕上的x,y坐标.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.MouseHookStruct.MouseData">
            <summary>
            If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. 
            The low-order word is reserved. A positive value indicates that the wheel was rotated forward, 
            away from the user; a negative value indicates that the wheel was rotated backward, toward the user. 
            One wheel click is defined as WHEEL_DELTA, which is 120. 
            If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, WM_NCXBUTTONUP,
            or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button was pressed or released, 
            and the low-order word is reserved. This value can be one or more of the following values. Otherwise, MouseData is not used. 
            XBUTTON1
            The first X button was pressed or released.
            XBUTTON2
            The second X button was pressed or released.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.MouseHookStruct.Flags">
            <summary>
            Specifies the event-injected flag. An application can use the following value to test the mouse Flags. Value Purpose 
            LLMHF_INJECTED Test the event-injected flag.  
            0
            Specifies whether the event was injected. The value is 1 if the event was injected; otherwise, it is 0.
            1-15
            Reserved.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.MouseHookStruct.Time">
            <summary>
            消息时间戳.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.MouseHookStruct.ExtraInfo">
            <summary>
            指定与本消息联系的额外消息. 
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.WindowHook.KeyboardStruct">
            <summary>
            键盘钩子结构
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.KeyboardStruct.vkCode">
            <summary>
            S虚拟按键码(1--254). 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.KeyboardStruct.scanCode">
            <summary>
            硬件按键扫描码. 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.KeyboardStruct.flags">
            <summary>
            键按下：128 抬起：0.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.KeyboardStruct.time">
            <summary>
            消息时间戳.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.WindowHook.KeyboardStruct.dwExtraInfo">
            <summary>
            额外信息. 
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowHook.CallbackWndProc(System.Windows.Forms.Message@)">
            <summary>
            消息处理。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.WindowHook.CWPSTRUCT">
            <summary>
            消息钩子结构体
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.WindowsUser">
            <summary>
            Windows账号管理器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.GetLocalMachine">
            <summary>
            获取本地计算机
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.GetGroup(System.String)">
            <summary>
            获取账号组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.GetGroupUsers(System.DirectoryServices.DirectoryEntry)">
            <summary>
            获取账号组成员列表
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.GetUser(System.String)">
            <summary>
            获取Windows账户
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.Exist(System.String)">
            <summary>
            判断Windows用户是否存在
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.Delete(System.String)">
            <summary>
            删除存在用户
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.GetUserEnabled(System.String)">
            <summary>
            获取 Windows账号的启用/禁用状态
            </summary>
            <param name="userName">指定的Windows账号名称</param>
            <returns>true表示启用,false表示禁用</returns>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.SetUserEnabled(System.String,System.Boolean)">
            <summary>
            设置 Windows账户的启用/禁用状态。
            </summary>
            <param name="userName">指定的Windows账户名称</param>
            <param name="enabled">true表示启用账号，false表示禁用账号</param>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.ChangePassword(System.String,System.String,System.String)">
            <summary>
            更改Windows帐户密码
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.CreateUser(System.String,System.String,System.String)">
            <summary>
            创建windows帐户
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.CreateUser(System.String,System.String)">
            <summary>
            创建windows帐户
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.CreateUser(System.String)">
            <summary>
            创建windows帐户
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.RemoveUser(System.String,System.String)">
            <summary>
            从组中删除用户
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.AddUser(System.String,System.String)">
            <summary>
            追加账户到组中
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.WindowsUser.Exist(System.String,System.String)">
            <summary>
            指明的组中是否存在用户
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.WindowsUser.CurrentUserAdmin">
            <summary>
            获取或者设置当前登录Windows的用户是否具有管理员权限(True表示具有管理员权限，False表示无管理员权限)。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.XorCrypt">
            <summary>
            异或加密算法
            </summary>
            <remarks>自动动态钥匙，为加密的数据更增添了安全因素。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.XorCrypt.Crypt(System.IO.Stream)">
            <summary>
            基于流的加密或解密
            </summary>
            <param name="source">需要加密或解密的流。</param>
            <returns>加密成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.FunctionLibrary.XorCrypt.Crypt(System.Byte[])">
            <summary>
            基于二进制字节流的加密或解密
            </summary>
            <param name="bytes">需要进行加密或解密处理的二进制直接数组</param>
        </member>
        <member name="M:App.FunctionLibrary.XorCrypt.Encrypt(System.String)">
            <summary>
            加密文本字符串，和Decrypt形成一对
            </summary>
            <param name="text">需要加密的文本字符串</param>
            <returns>返回加密后的文本字符串</returns>
        </member>
        <member name="M:App.FunctionLibrary.XorCrypt.Decrypt(System.String)">
            <summary>
            解密文本字符串，和Encrypt形成一对
            </summary>
            <param name="text">需要解密的文本字符串</param>
            <returns>解密后的文本字符串，解密失败返回空字符串。</returns>
        </member>
        <member name="M:App.FunctionLibrary.XorCrypt.CryptFile(System.String,System.String)">
            <summary>
            加解密文件
            </summary>
            <param name="sourceFile">加解密的源文件</param>
            <param name="destFile">加解密后的目标文件</param>
        </member>
        <member name="M:App.FunctionLibrary.XorCrypt.GetKey(System.Int64)">
            <summary>
            获取加密的钥匙
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Zipper">
            <summary>
            Zip压缩解压器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Zipper.Zip(System.IO.Stream)">
            <summary>
            压缩流数据
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Zipper.Zip(System.Byte[])">
            <summary>
            压缩数据
            </summary>
            <param name="datas">被压缩的数据</param>
        </member>
        <member name="M:App.FunctionLibrary.Zipper.Zip(System.String)">
            <summary>
            压缩文本字符串
            </summary>
            <param name="datas">被压缩的文本字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.Zipper.Zip(System.String,System.String)">
            <summary>
            压缩文件或目录。
            </summary>
            <param name="fileOrFolder">被压缩的源文件或目录</param>
            <param name="zipFile">压缩后的文件</param>
        </member>
        <member name="M:App.FunctionLibrary.Zipper.UnZip(System.IO.Stream)">
            <summary>
            解压流数据
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Zipper.UnZip(System.Byte[])">
            <summary>
            解压缩数据
            </summary>
            <param name="datas">被解压缩的数据</param>
        </member>
        <member name="M:App.FunctionLibrary.Zipper.UnZip(System.String)">
            <summary>
            解压缩文本字符串
            </summary>
            <param name="datas">被解压缩的文本字符串</param>
        </member>
        <member name="M:App.FunctionLibrary.Zipper.UnZip(System.String,System.String)">
            <summary>
            解压缩文件
            </summary>
            <param name="zipFile">被解压缩的源文件</param>
            <param name="fileOrFolder">解压缩后的文件</param>
        </member>
        <member name="T:App.FunctionLibrary.BlockLocker">
            <summary>
            程序代码块封闭的相关操作(如果进入已经被封闭的块区域线程将被堵塞)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BlockLocker.Enter">
            <summary>
            进入块区域，如果被保护的块没有封闭则立即关闭区并且进入块区域，否则进入已经被封闭的块区域将堵塞当前线程。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BlockLocker.Exit">
            <summary>
            解除块区域的密闭状态，使得其他的程序可以进入被保护的代码块域。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.BlockLocker.Dispose">
            <summary>
            消耗块封闭锁，并且立即释放被封闭的块区域。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DataEntity">
            <summary>
            数据实体基类
            </summary>
            <remarks>当需要实体化的数据字段和属性的名称或者数据类型不一致时，可以使用Mapping进行映射实体类的属性字段。</remarks>
        </member>
        <member name="P:App.FunctionLibrary.DataEntity.DbCode">
            <summary>
            数据库编号(数据唯一性标识编号)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DataEntity.CheckStamp">
            <summary>
            校验戳(排除校验戳和时间戳之外的所有数据字段的验证值)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DataEntity.TimeStamp">
            <summary>
            时间戳(以时间为依据序列化的编号)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.CreateCheckStamp">
            <summary>
            创建数据校验戳(排除校验戳和时间戳之外的所有数据字段的验证值，20位字符MD5哈希值)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.CreateTimeStamp">
            <summary>
            创建时间戳(20位时间序列字符表达式)
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.ToDataRow">
            <summary>
            根据属性值创建DataRow
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.ToDataRow(System.Data.DataTable)">
            <summary>
            根据类属性设置DataRow的值
            </summary>
            <param name="schemaTable">DataTable架构,一般根据GetDataTableSchema方法获取。</param>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.CopyTo(System.Object)">
            <summary>
            把当前实体类的数据拷贝复制到指定的实体类中。
            </summary>
            <param name="item">指定要复制到其中的实体类。</param>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.CopyTo``1">
            <summary>
            把当前实体类的数据拷贝复制到指定的泛型类型中。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.CopyTo(System.Data.DataRow)">
            <summary>
            根据类属性设置DataRow的值
            </summary>
            <param name="row">要设置值的 DataRow,一般根据GetDataTableSchema方法的得到的DataTable的NewRow方法获取</param>
        </member>
        <member name="T:App.FunctionLibrary.DataEntity.MappingAttribute">
            <summary>
            数据字段属性映射
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.MappingAttribute.#ctor(System.String)">
            <summary>
            实例化映射器
            </summary>
            <param name="columnName">映射DataTable的列名称</param>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.MappingAttribute.#ctor(App.FunctionLibrary.DataType)">
            <summary>
            实例化映射器
            </summary>
            <param name="dataType">映射DataTable列的数据类型</param>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.MappingAttribute.#ctor(System.String,App.FunctionLibrary.DataType)">
            <summary>
            实例化映射器
            </summary>
            <param name="columnName">映射DataTable的列名称</param>
            <param name="dataType">映射DataTable列的数据类型</param>
        </member>
        <member name="M:App.FunctionLibrary.DataEntity.MappingAttribute.#ctor(App.FunctionLibrary.DataType,System.String)">
            <summary>
            实例化映射器
            </summary>
            <param name="columnName">映射DataTable的列名称</param>
            <param name="dataType">映射DataTable列的数据类型</param>
        </member>
        <member name="P:App.FunctionLibrary.DataEntity.MappingAttribute.ColumnName">
            <summary>
            映射DataTable的列名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DataEntity.MappingAttribute.DataType">
            <summary>
            映射DataTable列的数据类型
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DateEmpty">
            <summary>
            日期的空值表达值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DateEmpty.Value">
            <summary>
            日期的空值表达值(公元元年零点时刻:0001-01-01 00:00:00.000)。
            </summary> 
        </member>
        <member name="P:App.FunctionLibrary.DateEmpty.MaxValue">
            <summary>
            日期的最大空值表达值(9999-12-31 00:00:00.000)。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DateEmpty.Greenwich">
            <summary>
            格林威治标准时间(东八区：1970-01-01 08:00:00)
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.BoundsType">
            <summary>
            获取窗口矩形位置和大小的类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.BoundsType.Window">
            <summary>
            相对于屏幕坐标的窗口位置和大小
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.BoundsType.Client">
            <summary>
            相对于屏幕坐标的客户区位置和大小
            </summary> 
        </member>
        <member name="T:App.FunctionLibrary.BufferType">
            <summary>
            清理通讯端口缓冲区的方式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.BufferType.All">
            <summary>
            所有缓冲区，读取和写入缓冲区。
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.BufferType.OnlyReceive">
            <summary>
            仅仅接收缓冲区，也即是读取缓冲区。
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.BufferType.OnlyTransmit">
            <summary>
            仅仅传送缓冲区，也即是写入缓冲区。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.CarryType">
            <summary>
            进制类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CarryType.Binary">
            <summary>
            二进制类型，表示字符：01。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CarryType.Octal">
            <summary>
            八进制类型，表示字符：01234567。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CarryType.Hex">
            <summary>
            十六进制类型，表示字符：0123456789ABCDEF。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CarryType.Other">
            <summary>
            其他特殊进制类型，请设置进制表示字符ExpressChars。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DataType">
            <summary>
            映射的字段数据类型(值为 TypeCode)。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataType.Integer">
            <summary>
            整型/长整型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataType.Decimal">
            <summary>
            十进制数值型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataType.Boolean">
            <summary>
            布尔型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataType.DateTime">
            <summary>
            日期时间型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataType.Binary">
            <summary>
            二进制数据的可变长度流
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DataType.Empty">
            <summary>
            未知的或者不可识别的空类型
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DateType">
            <summary>
            日期时间的格式化类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DateType.Other">
            <summary>
            其他的日期类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DateType.Morning">
            <summary>
            形如yyyy-MM-dd 00:00:00的日期时间类型
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.DateType.Night">
            <summary>
            形如yyyy-MM-dd 23:59:59的日期时间类型
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.DateType.Long">
            <summary>
            长日期格式，形如：yyyy-MM-dd HH:mm:ss
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.DateType.Short">
            <summary>
            短日期格式，形如：yyyy-MM-dd
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.DateType.OnlyDate">
            <summary>
            仅日期部分(等同于Short)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DateType.OnlyTime">
            <summary>
            仅时间部分
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.LogicalType">
            <summary>
            Where条件表达式逻辑运算类别。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.LogicalType.And">
            <summary>
            与逻辑运算
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.LogicalType.Or">
            <summary>
            或逻辑运算
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.MatchType">
            <summary>
            条件匹配比较类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.Equals">
            <summary>
            完全相等 = (字符串忽略大小写)。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.UnEquals">
            <summary>
            不等于 ≠
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.LessThan">
            <summary>
            小于 &lt;
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.LessEquals">
            <summary>
            小于等于 &lt;=
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.GreatThan">
            <summary>
            大于 &gt;
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.GreatEquals">
            <summary>
            大于等于 &gt;=
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.Contains">
            <summary>
            确定字符串是否包含指定的字符串 Like %%(忽略大小写)。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.EndsWith">
            <summary>
            确定字符串的结尾是否与指定的字符串匹配 Like %***(忽略大小写)。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.StartsWith">
            <summary>
            确定字符串的开头是否与指定的字符串匹配 Like ***%(忽略大小写)。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.Is">
            <summary>
            是
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.IsNot">
            <summary>
            否
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.In">
            <summary>
            在范围内
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MatchType.NotIn">
            <summary>
            不在范围内
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ModifyType">
            <summary>
            数据库的修改类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ModifyType.None">
            <summary>
            没有任何操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ModifyType.Edit">
            <summary>
            编辑状态
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ModifyType.AddNew">
            <summary>
            追加、新增状态
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ModifyType.Remove">
            <summary>
            删除、移除状态
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.MoneyType">
            <summary>
            货币金额的处理类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.FinanceFormat">
            <summary>
            按财务格式进行格式化，只格式化为2位小数货币形式，厘位四舍五入，等同于MilliRound。
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.MilliRound">
            <summary>
            厘位四舍五入到分位，等同于FinanceFormat。
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.MilliDiscard">
            <summary>
            舍弃厘位，见厘即舍
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.MilliIncome">
            <summary>
            见厘位即进入到分位
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.CentDiscard">
            <summary>
            舍分(见分即舍)
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.CentIncome">
            <summary>
            进分(见分即入)
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.CentRound">
            <summary>
            分位四舍五入到角位
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.CentToFive">
            <summary>
            分位进位五(够五整除)
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.ChiaoDiscard">
            <summary>
            舍角(见角即舍)
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.ChiaoIncome">
            <summary>
            进角(见角即入)
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.ChiaoRound">
            <summary>
            角位四舍五入
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.MoneyType.ChiaoToFive">
            <summary>
            角位进位五(够五整除) 
            </summary> 
        </member>
        <member name="T:App.FunctionLibrary.DigitType">
            <summary>
            十进制数值类别
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DigitType.Integer">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DigitType.Decimal">
            <summary>
            小数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.DigitType.Signed">
            <summary>
            包括符号
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ReadWriteType">
            <summary>
            属性的读写属性
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ReadWriteType.ReadWirte">
            <summary>
            可读写
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.ReadWriteType.CanRead">
            <summary>
            可读
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.ReadWriteType.CanWrite">
            <summary>
            可写
            </summary> 
        </member>
        <member name="T:App.FunctionLibrary.RelationWindowType">
            <summary>
            关联窗口的关联类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RelationWindowType.First">
            <summary>
            第一个同级兄弟窗口
            </summary>
            <remarks>GW_HWNDFIRST</remarks>
        </member>
        <member name="F:App.FunctionLibrary.RelationWindowType.Last">
            <summary>
            最后一个同级兄弟窗口
            </summary>
            <remarks>GW_HWNDLAST</remarks>
        </member>
        <member name="F:App.FunctionLibrary.RelationWindowType.Next">
            <summary>
            下一个同级兄弟窗口
            </summary>
            <remarks>GW_HWNDNEXT</remarks>
        </member>
        <member name="F:App.FunctionLibrary.RelationWindowType.Prev">
            <summary>
            前一个同级兄弟窗口
            </summary>
            <remarks>GW_HWNDPREV</remarks>
        </member>
        <member name="F:App.FunctionLibrary.RelationWindowType.Owner">
            <summary>
            窗口的所有者
            </summary>
            <remarks>GW_OWNER</remarks>
        </member>
        <member name="F:App.FunctionLibrary.RelationWindowType.FirstChild">
            <summary>
            第一个子窗口
            </summary>
            <remarks>GW_CHILD</remarks>
        </member>
        <member name="T:App.FunctionLibrary.RootKey">
            <summary>
            注册表根键类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RootKey.ClassesRoot">
            <summary>
            类型根键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RootKey.CurrentUser">
            <summary>
            当前登录操作员键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RootKey.LocalMachine">
            <summary>
            当前计算机配置键
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:App.FunctionLibrary.RootKey.Users">
            <summary>
            所有用户配置键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.RootKey.CurrentConfig">
            <summary>
            当前配置键
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SortType">
            <summary>
            排序方式。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.SortType.None">
            <summary>
            不排序
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.SortType.Ascending">
            <summary>
            按递增顺序排序。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.SortType.Descending">
            <summary>
            按递减顺序排序。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.StopReason">
            <summary>
            线程停止原因类型
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.StopReason.Normal">
            <summary>
            正常停止，事务操作完毕停止
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.StopReason.Error">
            <summary>
            发生错误停止
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.StopReason.Cancel">
            <summary>
            用户取消停止
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ThreadStatus">
            <summary>
            线程的运行状态
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ThreadStatus.Running">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ThreadStatus.Stoped">
            <summary>
            停止(或未启动)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ThreadStatus.Sleeping">
            <summary>
            休眠
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.ThreadStatus.Suspended">
            <summary>
            挂起
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.CompletedEventArgs">
            <summary>
            线程停止事件的映射
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CompletedEventArgs.Exception">
            <summary>
            造成线程停止的异常对象。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CompletedEventArgs.Reason">
            <summary>
            线程停止的原因
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CompletedEventArgs.Params">
            <summary>
            与线程关联的数据槽。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ConnectEventArgs">
            <summary>
            连接事件参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ConnectEventArgs.Disconnect">
            <summary>
            指示是否取消继续连接
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ConnectEventArgs.Socket">
            <summary>
            连接的嵌套字
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SerialPortReceivedEventArgs">
            <summary>
            通讯端口接收到数据事件的参数集
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.SerialPortReceivedEventArgs.#ctor(System.Byte[],System.Text.Encoding)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPortReceivedEventArgs.Data">
            <summary>
            接收到的数据字节流
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SerialPortReceivedEventArgs.String">
            <summary>
            接收到数据字节流的编码文本字符串
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.DisconnectEventArgs">
            <summary>
            连接关闭事件参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.DisconnectEventArgs.RemoteEndPoint">
            <summary>
            远端目标主机节点
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.DisconnectEventArgs.#ctor(System.Net.IPEndPoint)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.InvokedEventArgs">
            <summary>
            委托事件参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.InvokedEventArgs.Params">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.InvokedEventArgs.#ctor(App.FunctionLibrary.ParamsCollection)">
            <summary>
            实例化
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.InvokingArgs">
            <summary>
            委托事件参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.InvokingArgs.Cancel">
            <summary>
            取消激活 Invoked 事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.InvokingArgs.#ctor(App.FunctionLibrary.ParamsCollection)">
            <summary>
            实例化
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.SocketReceivedEventArgs">
            <summary>
            Socket消息接收事件参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SocketReceivedEventArgs.Message">
            <summary>
            接收到的消息内容。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.SocketReceivedEventArgs.Buffer">
            <summary>
            接收到的消息内容字节流。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ParamsCollection">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParamsCollection.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.Item(System.Int32)">
            <summary>
            参数的值
            </summary>
            <param name="index">在参数集中的索引</param>
            <value>空值将删除该参数项。</value>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.Item(System.Int32,System.Object)">
            <summary>
            参数的值
            </summary>
            <param name="index">在参数集中的索引</param>
            <param name="defaultValue">参数集中不存在的索引处参数项值的则按默认值返回。</param>
            <value>空值将删除该参数项。</value>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.Item(System.String)">
            <summary>
            参数的值
            </summary>
            <param name="name">参数名称，错误的参数名称Name将新增参数项或者返回Nothing。</param>
            <value>错误或者不存在的参数名称将设置为新增加的参数，空值将删除该参数项。</value>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.Item(System.String,System.Object)">
            <summary>
            参数的值
            </summary>
            <param name="name">参数名称，错误的参数名称Name将新增参数项或者返回Nothing。</param>
            <param name="defaultValue">参数集不存在的参数名称项值的则按默认值返回。</param>
            <value>错误或者不存在的参数名称将设置为新增加的参数，空值将删除该参数项。</value>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.IndexOf">
            <summary>
            获取参数项在参数集中的索引
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ParamsCollection.IndexIndexer">
            <summary>
            索引的索引器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.IndexIndexer.Item(System.String)">
            <summary>
            由参数名称获取参数在参数集中的索引，错误的参数名称返回-1。
            </summary>
            <param name="name">参数名称</param>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.IndexIndexer.Item(System.Object)">
            <summary>
            由参数值获取在参数集中的第一个符合条件的参数索引，错误的参数值返回-1。
            </summary>
            <param name="value">参数值</param>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.Value">
            <summary>
            获取参数项的参数值
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.ParamsCollection.ValueIndexer">
            <summary>
            参数值的索引器
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.ValueIndexer.Item(System.Int32)">
            <summary>
            参数的值
            </summary>
            <param name="index">在参数集中的索引</param>
            <value>空值将删除该参数项。</value>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.ValueIndexer.Item(System.Int32,System.Object)">
            <summary>
            参数的值
            </summary>
            <param name="index">在参数集中的索引</param>
            <param name="defaultValue">参数集中不存在的索引处参数项值的则按默认值返回。</param>
            <value>空值将删除该参数项。</value>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.ValueIndexer.Item(System.String)">
            <summary>
            参数的值
            </summary>
            <param name="name">参数名称，错误的参数名称Name将新增参数项或者返回Nothing。</param>
            <value>错误或者不存在的参数名称将设置为新增加的参数，空值将删除该参数项。</value>
        </member>
        <member name="P:App.FunctionLibrary.ParamsCollection.ValueIndexer.Item(System.String,System.Object)">
            <summary>
            参数的值
            </summary>
            <param name="name">参数名称，错误的参数名称Name将新增参数项或者返回Nothing。</param>
            <param name="defaultValue">参数集不存在的参数名称项值的则按默认值返回。</param>
            <value>错误或者不存在的参数名称将设置为新增加的参数，空值将删除该参数项。</value>
        </member>
        <member name="M:App.FunctionLibrary.ParamsCollection.Remove(System.Int32)">
            <summary>
            移除指定索引index处的参数项
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParamsCollection.Remove(System.String)">
            <summary>
            移除指定参数名称的参数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.ParamsCollection.Add(System.String,System.Object)">
            <summary>
            新增参数项
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:App.FunctionLibrary.ParamsCollection.Insert(System.Int32,System.String,System.Object)">
            <summary>
            在指定的索引位置插入参数项
            </summary>
            <param name="index">插入的位置索引</param>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
        </member>
        <member name="T:App.FunctionLibrary.ThreadEventArgs">
            <summary>
            线程事件参数集
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ThreadEventArgs.Cancel">
            <summary>
            取消线程事件
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ThreadEventArgs.Suspend">
            <summary>
            请求线程挂起
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.ThreadEventArgs.Params">
            <summary>
            与线程关联的数据槽
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Extension">
            <summary>
            杂项扩展函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.Messages(System.Exception)">
            <summary>
            获取描述异常的消息(包括所有InnerException消息)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.Messages(System.Exception,System.String)">
            <summary>
            获取描述异常的消息(包括所有InnerException消息)。
            </summary>
            <param name="ex">异常对象</param>
            <param name="innerSeparator">返回的内置异常描述信息分割符</param>
        </member>
        <member name="M:App.FunctionLibrary.Extension.LenB(System.String)">
            <summary>
            返回字符串的字节长度(中文2字节，英文1字节)。
            </summary>
            <param name="value">目标字符串</param>
            <returns>返回目标字符串的字节长度</returns>
        </member>
        <member name="M:App.FunctionLibrary.Extension.SizeOf(System.String)">
            <summary>
            返回字符串的字节长度，等同于LenB。
            </summary>
            <param name="value">目标字符串</param>
            <returns>返回目标字符串的字节长度</returns>
        </member>
        <member name="M:App.FunctionLibrary.Extension.LenB``1(``0)">
            <summary>
            返回结构体长度
            </summary>
            <param name="struct">目标结构体对象</param>
            <returns>返回目标结构体对象的长度</returns> 
        </member>
        <member name="M:App.FunctionLibrary.Extension.SizeOf``1(``0)">
            <summary>
            返回结构体长度，等同于LenB。
            </summary>
            <param name="struct">目标结构体对象</param>
            <returns>返回目标结构体对象的长度</returns>
        </member>
        <member name="M:App.FunctionLibrary.Extension.LenB(System.Type)">
            <summary>
            返回类型的大小
            </summary>
            <param name="type">目标类型</param>
            <returns>返回目标类型的长度</returns>
        </member>
        <member name="M:App.FunctionLibrary.Extension.SizeOf(System.Type)">
            <summary> 
            返回类型的大小，等同于LenB。
            </summary>
            <param name="type">目标类型</param>
            <returns>返回目标类型的长度</returns>
        </member>
        <member name="M:App.FunctionLibrary.Extension.IIf``1(System.Boolean,``0,``0)">
            <summary>
            根据表达式的计算结果，返回两个对象中的一个。
            </summary>
            <param name="value">要计算的表达式。</param>
            <param name="trueValue">当 value 计算结果为 True 时返回。</param>
            <param name="falsePart">当 value 计算结果为 False 时返回。</param> 
        </member>
        <member name="M:App.FunctionLibrary.Extension.IsNothing``1(``0)">
            <summary>
            指示表达式是否未赋值为 Nothing(处理了DBNull、Empty、DateEmpty的情况)。
            </summary>
            <param name="value">需要判断的 value 引用表达式。</param> 
        </member>
        <member name="M:App.FunctionLibrary.Extension.IsNotNothing``1(``0)">
            <summary>
            指示表达式是否已经赋值 非Nothing(处理了DBNull、Empty、DateEmpty的情况)。
            </summary>
            <param name="value">需要判断的 value 引用表达式。</param> 
        </member>
        <member name="M:App.FunctionLibrary.Extension.IsNotEmpty``1(``0,System.Boolean)">
            <summary>
            判断目标对象是否不为空值(处理了Nothing、DBNull、String.Empty、DateEmpty、枚举器.Count=0的情况)。
            </summary>
            <param name="value">需要判断的目标对象。</param>
            <param name="whiteSpace">是否包含空白字符的判断。</param>
        </member>
        <member name="M:App.FunctionLibrary.Extension.IsEmpty``1(``0,System.Boolean)">
            <summary>
            判断目标对象是否为空值(处理了Nothing、DBNull、String.Empty、DateEmpty、枚举器.Count=0的情况)。
            </summary>
            <param name="value">需要判断的目标对象。</param>
            <param name="whiteSpace">是否包含空白字符的判断。</param>
        </member>
        <member name="M:App.FunctionLibrary.Extension.IfNothing``1(``0,``0)">
            <summary>
            指示表达式未赋值为 Nothing 时返回 trueValue 部分，否则返回表达式自己(处理了Nothing、DBNull、Empty的情况)。
            </summary>
            <param name="value">需要判断的 value 表达式。</param>
            <param name="trueValue">如果表达式 value 为 Nothing 时的需要返回的值</param>
        </member>
        <member name="M:App.FunctionLibrary.Extension.IfEmpty``1(``0,``0)">
            <summary>
            指示表达式为 Empty 时返回 trueValue 部分，否则返回表达式自己(处理了Nothing、DBNull、String.Empty、DateEmpty、枚举器.Count=0的情况)。
            </summary>
            <param name="value">需要判断的 value 表达式。</param>
            <param name="trueValue">如果表达式 value 为 Nothing 时的需要返回的值</param>
        </member>
        <member name="M:App.FunctionLibrary.Extension.IfZero``1(``0,``0)">
            <summary>
            指示值类型表达式为 0 时返回 trueValue 部分，否则返回表达式自己。
            </summary>
            <param name="value">需要判断的值类型表达式。</param>
            <param name="trueValue">表达式为 0 时的返回值。</param>
        </member>
        <member name="M:App.FunctionLibrary.Extension.IfThanZero``1(``0,``0)">
            <summary>
            指示值类型表达式为 小于0 时返回 trueValue 部分，否则返回表达式自己。
            </summary>
            <param name="value">需要判断的值类型表达式。</param>
            <param name="trueValue">表达式小于 0 时的返回值。</param>
        </member>
        <member name="M:App.FunctionLibrary.Extension.IfEquals``1(``0,``0,``0)">
            <summary>
            指示表达式等于equalsPart部分时，返回 trueValue部分，否则返回表达式自己。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.ThisMe``1(``0)">
            <summary>
            返回目标对象的自身实例
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.SyncLocalHost(System.DateTime)">
            <summary>
            同步本机系统时间
            </summary>
            <param name="daytime">需要设置为的时间</param>
        </member>
        <member name="M:App.FunctionLibrary.Extension.ToXml``1(``0)">
            <summary>
            对象实例输出为Xml文档格式字符串表达式
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.Equals``1(``0,``0,System.Boolean)">
            <summary>
            判断两个对象是否相同(如为字符串则忽略大小写;当同时为空时也视为相同,object.ReferenceEquals 仅局限于判断实例对象)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.Equals``1(``0,``0[])">
            <summary>
            是否等于目标数组中的任意一个值(忽略大小写)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.HashEquals(System.Object,System.Object)">
            <summary>
            检测两个对象哈希值是否相同(只要内容和结构相同就视为相同，不同于 ReferenceEquals 实例相同)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.ValueEquals(System.Object,System.Object)">
            <summary>
            检测两个对象的属性和字段值是否相同(不同于 ReferenceEquals 实例相同)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.GetBytes(System.Object)">
            <summary>
            获取对象的字节流(非序列化模式)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.GetWin32Exception">
            <summary>
            获取由上一个非托管函数调用返回的异常对象
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.GetRandomWin32Exception">
            <summary>
            获取一个随机的非托管函数调用异常对象。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Extension.Abort(System.Threading.Tasks.Task)">
            <summary>
            中断异步任务 Task 的执行逻辑(异步执行的委托中将产生中断异常 ThreadAbortException)。
            </summary>
            <param name="task">要中断执行的异步任务</param>
        </member>
        <member name="T:App.FunctionLibrary.MD5Hash">
            <summary>
            MD5算法获取哈希值
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.#ctor(System.IO.Stream)">
            <summary>
            实例化哈希值算法
            </summary>
            <param name="stream">需要获取哈希值的流对象</param>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            实例化哈希值算法
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.#ctor(System.String,System.Text.Encoding)">
            <summary>
            实例化哈希值算法
            </summary>
            <param name="value">需要做哈希计算的字符串表达式</param>
            <param name="encoding">字符编码集(缺省表示 UTF8 编码集)</param>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.#ctor(System.Object)">
            <summary>
            实例化哈希值算法
            </summary>
            <param name="obj">需要做哈希计算的对象实例</param>
        </member>
        <member name="P:App.FunctionLibrary.MD5Hash.Value">
            <summary>
            获取16位哈希值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MD5Hash.Value10">
            <summary>
            获取10位哈希值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MD5Hash.Value8">
            <summary>
            获取8位哈希值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MD5Hash.Value4">
            <summary>
            获取4位哈希值。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.MD5Hash.Value2">
            <summary>
            获取2位哈希值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.ToString">
            <summary>
            获取哈希值的字符串表达式(16位哈希值，32位字符串长度)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.ToString20">
            <summary>
            获取哈希值的字符串表达式(10位哈希值，20位字符串长度)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.ToString16">
            <summary>
            获取哈希值的字符串表达式(8位哈希值，16位字符串长度)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.ToString8">
            <summary>
            获取哈希值的字符串表达式(4位哈希值，8位字符串长度)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.ToString4">
            <summary>
            获取哈希值的字符串表达式(2位哈希值，4位字符串长度)。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.MD5Hash.getValue(System.Int32)">
            <summary>
            获取指定位数的哈希值
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Win32">
            <summary>
            Api函数声明
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.RegisterWindowMessage(System.String)">
            <summary>
            获取分配给一个字串标识符的消息编号
            </summary>
            <param name="lpString"></param>
            <returns>零表示出错</returns> 
        </member>
        <member name="M:App.FunctionLibrary.Win32.SendMessageTimeout(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            向窗口发送一条消息。如窗口位于不同的线程中，则利用这个函数可以指定一个超时值，以便在另一个进程挂起的时候防止调用进程也永远挂起
            </summary> 
            <param name="hwnd">要接收消息的一个窗口的句柄</param>
            <param name="msg">消息的标识符</param>
            <param name="lpdwResult">函数结果</param>
            <param name="lParam">消息参数</param>
            <param name="wParam">消息参数</param>
            <param name="fuFlags">异步标识,SMTO类型参数</param>
            <param name="uTimeout">超时时间</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.PeekMessage(App.FunctionLibrary.MSG@,System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            消息检查线程消息队列，并将该消息（如果存在）放于指定的结构。
            </summary>
            <param name="msg">接收消息信息的MSG结构指针</param>
            <param name="hWnd">其消息被检查的窗口句柄</param>
            <param name="wMSGfilterMin">指定被检查的消息范围里的第一个消息</param>
            <param name="wMsgFilterMax">指定被检查的消息范围里的最后一个消息</param>
            <param name="wRemoveMsg">
            确定消息如何被处理
            <para>PM_NOREMOVE:PeekMessage处理后，消息不从队列里除掉。</para>
            <para>PM_REMOVE:PeekMessage处理后，消息从队列里除掉。</para>
            <para>PM_NOYIELD:此标志使系统不释放等待调用程序空闲的线程。可将PM_NOYIELD随意组合到PM_NOREMOVE或PM_REMOVE。</para>
            </param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.SendNotifyMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            该函数将指定的消息发送到一个窗口。如果该窗口是由调用线程创建的；此函数为该窗口调用窗口程序，并等待窗口程序处理完消息后再返回。
            如果该窗口是由不同的线程创建的，此函数将消息传给该窗口程序，并立即返回，不等待窗口程序处理完消息。
            </summary>
            <param name="hWnd">
            其窗口程序将接收消息的窗口的句柄。如果此参数为HWND_BROADCAST，则消息将被发送到系统中所有顶层窗口，
            包括无效或不可见的非自身拥有的窗口、被覆盖的窗口和弹出式窗口，但消息不被发送到子窗口。
            </param>
            <param name="Msg">指定被发送的消息。</param>
            <param name="wParam">指定附加的消息指定信息。</param>
            <param name="lParam">指定附加的消息指定信息。</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.CreateFileMapping(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            创建一个新的文件映射内核对象
            </summary>
            <param name="hFile">指定欲在其中创建映射的一个文件句柄。0xFFFFFFFF（-1，即INVALID_HANDLE_VALUE）表示在页面文件中创建一个可共享的文件映射。</param>
            <param name="lpFileMappigAttributes">SECURITY_ATTRIBUTES，它指明返回的句柄是否可以被子进程所继承，指定一个安全对象，在创建文件映射时使用。如果为NULL（用ByVal As Long传递零），表示使用默认安全对象。</param>
            <param name="flProtect">
            <para>PAGE_READONLY 以只读方式打开映射</para>
            <para>PAGE_READWRITE 以可读、可写方式打开映射</para>
            <para>PAGE_WRITECOPY 为写操作留下备份</para>
            </param>
            <param name="dwMaximumSizeHigh">文件映射的最大长度的高32位</param>
            <param name="dwMaximumSizeLow">文件映射的最大长度的低32位。如这个参数和dwMaximumSizeHigh都是零，就用磁盘文件的实际长度。</param>
            <param name="lpName">指定文件映射对象的名字。如存在这个名字的一个映射，函数就会打开它。用vbNullString可以创建一个无名的文件映射。</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.MapViewOfFile(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将一个文件映射对象映射到当前应用程序的地址空间。MapViewOfFileEx允许我们指定一个基本地址来进行映射。
            </summary>
            <param name="hFileMappingObject">文件映射对象的句柄。</param>
            <param name="dwDesiredAccess">
            <para>FILE_MAP_WRITE        映射可读可写。文件映射对象必须通过PAGE_READWRITE访问创</para>
            <para>FILE_MAP_READ         映射只读。文件映射对象必须通过PAGE_READ 或 PAGE_READWRITE访问创建。</para>
            <para>FILE_MAP_ALL_ACCESS   与FILE_MAP_WRITE相同。</para>
            <para>FILE_MAP_COPY         映射时保留写操作的副本。文件映射对象必须用PAGE_WRITECOPY访问在win95下创建</para>
            </param>
            <param name="dwFileOffsetHigh">文件中映射起点的高32位地址。</param>
            <param name="dwFileOffsetLow">文件中映射起点的低32位地址。</param>
            <param name="dwNumberOfBytesToMap">文件中要映射的字节数。用零映射整个文件映射对象。</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.MapViewOfFileEx(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将一个文件映射对象映射到当前应用程序的地址空间。MapViewOfFileEx允许我们指定一个基本地址来进行映射。
            </summary>
            <param name="hFileMappingObject">文件映射对象的句柄。</param>
            <param name="dwDesiredAccess">
            <para>FILE_MAP_WRITE        映射可读可写。文件映射对象必须通过PAGE_READWRITE访问创</para>
            <para>FILE_MAP_READ         映射只读。文件映射对象必须通过PAGE_READ 或 PAGE_READWRITE访问创建。</para>
            <para>FILE_MAP_ALL_ACCESS   与FILE_MAP_WRITE相同。</para>
            <para>FILE_MAP_COPY         映射时保留写操作的副本。文件映射对象必须用PAGE_WRITECOPY访问在win95下创建</para>
            </param>
            <param name="dwFileOffsetHigh">文件中映射起点的高32位地址。</param>
            <param name="dwFileOffsetLow">文件中映射起点的低32位地址。</param>
            <param name="dwNumberOfBytesToMap">文件中要映射的字节数。用零映射整个文件映射对象。</param>
            <param name="lpBaseAddress">指定映射文件映射对象的地址。如这个地址处没有足够的内存空间，那么对MapViewOfFileEx的调用会失效。零表示允许windows寻找一个地址。</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
            获取与指定窗口关联在一起的一个进程和线程标识符
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.Win32.AttachThreadInput(System.Int32,System.Int32,System.Int32)">
            <summary>
            通常，系统内的每个线程都有自己的输入队列。本函数（既“连接线程输入函数”）允许线程和进程共享输入队列。连接了线程后，输入焦点、窗口激活、鼠标捕获、键盘状态以及输入队列状态都会进入共享状态
            </summary>
            <param name="idAttach">欲连接线程的标识符</param>
            <param name="idAttachTo">与idAttach线程连接的另一个线程的标识符</param>
            <param name="fAttach">TRUE（非零）连接，FALSE撤消连接</param> 
        </member>
        <member name="M:App.FunctionLibrary.Win32.SetWindowPos(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            为窗口指定一个新位置和状态。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>
            获得有关指定窗口的信息，函数也获得在额外窗口内存中指定偏移位地址的32位度整型值。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            改变指定窗口的位置和大小。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.UpdateWindow(System.IntPtr)">
            <summary>
            强制立即更新窗口，窗口中以前屏蔽的所有区域都会重画
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.SetFocus(System.IntPtr)">
            <summary>
            设置窗口焦点
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetFocus">
            <summary>
            获取焦点窗口
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.Win32.FindWindow(System.String,System.String)">
            <summary>
            寻找窗口列表中第一个符合指定条件的顶级窗口
            </summary>
            <param name="lpClassName">指向包含了窗口类名</param>
            <param name="lpWindowName">指向包含了窗口标题（或标签）</param> 
        </member>
        <member name="M:App.FunctionLibrary.Win32.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            在窗口列表中寻找与指定条件相符的第一个子窗口
            </summary>
            <param name="parentHandle">在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）</param>
            <param name="startHandle">从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索</param>
            <param name="lpClassName">欲搜索的类名。零表示忽略</param>
            <param name="lpWindowName">欲搜索的类名。零表示忽略</param> 
        </member>
        <member name="M:App.FunctionLibrary.Win32.EnumWindows(App.FunctionLibrary.Win32.EnumWindowsHandler,System.Int32)">
            <summary>
             将枚举所有顶级窗口，但不枚举子窗口。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Win32.EnumWindowsHandler">
            <summary>
            窗口枚举委托
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.EnumChildWindows(System.IntPtr,App.FunctionLibrary.Win32.EnumWindowsHandler,System.Int32)">
            <summary>
            为指定的父窗口枚举子窗口
            </summary>
            <param name="hWndParent">欲枚举子窗口的父窗口的句柄</param>
            <param name="lpEnumFunc">为每个子窗口调用的函数的指针。用AddressOf运算符获得函数在一个标准模块中的地址</param>
            <param name="lParam">在枚举期间，传递给dwcbkd32.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的。</param>
            <returns>非零表示成功，零表示失败</returns>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetDesktopWindow">
            <summary>
            获取桌面窗口句柄
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetTopWindow(System.Int32)">
            <summary>
            获取指定窗口的子窗口中最顶层的窗口句柄
            </summary>
            <param name="parent">指定的窗口句柄</param>
            <returns>失败返回0; 成功返回最顶层的子窗口句柄</returns>
        </member>
        <member name="M:App.FunctionLibrary.Win32.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            改变指定子窗口的父窗口。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetParent(System.IntPtr)">
            <summary>
            获取父窗口
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            获取窗口的类名称
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetWindow(System.IntPtr,System.Int32)">
            <summary>
            获得一个窗口的句柄，该窗口与某源窗口有特定的关系
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            控制窗口的可见性
            </summary>
            <returns>Integer，如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）</returns>    ''' <remarks></remarks>
        </member>
        <member name="M:App.FunctionLibrary.Win32.EnableWindow(System.IntPtr,System.Int32)">
            <summary>
            窗口或控件接受鼠标和键盘的输入
            </summary>
            <param name="hwnd">被允许/禁止的窗口句柄</param>
            <param name="fEnable">定义窗口是被允许，还是被禁止。若该参数为TRUE，则窗口被允许。若该参数为FALSE，则窗口被禁止。 </param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.IsWindowVisible(System.IntPtr)">
            <summary>
            判断窗口是否可见
            </summary>
            <returns>如窗口可见则返回TRUE（非零）</returns>
        </member>
        <member name="M:App.FunctionLibrary.Win32.IsIconic(System.IntPtr)">
            <summary>
            判断窗口是否已最小化
            </summary> 
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetCursorPos(App.FunctionLibrary.POINT@)">
            <summary>
            获取当前鼠标的位置
            </summary>
            <param name="lpPoint">鼠标位置返回值</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            设置当前鼠标的位置
            </summary>
            <param name="x">鼠标的位置X值</param>
            <param name="y">鼠标的位置Y值</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.mouse_event(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            鼠标事件操作函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.keybd_event(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            键盘事件操作函数
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            根据当前的扫描码和键盘信息，将一个虚拟键转换成ASCII字符
            </summary>
            <param name="uVirtKey">欲转换的虚拟键</param>
            <param name="uScanCode">键的扫描码。如键处于抬起状态，会设置高位（设为1）；如按下，则清除高位（设为0）</param>
            <param name="lpbKeyState">描述了键盘状态的一个256字符数组的第一个条目。</param>
            <param name="lpwTransKey">输出：用于装载转换过后的字符的一个整数变量。可用 chr()函数将这个值转换成一个字串</param>
            <param name="fuState">如一个菜单处于活动状态，则设为1</param> 
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetMenu(System.IntPtr)">
            <summary>
            取得窗口中一个菜单的句柄
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetSubMenu(System.IntPtr,System.Int32)">
            <summary>
            获取子菜单句柄
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.RemoveMenu(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            从指定菜单消除一个菜单项或分离一个子菜单
            </summary>
            <param name="hMenu">将被修改的菜单的句柄。</param>
            <param name="nPos">指定将被消除的菜单项，其含义由参数uFlages决定。</param>
            <param name="flags">
            MF_BYCOMMAND  = 0x0   :表示nPos给出菜单项的标识符。
            MF_BYPOSITION = 0x400 :表示nPos给出菜单项相对于零的位置。
            </param>
            <remarks>只要一个菜单被修改，无论它是否在显示窗口里，应用程序都必须调用函数DrawMenuBar。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Win32.DeleteMenu(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            从指定菜单删除一个菜单项
            </summary>
            <param name="hMenu">将被修改的菜单的句柄。</param>
            <param name="nPos">指定将被删除的菜单项，其含义由参数uFlages决定。</param>
            <param name="flags">
            <para>MF_BYCOMMAND  = 0x0   :表示nPos给出菜单项的标识符。</para>
            <para>MF_BYPOSITION = 0x400 :表示nPos给出菜单项相对于零的位置。</para>
            </param>
            <remarks>只要一个菜单被修改，无论它是否在显示窗口里，应用程序都必须调用函数DrawMenuBar。</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetMenuItemID(System.IntPtr,System.Int32)">
            <summary>
            返回位于菜单中指定位置处的条目的菜单ID
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetMenuItemCount(System.Int32)">
            <summary>
            返回菜单中条目（菜单项）的数量
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Win32.HookInvoke">
            <summary>
            定义钩子的委托类型
            </summary>
            <param name="wParam">Windows 消息参数</param>
            <param name="lParam">lParam消息参数</param>
            <param name="nCode">nCode钩子链传递回来的参数，0表示此消息(被之前的消息钩子)丢弃，非0表示此消息继续有效</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.SetWindowsHookEx(App.FunctionLibrary.HookType,App.FunctionLibrary.Win32.HookInvoke,System.IntPtr,System.UInt32)">
            <summary>
            安装钩子的函数
            </summary>
            <param name="idHook">钩子的类型，即它处理的消息类型</param>
            <param name="lpfn">钩子子程的地址指针。如果dwThreadId参数为0或是一个由别的进程创建的线程的标识，lpfn必须指向DLL中的钩子子程。除此以外，lpfn可以指向当前进程的一段钩子子程代码。钩子函数的入口地址，当钩子钩到任何消息后便调用这个函数。</param>
            <param name="hInstance">应用程序实例的句柄。标识包含lpfn所指的子程的DLL。如果dwThreadId 标识当前进程创建的一个线程，而且子程代码位于当前进程，hMod必须为NULL。可以很简单的设定其为本应用程序的实例句柄。</param>
            <param name="threadId">与安装的钩子子程相关联的线程的标识符。如果为0，钩子子程与所有的线程关联，即为全局钩子。</param>
            <returns>函数成功则返回钩子子程的句柄，失败返回NULL。</returns>
        </member>
        <member name="M:App.FunctionLibrary.Win32.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            卸载钩子(在使用完钩子之后需要卸载)。
            </summary>
            <param name="hHook">需要卸载的钩子的句柄。</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.CallNextHookEx(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            传递钩子消息
            </summary>
            <param name="hHook">当前钩子的句柄，由SetWindowsHookEx()函数返回。</param>
            <param name="ncode">传给钩子过程的事件代码。</param>
            <param name="wParam">和lParam 分别是传给钩子子程的wParam值，其具体含义与钩子类型有关。</param>
            <param name="lParam">参数</param>
            <remarks>在钩子子程中调用得到控制权的钩子函数在完成对消息的处理后，
            如果想要该消息继续传递，那么它必须调用CallNextHookEx来传递它，以执行钩子链表所指的下一个钩子子程。
            这个函数成功时返回钩子链中下一个钩子过程的返回值，返回值的类型依赖于钩子的类型。
            钩子函数也可以通过直接返回TRUE来丢弃该消息，并阻止该消息的传递。
            (否则的话，其他安装了钩子的应用程序将不会接收到钩子的通知而且还有可能产生不正确的结果。)</remarks>
        </member>
        <member name="M:App.FunctionLibrary.Win32.DeleteDC(System.IntPtr[])">
            <summary>
            删除环境句柄指针组
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Win32.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Drawing.CopyPixelOperation)">
            <param name="hdcDest">目标设备的句柄</param>
            <param name="nXDest">目标对象的左上角的X坐标</param>
            <param name="nYDest">目标对象的左上角的Y坐标</param>
            <param name="nWidth">目标对象的矩形宽度</param>
            <param name="nHeight">目标对象的矩形长度</param>
            <param name="hdcSrc">源设备的句柄</param>
            <param name="nXSrc">源对象的左上角的X坐标</param>
            <param name="nYSrc">源对象的左上角的Y坐标</param>
            <param name="dwRop">光栅的操作值</param>
        </member>
        <member name="M:App.FunctionLibrary.Win32.GetStockObject(System.Int32)">
            <summary>
            该函数检索预定义的备用笔、刷子、字体或者调色板的句柄
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Singleton">
            <summary>
            全局唯一的单体实例化对象。
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Singleton.Instance">
            <summary>
            获取单体实例化对象
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Singleton`1">
            <summary>
            全局唯一的单体实例化对象。
            </summary>
            <typeparam name="T">要进行单体实例化对象的泛型类型</typeparam>
        </member>
        <member name="P:App.FunctionLibrary.Singleton`1.Instance">
            <summary>
            获取泛型类型的单体实例化对象
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.StringTransfer">
            <summary>
            字符串转义操作器
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringTransfer.GetEnumerator">
            <summary>
            获取转义操作的枚举器。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringTransfer.#ctor(App.FunctionLibrary.Pair[])">
            <summary>
            多组标识字符一起转义(注意标识字符的转义顺序)。
            </summary>
            <param name="marks">标识字符对儿列表(Pair.Name=转义开始字符标识,Pair.Value=转义结束字符标识)。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringTransfer.#ctor(System.String)">
            <summary>
            实例化字符串转移器
            </summary>
            <param name="marks">开始和结束相同的转义标识字符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringTransfer.#ctor(System.String,System.String)">
            <summary>
            实例化字符串转移器
            </summary>
            <param name="begin">需要转义的开始字符标识</param>
            <param name="finally">需要转义的结束字符标识</param>
        </member>
        <member name="M:App.FunctionLibrary.StringTransfer.Todo(System.String,System.Boolean,System.Boolean)">
            <summary>
            执行转义,并且返回转义后的字符串表达式。
            </summary>
            <param name="value">需要转义的字符串表达式。</param>
            <param name="pairingCheck">是否做配对检查。</param>
            <param name="includeMarks">转义的字符串是否包括标识符</param>
        </member>
        <member name="M:App.FunctionLibrary.StringTransfer.Undo(System.String)">
            <summary>
            反转义(取消转义，还原转义)，并且返回反转义后的字符串表达式。
            </summary>
            <param name="value">需要反转义的字符串表达式</param>
        </member>
        <member name="M:App.FunctionLibrary.StringTransfer.CleanDo(System.String,System.Boolean)">
            <summary>
            清理转义符标识的部分，并且返回清理后的字符串。
            </summary>
            <param name="value">字符串表达式</param>
            <param name="pairingCheck">是否做配对检查。</param>
        </member>
        <member name="M:App.FunctionLibrary.StringTransfer.ToString">
            <summary>
            返回转义字符串表达式。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.StringTransfer.Clone">
            <summary>
            克隆一个包含当前转义标识字符的转义操作器(不包括转义数据)。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Sorter">
            <summary>
            排序项
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Sorter.Value">
            <summary>
            参与排序的值
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Sorter.SortType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Sorter.#ctor(System.Object,App.FunctionLibrary.SortType)">
            <summary>
            实例化排序项
            </summary>
            <param name="value">参与排序的值</param>
            <param name="sortType">排序类型(升序/降序)</param>
        </member>
        <member name="T:App.FunctionLibrary.Messages">
            <summary>
            Windows消息常数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.HWND_TOP">
            <summary>
            将窗口置于Z序的顶部
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.HWND_BOTTOM">
            <summary>
            将窗口置于Z序的底部
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.HWND_TOPMOST">
            <summary>
            将窗口置于列表顶部，并位于任何最顶部窗口的前面
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.HWND_NOTOPMOST">
            <summary>
            将窗口置于列表顶部，并位于任何最顶部窗口的后面
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.HWND_BROADCAST">
            <summary>
            消息广播
            </summary> 
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SETTINGCHANGE">
            <summary>
            通知注册表己被修改。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NULL">
            <summary>
            空消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CREATE">
            <summary>
            应用程序创建一个窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DESTROY">
            <summary>
            一个窗口被销毁
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MOVE">
            <summary>
            移动一个窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SIZE">
            <summary>
            改变一个窗口的大小
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ACTIVATE">
            <summary>
            一个窗口被激活或失去激活状态
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SETFOCUS">
            <summary>
            获得焦点后
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_KILLFOCUS">
            <summary>
            失去焦点
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ENABLE">
            <summary>
            改变Enable状态
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SETREDRAW">
            <summary>
            设置窗口是否能重画
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SETTEXT">
            <summary>
            应用程序发送此消息来设置一个窗口的文本
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_GETTEXT">
            <summary>
            应用程序发送此消息来复制对应窗口的文本到缓冲区
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_GETTEXTLENGTH">
            <summary>
            得到与一个窗口有关的文本的长度（不包含空字符）
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PAINT">
            <summary>
            要求一个窗口重画自己
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_QT_PAINT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CLOSE">
            <summary>
            当一个窗口或应用程序要关闭时发送一个信号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_QUERYENDSESSION">
            <summary>
            当用户选择结束对话框或程序自己调用ExitWindows函数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_QUIT">
            <summary>
            用来结束程序运行或当程序调用PostQuitMessage函数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_QUERYOPEN">
            <summary>
            当用户窗口恢复以前的大小位置时，把此消息发送给某个图标。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ERASEBKGND">
            <summary>
            当窗口背景必须被擦除时（例在窗口改变大小时）。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SYSCOLORCHANGE">
            <summary>
            当系统颜色改变时，发送此消息给所有顶级窗口。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ENDSESSION">
            <summary>
            当系统进程发出WM_QUERYENDSESSION消息后，此消息发送给应用程序通知它对话是否结束。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SYSTEMERROR">
            <summary>
            系统错误
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SHOWWINDOW">
            <summary>
            当隐藏或显示窗口是发送此消息给这个窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ACTIVATEAPP">
            <summary>
            发此消息给应用程序哪个窗口是激活的，哪个是非激活的.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_FONTCHANGE">
            <summary>
            当系统的字体资源库变化时发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_TIMECHANGE">
            <summary>
            当系统的时间变化时发送此消息给所有顶级窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CANCELMODE">
            <summary>
            发送此消息来取消某种正在进行的模态（操作）
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SETCURSOR">
            <summary>
            如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时，就发消息给某个窗口。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MOUSEACTIVATE">
            <summary>
            当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CHILDACTIVATE">
            <summary>
            发送此消息给MDI子窗口当用户点击此窗口的标题栏，或当窗口被激活，移动，改变大小。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_QUEUESYNC">
            <summary>
            此消息由基于计算机的训练程序发送，通过WH_JOURNALPALYBACK的Hook程序分离出用户输入消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_GETMINMAXINFO">
            <summary>
            此消息发送给窗口当它将要改变大小或位置
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PAINTICON">
            <summary>
            发送给最小化窗口当它图标将要被重画
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ICONERASEBKGND">
            <summary>
            此消息发送给某个最小化窗口，仅当它在画图标前它的背景必须被重画
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NEXTDLGCTL">
            <summary>
            发送此消息给一个对话框程序去更改焦点位置
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SPOOLERSTATUS">
            <summary>
            每当打印管理列队增加或减少一条作业时发出此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DRAWITEM">
            <summary>
            当Button，ComboBox，Listbox，Menu的可视外观改变时发送此消息给这些控件的所有者。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MEASUREITEM">
            <summary>
            当Button,ComboBox,ListBox,ListView,MenuItem被创建时发送此消息给控件的所有者。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DELETEITEM">
            <summary>
            当ListBox、ComboBox被销毁或当某些项被删除通过LB_DELETESTRING,LB_RESETCONTENT,CB_DELETESTRING,orCB_RESETCONTENT消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_VKEYTOITEM">
            <summary>
            此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应WM_KEYDOWN消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CHARTOITEM">
            <summary>
            此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应WM_CHAR消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SETFONT">
            <summary>
            当绘制文本时程序发送此消息得到控件要用的颜色
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_GETFONT">
            <summary>
            应用程序发送此消息得到当前控件绘制文本的字体
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SETHOTKEY">
            <summary>
            应用程序发送此消息让一个窗口与一个热键相关连
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_GETHOTKEY">
            <summary>
            应用程序发送此消息来判断热键与某个窗口是否有关联
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_QUERYDRAGICON">
            <summary>
            此消息发送给最小化窗口，当此窗口将要被拖放而它的类中没有定义图标，应用程序能返回一个图标或光标的句柄，当用户拖放图标时系统显示这个图标或光标。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_COMPAREITEM">
            <summary>
            发送此消息来判定ComboBox或ListBox新增加的项的相对位置
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_GETOBJECT">
            <summary>
            获取窗口对象接口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_COMPACTING">
            <summary>
            显示内存已经很少了
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_WINDOWPOSCHANGING">
            <summary>
            发送此消息给那个窗口的大小和位置将要被改变时，来调用SetWindowPos函数或其它窗口管理函数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_WINDOWPOSCHANGED">
            <summary>
            发送此消息给那个窗口的大小和位置已经被改变时，来调用SetWindowPos函数或其它窗口管理函数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_POWER">
            <summary>
            当系统将要进入暂停状态时发送此消息(适用于16位的windows)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_COPYDATA">
            <summary>
            当一个应用程序传递数据给另一个应用程序时发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CANCELJOURNAL">
            <summary>
            当某个用户取消程序日志激活状态，提交此消息给程序
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NOTIFY">
            <summary>
            当某个控件的某个事件已经发生或这个控件需要得到一些信息时，发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            当用户选择某种输入语言，或输入语言的热键改变
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_INPUTLANGCHANGE">
            <summary>
            当平台现场已经被改变后发送此消息给受影响的最顶级窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_TCARD">
            <summary>
            当程序已经初始化windows帮助例程时发送此消息给应用程序
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_HELP">
            <summary>
            此消息显示用户按下了F1，如果某个菜单是激活的，就发送此消息个此窗口关联的菜单，否则就发送给有焦点的窗口，如果当前都没有焦点，就把此消息发送给当前激活的窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_USERCHANGED">
            <summary>
            当用户已经登入或退出后发送此消息给所有的窗口，当用户登入或退出时系统更新用户的具体设置信息，在用户更新设置时系统马上发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NOTIFYFORMAT">
            <summary>
            公用控件，自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构,在WM_NOTIFY消息，使用此控件能使某个控件与它的父控件之间进行相互通信
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CONTEXTMENU">
            <summary>
            当用户某个窗口中点击了一下右键就发送此消息给这个窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_STYLECHANGING">
            <summary>
            当调用SETWINDOWLONG函数将要改变一个或多个窗口的风格时发送此消息给那个窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_STYLECHANGED">
            <summary>
            当调用SETWINDOWLONG函数一个或多个窗口的风格后发送此消息给那个窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DISPLAYCHANGE">
            <summary>
            当显示器的分辨率改变后发送此消息给所有的窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_GETICON">
            <summary>
            此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SETICON">
            <summary>
            程序发送此消息让一个新的大图标或小图标与某个窗口关联
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCCREATE">
            <summary>
            当某个窗口第一次被创建时，此消息在WM_CREATE消息发送前发送
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCDESTROY">
            <summary>
            此消息通知某个窗口，非客户区正在销毁
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCCALCSIZE">
            <summary>
            当某个窗口的客户区域必须被核算时发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCHITTEST">
            <summary>
            移动鼠标，按住或释放鼠标时发生
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCPAINT">
            <summary>
            程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCACTIVATE">
            <summary>
            此消息发送给某个窗口仅当它的非客户区需要被改变来显示是激活还是非激活状态
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_GETDLGCODE">
            <summary>
            发送此消息给某个与对话框程序关联的控件，Windows控制方位键和TAB键使输入进入此控件,通过响应WM_GETDLGCODE消息，应用程序可以把他当成一个特殊的输入控件并能处理它。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCMOUSEMOVE">
            <summary>
            当光标在一个窗口的非客户区内移动时发送此消息给这个窗口非客户区为：窗体的标题栏及窗体的边框
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCLBUTTONDOWN">
            <summary>
            当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCLBUTTONUP">
            <summary>
            当用户释放鼠标左键同时光标某个窗口在非客户区十发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCLBUTTONDBLCLK">
            <summary>
            当用户双击鼠标左键同时光标某个窗口在非客户区十发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCRBUTTONDOWN">
            <summary>
            当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCRBUTTONUP">
            <summary>
            当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCRBUTTONDBLCLK">
            <summary>
            当用户双击鼠标右键同时光标某个窗口在非客户区十发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCMBUTTONDOWN">
            <summary>
            当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCMBUTTONUP">
            <summary>
            当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NCMBUTTONDBLCLK">
            <summary>
            当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_KEYFIRST">
            <summary>
            键盘的开始消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_KEYDOWN">
            <summary>
            按下一个键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_KEYUP">
            <summary>
            释放一个键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CHAR">
            <summary>
            按下某键，并已发出WM_KEYDOWN，WM_KEYUP消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DEADCHAR">
            <summary>
            当用TranslateMessage函数翻译WM_KEYUP消息时发送此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SYSKEYDOWN">
            <summary>
            当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SYSKEYUP">
            <summary>
            当用户释放一个键同时ALT键还按着时提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SYSCHAR">
            <summary>
            当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SYSDEADCHAR">
            <summary>
            当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_KEYLAST">
            <summary>
            键盘的结束消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.KEYEVENTF_KEYUP">
            <summary>
            释放按键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_INITDIALOG">
            <summary>
            在一个对话框程序被显示前发送此消息给它，通常用此消息初始化控件和执行其它任务
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_COMMAND">
            <summary>
            当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口，一个快捷键被翻译
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SYSCOMMAND">
            <summary>
            当用户选择窗口菜单的一条命令或当用户选择最大化或最小化时那个窗口会收到此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_TIMER">
            <summary>
            发生了定时器事件
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_HSCROLL">
            <summary>
            当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口，也发送给拥有它的控件
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_VSCROLL">
            <summary>
            当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口也，发送给拥有它的控件
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_INITMENU">
            <summary>
            当一个菜单将要被激活时发送此消息，它发生在用户菜单条中的某项或按下某个菜单键，它允许程序在显示前更改菜单
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_INITMENUPOPUP">
            <summary>
            当一个下拉菜单或子菜单将要被激活时发送此消息，它允许程序在它显示前更改菜单，而不要改变全部
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MENUSELECT">
            <summary>
            当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口）
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MENUCHAR">
            <summary>
            当菜单已被激活用户按下了某个键（不同于加速键），发送此消息给菜单的所有者
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ENTERIDLE">
            <summary>
            当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者，一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MENURBUTTONUP">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MENUDRAG">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MENUGETOBJECT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_UNINITMENUPOPUP">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MENUCOMMAND">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CHANGEUISTATE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_UPDATEUISTATE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_QUERYUISTATE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CTLCOLORMSGBOX">
            <summary>
            在Windows绘制消息框前发送此消息给消息框的所有者窗口，通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CTLCOLOREDIT">
            <summary>
            当一个编辑型控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CTLCOLORLISTBOX">
            <summary>
            当一个列表框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CTLCOLORBTN">
            <summary>
            当一个按钮控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CTLCOLORDLG">
            <summary>
            当一个对话框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CTLCOLORSCROLLBAR">
            <summary>
            当一个滚动条控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CTLCOLORSTATIC">
            <summary>
            当一个静态控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MOUSEFIRST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MOUSEMOVE">
            <summary>
            移动鼠标
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_LBUTTONDOWN">
            <summary>
            按下鼠标左键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_LBUTTONUP">
            <summary>
            释放鼠标左键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_LBUTTONDBLCLK">
            <summary>
            双击鼠标左键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_RBUTTONDOWN">
            <summary>
            按下鼠标右键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_RBUTTONUP">
            <summary>
            释放鼠标右键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_RBUTTONDBLCLK">
            <summary>
            双击鼠标右键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MBUTTONDOWN">
            <summary>
            按下鼠标中键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MBUTTONUP">
            <summary>
            释放鼠标中键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MBUTTONDBLCLK">
            <summary>
            双击鼠标中键
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MOUSEWHEEL">
            <summary>
            当鼠标轮子转动时发送此消息个当前有焦点的控件
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MOUSELAST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PARENTNOTIFY">
            <summary>
            当MDI子窗口被创建或被销毁，或用户按了一下鼠标键而光标在子窗口上时发送此消息给它的父窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ENTERMENULOOP">
            <summary>
            发送此消息通知应用程序的主窗口that已经进入了菜单循环模式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_EXITMENULOOP">
            <summary>
            发送此消息通知应用程序的主窗口that已退出了菜单循环模式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_NEXTMENU">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SIZING">
            <summary>
            当用户正在调整窗口大小时发送此消息给窗口通过此消息应用程序可以监视窗口大小和位置也可以修改他们
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CAPTURECHANGED">
            <summary>
            发送此消息给窗口当它失去捕获的鼠标时
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MOVING">
            <summary>
            当用户在移动窗口时发送此消息，通过此消息应用程序可以监视窗口大小和位置也可以修改他们
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_POWERBROADCAST">
            <summary>
            此消息发送给应用程序来通知它有关电源管理事件
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DEVICECHANGE">
            <summary>
            当设备的硬件配置改变时发送此消息给应用程序或设备驱动程序
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_STARTCOMPOSITION">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_ENDCOMPOSITION">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_COMPOSITION">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_KEYLAST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_SETCONTEXT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_NOTIFY">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_CONTROL">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_COMPOSITIONFULL">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_SELECT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_CHAR">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_REQUEST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_KEYDOWN">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_IME_KEYUP">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDICREATE">
            <summary>
            应用程序发送此消息给多文档的客户窗口来创建一个MDI子窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDIDESTROY">
            <summary>
            应用程序发送此消息给多文档的客户窗口来关闭一个MDI子窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDIACTIVATE">
            <summary>
            应用程序发送此消息给多文档的客户窗口通知客户窗口激活另一个MDI子窗口，当客户窗口收到此消息后，它发出WM_MDIACTIVE消息给MDI子窗口（未激活）激活它
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDIRESTORE">
            <summary>
            程序发送此消息给MDI客户窗口让子窗口从最大最小化恢复到原来大小
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDINEXT">
            <summary>
            程序发送此消息给MDI客户窗口激活下一个或前一个窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDIMAXIMIZE">
            <summary>
            程序发送此消息给MDI客户窗口来最大化一个MDI子窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDITILE">
            <summary>
            程序发送此消息给MDI客户窗口以平铺方式重新排列所有MDI子窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDICASCADE">
            <summary>
            程序发送此消息给MDI客户窗口以层叠方式重新排列所有MDI子窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDIICONARRANGE">
            <summary>
            程序发送此消息给MDI客户窗口重新排列所有最小化的MDI子窗口
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDIGETACTIVE">
            <summary>
            程序发送此消息给MDI客户窗口来找到激活的子窗口的句柄
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDISETMENU">
            <summary>
            程序发送此消息给MDI客户窗口用MDI菜单代替子窗口的菜单
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ENTERSIZEMOVE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_EXITSIZEMOVE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DROPFILES">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MDIREFRESHMENU">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MOUSEHOVER">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_MOUSELEAVE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CUT">
            <summary>
            程序发送此消息给一个编辑框或combobox来删除当前选择的文本
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_COPY">
            <summary>
            程序发送此消息给一个编辑框或Combobox来复制当前选择的文本到剪贴板
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PASTE">
            <summary>
            程序发送此消息给EditControl或Combobox从剪贴板中得到数据
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CLEAR">
            <summary>
            程序发送此消息给EditControl或Combobox清除当前选择的内容
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_UNDO">
            <summary>
            程序发送此消息给EditControl或Combobox撤消最后一次操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_RENDERFORMAT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_RENDERALLFORMATS">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DESTROYCLIPBOARD">
            <summary>
            当调用ENPTYCLIPBOARD函数时发送此消息给剪贴板的所有者
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DRAWCLIPBOARD">
            <summary>
            当剪贴板的内容变化时发送此消息给剪贴板观察链的第一个窗口它允许用剪贴板观察窗口来显示剪贴板的新内容
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PAINTCLIPBOARD">
            <summary>
            当剪贴板包含CF_OWNERDIPLAY格式的数据并且剪贴板观察窗口的客户区需要重画
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_VSCROLLCLIPBOARD">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_SIZECLIPBOARD">
            <summary>
            当剪贴板包含CF_OWNERDIPLAY格式的数据并且剪贴板观察窗口的客户区域的大小已经改变是此消息通过剪贴板观察窗口发送给剪贴板的所有者
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_ASKCBFORMATNAME">
            <summary>
            通过剪贴板观察窗口发送此消息给剪贴板的所有者来请求一个CF_OWNERDISPLAY格式的剪贴板的名字
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_CHANGECBCHAIN">
            <summary>
            当一个窗口从剪贴板观察链中移去时发送此消息给剪贴板观察链的第一个窗口
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_HSCROLLCLIPBOARD">
            <summary>
            此消息通过一个剪贴板观察窗口发送给剪贴板的所有者它发生在当剪贴板包含CFOWNERDISPALY格式的数据并且有个事件在剪贴板观察窗的水平滚动条上所有者应滚动剪贴板图象并更新滚动条的值
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_QUERYNEWPALETTE">
            <summary>
            此消息发送给将要收到焦点的窗口，此消息能使窗口在收到焦点时同时有机会实现他的逻辑调色板
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PALETTEISCHANGING">
            <summary>
            当一个应用程序正要实现它的逻辑调色板时发此消息通知所有的应用程序
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PALETTECHANGED">
            <summary>
            此消息在一个拥有焦点的窗口实现它的逻辑调色板后发送此消息给所有顶级并重叠的窗口，以此来改变系统调色板
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_HOTKEY">
            <summary>
            当用户按下由REGISTERHOTKEY函数注册的热键时提交此消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PRINT">
            <summary>
            应用程序发送此消息仅当WINDOWS或其它应用程序发出一个请求要求绘制一个应用程序的一部分
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PRINTCLIENT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_HANDHELDFIRST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_HANDHELDLAST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PENWINFIRST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_PENWINLAST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_COALESCE_FIRST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_COALESCE_LAST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_FIRST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_APP">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_USER">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_INITIATE">
            <summary>
            一个DDE客户程序提交此消息开始一个与服务器程序的会话来响应那个指定的程序和主题名
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_TERMINATE">
            <summary>
            一个DDE应用程序（无论是客户还是服务器）提交此消息来终止一个会话
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_ADVISE">
            <summary>
            一个DDE客户程序提交此消息给一个DDE服务程序来请求服务器每当数据项改变时更新它
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_UNADVISE">
            <summary>
            一个DDE客户程序通过此消息通知一个DDE服务程序不更新指定的项或一个特殊的剪贴板格式的项
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_ACK">
            <summary>
            此消息通知一个DDE（动态数据交换）程序已收到并正在处理WM_DDE_POKE,WM_DDE_EXECUTE,WM_DDE_DATA,WM_DDE_ADVISE,WM_DDE_UNADVISE,WM_DDE_INITIAT消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_DATA">
            <summary>
            一个DDE服务程序提交此消息给DDE客户程序来传递个一数据项给客户或通知客户的一条可用数据项
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_REQUEST">
            <summary>
            一个DDE客户程序提交此消息给一个DDE服务程序来请求一个数据项的值
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_POKE">
            <summary>
            一个DDE客户程序提交此消息给一个DDE服务程序，客户使用此消息来请求服务器接收一个未经同意的数据项服务器通过答复WM_DDE_ACK消息提示是否它接收这个数据项
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_EXECUTE">
            <summary>
            一个DDE客户程序提交此消息给一个DDE服务程序来发送一个字符串给服务器让它象串行命令一样被处理，服务器通过提交WM_DDE_ACK消息来作回应
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WM_DDE_LAST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_BORDER">
            <summary>
            The window has a thin-line border.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_CAPTION">
            <summary>
            The window has a title bar (includes the WS_BORDER style).
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_CHILD">
            <summary>
            The window is a child window. A window with this style cannot have a menu bar. 
            This style cannot be used with the WS_POPUP style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_CHILDWINDOW">
            <summary>
            Same as the WS_CHILD style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs within the parent window. 
            This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, 
            the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated. 
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, 
            when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_DISABLED">
            <summary>
            The window is initially disabled. A disabled window cannot receive input from the user. 
            To change this after a window has been created, use the EnableWindow function.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_DLGFRAME">
            <summary>
            The window has a border of a style typically used with dialog boxes.
            A window with this style cannot have a title bar.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_GROUP">
            <summary>
            The window is the first control of a group of controls. 
            The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style. 
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. 
            The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation.
            To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_HSCROLL">
            <summary>
            The window has a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_ICONIC">
            <summary>
            The window is initially minimized. Same as the WS_MINIMIZE style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_MAXIMIZE">
            <summary>
            The window is initially maximized.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_MAXIMIZEBOX">
            <summary>
            The window has a maximize button. 
            Cannot be combined with the WS_EX_CONTEXTHELP style. 
            The WS_SYSMENU style must also be specified.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_MINIMIZE">
            <summary>
            The window is initially minimized. Same as the WS_ICONIC style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_MINIMIZEBOX">
            <summary>
            The window has a minimize button. 
            Cannot be combined with the WS_EX_CONTEXTHELP style. 
            The WS_SYSMENU style must also be specified.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_OVERLAPPED">
            <summary>
            The window is an overlapped window. 
            An overlapped window has a title bar and a border. 
            Same as the WS_TILED style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_OVERLAPPEDWINDOW">
            <summary>
            The window is an overlapped window.
            Same as the WS_TILEDWINDOW style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_POPUP">
            <summary>
            The windows is a pop-up window. 
            This style cannot be used with the WS_CHILD style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_POPUPWINDOW">
            <summary>
            The window is a pop-up window. 
            The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_SIZEBOX">
            <summary>
            The window has a sizing border. 
            Same as the WS_THICKFRAME style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_SYSMENU">
            <summary>
            The window has a window menu on its title bar. 
            The WS_CAPTION style must also be specified.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key. 
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.
            You can turn this style on and off to change dialog box navigation. 
            To change this style after a window has been created, use the SetWindowLong function. 
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_THICKFRAME">
            <summary>
            The window has a sizing border. 
            Same as the WS_SIZEBOX style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_TILED">
            <summary>
            The window is an overlapped window. 
            An overlapped window has a title bar and a border. 
            Same as the WS_OVERLAPPED style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_TILEDWINDOW">
            <summary>
            The window is an overlapped window. 
            Same as the WS_OVERLAPPEDWINDOW style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_VISIBLE">
            <summary>
            The window is initially visible.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_VSCROLL">
            <summary>
            This style can be turned on and off by using the ShowWindow or SetWindowPos function.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_ACCEPTFILES">
            <summary>
            The window accepts drag-drop files.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_CLIENTEDGE">
            <summary>
            The window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_COMPOSITED">
            <summary>
            Paints all descendants of a window in bottom-to-top painting order using double-buffering. 
            For more information, see Remarks. 
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            Windows 2000:  This style is not supported.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_CONTEXTHELP">
            <summary>
            The title bar of the window includes a question mark. 
            When the user clicks the question mark, the cursor changes to a question mark with a pointer. 
            If the user then clicks a child window, the child receives a WM_HELP message. 
            The child window should pass the message to the parent window procedure, 
            which should call the WinHelp function using the HELP_WM_HELP command. 
            The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation. 
            If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_DLGMODALFRAME">
            <summary>
            The window has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_LAYERED">
            <summary>
            The window is a layered window. This style cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            Windows 8:  The WS_EX_LAYERED style is supported for top-level windows and child windows.
            Previous Windows versions support WS_EX_LAYERED only for top-level windows.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_LAYOUTRTL">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, 
            the horizontal origin of the window is on the right edge. Increasing horizontal values advance to the left.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_LEFT">
            <summary>
            The window has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment,
            the vertical scroll bar (if present) is to the left of the client area. 
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_MDICHILD">
            <summary>
            The window is a MDI child window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_NOACTIVATE">
            <summary>
            A top-level window created with this style does not become the foreground window when the user clicks it. 
            The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_NOINHERITLAYOUT">
            <summary>
            The window does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_NOPARENTNOTIFY">
            <summary>
            The child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_NOREDIRECTIONBITMAP">
            <summary>
            The window does not render to a redirection surface. 
            This is for windows that do not have visible content or that use mechanisms other than surfaces to provide their visual.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            The window is an overlapped window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_PALETTEWINDOW">
            <summary>
            The window is palette window, which is a modeless dialog box that presents an array of commands.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class. 
            This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
            Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. 
            Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_RIGHTSCROLLBAR">
            <summary>
            The vertical scroll bar (if present) is to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, 
            the window text is displayed using right-to-left reading-order properties. 
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_STATICEDGE">
            <summary>
            The window has a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_TOOLWINDOW">
            <summary>
            The window is intended to be used as a floating toolbar.
            A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. 
            A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. 
            If a tool window has a system menu, its icon is not displayed on the title bar. 
            However, you can display the system menu by right-clicking or by typing ALT+SPACE.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_TOPMOST">
            <summary>
            The window should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. 
            To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_TRANSPARENT">
            <summary>
            The window should not be painted until siblings beneath the window (that were created by the same thread) have been painted. 
            The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.WS_EX_WINDOWEDGE">
            <summary>
            The window has a border with a raised edge.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GW_CHILD">
            <summary>
            The retrieved handle identifies the child window at the top of the Z order, 
            if the specified window is a parent window; otherwise, the retrieved handle is NULL. 
            The function examines only child windows of the specified window. It does not examine descendant windows.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GW_ENABLEDPOPUP">
            <summary>
            The retrieved handle identifies the enabled popup window owned by the specified window (the search uses the first such window found using GW_HWNDNEXT); 
            otherwise, if there are no enabled popup windows, the retrieved handle is that of the specified window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GW_HWNDFIRST">
            <summary>
            The retrieved handle identifies the window of the same type that is highest in the Z order.
            If the specified window is a topmost window, the handle identifies a topmost window. 
            If the specified window is a top-level window, the handle identifies a top-level window. 
            If the specified window is a child window, the handle identifies a sibling window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GW_HWNDLAST">
            <summary>
            The retrieved handle identifies the window of the same type that is lowest in the Z order.
            If the specified window is a topmost window, the handle identifies a topmost window. 
            If the specified window is a top-level window, the handle identifies a top-level window. 
            If the specified window is a child window, the handle identifies a sibling window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GW_HWNDNEXT">
            <summary>
            The retrieved handle identifies the window below the specified window in the Z order.
            If the specified window is a topmost window, the handle identifies a topmost window. 
            If the specified window is a top-level window, the handle identifies a top-level window. 
            If the specified window is a child window, the handle identifies a sibling window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GW_HWNDPREV">
            <summary>
            The retrieved handle identifies the window above the specified window in the Z order.
            If the specified window is a topmost window, the handle identifies a topmost window. 
            If the specified window is a top-level window, the handle identifies a top-level window. 
            If the specified window is a child window, the handle identifies a sibling window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GW_OWNER">
            <summary>
            The retrieved handle identifies the specified window's owner window, if any. For more information, see Owned Windows.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GWL_EXSTYLE">
            <summary>
            Sets a new extended window style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GWL_HINSTANCE">
            <summary>
            Sets a new application instance handle.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GWL_ID">
            <summary>
            Sets a new identifier of the child window. The window cannot be a top-level window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GWL_STYLE">
            <summary>
            Sets a new window style.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GWL_USERDATA">
            <summary>
            Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.GWL_WNDPROC">
            <summary>
            Sets a new address for the window procedure.
            You cannot change this attribute if the window does not belong to the same process as the calling thread.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_ASYNCWINDOWPOS">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues, 
            the system posts the request to the thread that owns the window. 
            This prevents the calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_DEFERERASE">
            <summary>
            Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_DRAWFRAME">
            <summary>
            Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_FRAMECHANGED">
            <summary>
            Applies new frame styles set using the SetWindowLong function. 
            Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. 
            If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_HIDEWINDOW">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_NOACTIVATE">
            <summary>
            Does not activate the window. 
            If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area.
            If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_NOMOVE">
            <summary>
            Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_NOOWNERZORDER">
            <summary>
            Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_NOREDRAW">
            <summary>
            Does not redraw changes. 
            If this flag is set, no repainting of any kind occurs. 
            This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. 
            When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_NOREPOSITION">
            <summary>
            Same as the SWP_NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_NOSENDCHANGING">
            <summary>
            Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_NOSIZE">
            <summary>
            Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_NOZORDER">
            <summary>
            Retains the current Z order (ignores the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SWP_SHOWWINDOW">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_FORCEMINIMIZE">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding. 
            This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_MAXIMIZE">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_RESTORE">
            <summary>
            Activates and displays the window. 
            If the window is minimized or maximized, the system restores it to its original size and position. 
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window. 
            This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_SHOWNA">
            <summary>
            Displays the window in its current size and position. This value is similar to SW_SHOW, except that the window is not activated.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position. This value is similar to SW_SHOWNORMAL, except that the window is not activated.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SW_SHOWNORMAL">
            <summary>
            Activates and displays a window. 
            If the window is minimized or maximized, the system restores it to its original size and position.
            An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETEDITSEL">
            <summary>
            获取编辑区域选中的文本
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_LIMITTEXT">
            <summary>
            设置限制编辑区域文本的消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SETEDITSEL">
            <summary>
            设置编辑区域的选中文本
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_ADDSTRING">
            <summary>
            增加列表项
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_DELETESTRING">
            <summary>
            删除指定列表项
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_DIR">
            <summary>
            发送搜索目录的信息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETCOUNT">
            <summary>
            获取列表项总数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETCURSEL">
            <summary>
            获取当前选择列表项的索引
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETLBTEXT">
            <summary>
            获取列表项文本
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETLBTEXTLEN">
            <summary>
            获取列表项文本长度
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_INSERTSTRING">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_RESETCONTENT">
            <summary>
            删除所有的列表项
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_FINDSTRING">
            <summary>
            搜索指定字符串
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SELECTSTRING">
            <summary>
            选中指定的字符串
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SETCURSEL">
            <summary>
            将光标设置在指定的位置
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SHOWDROPDOWN">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETITEMDATA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SETITEMDATA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETDROPPEDCONTROLRECT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SETITEMHEIGHT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETITEMHEIGHT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SETEXTENDEDUI">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETEXTENDEDUI">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETDROPPEDSTATE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_FINDSTRINGEXACT">
            <summary>
            精确搜索指定字符串
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SETLOCALE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETLOCALE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETTOPINDEX">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SETTOPINDEX">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETHORIZONTALEXTENT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SETHORIZONTALEXTENT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_GETDROPPEDWIDTH">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_SETDROPPEDWIDTH">
            <summary>
            设置下拉的宽度
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CB_INITSTORAGE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.FILE_MAP_WRITE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.FILE_MAP_READ">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.FILE_MAP_ALL_ACCESS">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.PAGE_READONLY">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.PAGE_READWRITE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.PAGE_WRITECOPY">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.GENERIC_READ">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.GENERIC_WRITE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.SMTO_NORMAL">
            <summary>
            普通超时模式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SMTO_BLOCK">
            <summary>
            阻塞模式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SMTO_ABORTIFHUNG">
            <summary>
            如果阻塞则中断
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SMTO_NOTIMEOUTIFNOTHUNG">
            <summary>
            如果不阻塞不使用超时模式
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SC_CLOSE">
            <summary>
            窗口关闭
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SC_MINIMIZE">
            <summary>
            窗口最小化
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SC_MAXIMIZE">
            <summary>
            窗口最大化
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.SC_RESTORE">
            <summary>
            恢复窗口状态
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.BN_CLICKED">
            <summary>
            用户单击了按钮
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.BN_PAINT">
            <summary>
            按钮应当重画
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.BN_HILITE">
            <summary>
            用户加亮了按钮
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.BN_UNHILITE">
            <summary>
            加亮应当去掉
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.BN_DISABLE">
            <summary>
            按钮被禁止
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.BN_DOUBLECLICKED">
            <summary>
            用户双击了按钮
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_SELCHANGE">
            <summary>
            在组合框中选择了一项
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_DBLCLK">
            <summary>
            用户双击了一个字符串
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_SETFOCUS">
            <summary>
            组合框获得输入焦点
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_KILLFOCUS">
            <summary>
            组合框失去输入焦点
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_EDITCHANGE">
            <summary>
            用户修改了编辑框中的文本
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_EDITUPDATE">
            <summary>
            编辑框内的文本即将更新
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_DROPDOWN">
            <summary>
            组合框的列表框被拉出
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_CLOSEUP">
            <summary>
            组合框的列表项关闭
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_SELENDOK">
            <summary>
            用户的选择是合法的
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_SELENDCANCEL">
            <summary>
            用户的选择应当被取消
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.CBN_ERRSPACE">
            <summary>
            组合框内存不足
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LBN_SELCHANGE">
            <summary>
            选择了另一项
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LBN_DBLCLK">
            <summary>
            用户双击了一项
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LBN_SELCANCEL">
            <summary>
            选择被取消
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LBN_SETFOCUS">
            <summary>
            列表框获得输入焦点
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LBN_KILLFOCUS">
            <summary>
            列表框正在失去输入焦点
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LBN_ERRSPACE">
            <summary>
            列表框内存不够
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.BM_SETCHECK">
            <summary>
            设置复选框选定的消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.BM_GETCHECK">
            <summary>
            获取复选框选定的消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_CHARFROMPOS">
            <summary>
            取得编辑控件中指定位置的字符相对于文本头部的偏移量。使用本操作应先在第4个参数的高16位指定行号，低16位指定列号(或一个POINTAPI结构），行列是按编辑控件的客户区左上角为原点(0,0)计算的。如果指定的位置超出控件客户区则返回-1
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_CANUNDO">
            <summary>
            决定前一次编辑操作是否能够撤消：检测控件撤消缓冲区是否为空，通常控件把最后一次在控件的编辑操作保存在一个撤消缓冲区，如果缓冲区非空则返回TRUE表示上次操作可以撤消，否则返回FALSE，应用程序可以利用该返回值来禁止或允许菜单或工具条的"撤消"项。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_EMPTYUNDOBUFFER">
            <summary>
            清除控件的撤消缓冲区，使其不能撤消前一次编辑操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_FMTLINES">
            <summary>
            决定是否在取回的文本宇串中包含软回车字符
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETFIRSTVISIBLEINE">
            <summary>
            获得文本控件中处于可见位置的最顶部的文本所在的行号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETLINE">
            <summary>
            变量获取编辑控件某一行的内容，变量须预先赋空格
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETLINECOUNT">
            <summary>
            获取编辑控件的总行数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETMODIFY">
            <summary>
            判断编辑控件的内容是否已发生变化，返回TRUE则控件文本已被修改，返回FALSE则未变。 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETPASSWORDCHAR">
            <summary>
            获取编辑控件的密码字符，返回NULL表示没有字符
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETRECT">
            <summary>
            结构获取编辑控件的格式化矩形
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETTHUMB">
            <summary>
            取得多行文本编辑控件的滚动框的当前位置（注意：是象素值）
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETSEL">
            <summary>
            获取光标位置（以字节数表示），或:(缓冲区起点, 缓冲区终点)取得编辑控件中选定内容的范围，返回值中低16位为起点，高16位为终点
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETHANDLE">
            <summary>
            取得文本缓冲区
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETWORDBREAKPROC">
            <summary>
            取得整字换行回调函数EditWordBreakProc指针
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETLIMITTEXT">
            <summary>
            获取一个编辑控件中文本的最大长度
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_GETMARGINS">
            <summary>
            获取编辑控件的左、右边距，返回值低16位为左边距，高16位为右边距(不得用于NT3．51) 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_LIMITTEXT">
            <summary>
            最大值,0 设置编辑控件中的文本长度
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SCROLLCARET">
            <summary>
            把可见范围移至光标处
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_LINEFROMCHAR">
            <summary>
            偏移值,0 获取指定位置(或:-1,0 表示光标位置)所在的行号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_LINEINDEX">
            <summary>
            行号,0 获取指定行(或:-1,0 表示光标所在行)首字符在文本中的位置（以字节数表示）
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_LINELENGTH">
            <summary>
            偏移值,0 获取指定位置所在行(或:-1,0 表示光标所在行）的文本长度（以字节数表示）
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_POSFROMCHARPOINT">
            <summary>
            结构地址, 偏移值 取得指定字符位置的行列号，偏移值是字符相对于文本头部的偏移。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_LINESCROLL">
            <summary>
            列数, 行数 指定行数的文本水平滚动，每次滚动N列
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_EXGETSEL">
            <summary>
            获取选中消息
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_EXSETSEL">
            <summary>
            结构 RichEdit控件设置文本选定范围，参阅 EM_SETSEL 消息，结构是指 CHARRANGE 结构
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_PASTESPECIAL">
            <summary>
            RichEdit控件粘贴剪贴板中的位图(或文本)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_FINDTEXT">
            <summary>
            RichEdit控件正文搜索操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_FINDTEXTEX">
            <summary>
            RichEdit控件正文搜索操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETTEXTEX">
            <summary>
            RichEdit控件正文替换/插入操作
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETTARGETDEVICE">
            <summary>
            设置 RichTextBox 不自动换行
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_POSFROMCHAR">
            <summary>
            判断指定字符在编辑控件的位置(用于NT3．51) 
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SCROLL">
            <summary>
            文本垂直滚动。第三个参数*控制滚动方向:SB_LINEDOWN(1)向下滚动一行，SB_LINEUP(0)向上滚动一行，SB_PAGEDOWN(3)向下滚动一页，SB_PAGEUP(2)向上滚动一页。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_REPLACESEL">
            <summary>
            用指定字符串替换编辑控件中的当前选定内容，如果第三个参数wParam为1，则本次操作允许撤消，0禁止撤消。字符串可用传值方式，也可用传址方式（例：SendMessage Text1.hwnd, EM_REPLACESEL, 0, Text2.Text '这是传值方式）
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETSEL">
            <summary>
            设置编辑控件中文本选定内容范围（或设置光标位置），该范围被反相显示，用于为复制、替换、粘贴、剪切、删除等编辑功能指定范围，光标将被移至指定的终点后面。还可使用指定相同起点和终点来移动光标而不是选定范围。当指定的起点等于0和终点等于-1时，文本全部被选中，此法常用在清空编辑控件。当指定的起点等于-2和终点等于-1时，全文均不选，光标移至文本未端，此法常用在文本未端追加内容。注意：当控件没有输入焦点时，本操作将会失败，一般在执行本操作前都应调用SetFocus先取得输入焦点。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_UNDO">
            <summary>
            撤消前一次编辑操作，当重复发送本消息，控件将在撤消和恢复中来回切换
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETCHARFORMAT">
            <summary>
            改变选定文本的颜色
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETHANDLE">
            <summary>
            缓冲区指针,0 为编辑控件指定新的文本缓冲区。此操作仅适用对话框创建带DS_LOCALEDIT风格的控件。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETLIMITTEXT">
            <summary>
            设置编辑控件中的文本最大长度(不得用于NT3．51)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETMARGINS">
            <summary>
            设置编辑控件的左、右边距(不得用于NT3．51)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETMODIFY">
            <summary>
            设置或清除一个编辑控件的修改标志
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETPASSWORDCHAR">
            <summary>
            指定控件用来显示密码的字符，缺省为"*"。当第三个参数wParam为0时，本操作将清除控件的ES_PASSWORD风格，并按实际字符显示。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETREADONLY">
            <summary>
            决定是否将编辑控件设为只读，同时决定控件的ES_READONLY风格
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETRECT">
            <summary>
            为一个编辑控件设置格式化矩形
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EM_SETRECTNP">
            <summary>
            为一个编辑控件设置格式化矩形，只是控件此时不会重画
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EN_SETFOCUS">
            <summary>
            编辑框获得输入焦点
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EN_KILLFOCUS">
            <summary>
            编辑框正在失去输入焦点
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EN_CHANGE">
            <summary>
            编辑框中的文本己更新
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EN_UPDATE">
            <summary>
            编辑框中的文本将要更新
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EN_ERRSPACE">
            <summary>
            编辑框内存不足
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EN_MAXTEXT">
            <summary>
            插入的内容被截断
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EN_HSCROLL">
            <summary>
            用户点击了水平滚动条
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.EN_VSCROLL">
            <summary>
            用户点击了垂直滚动条消息含义
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_MULTILINE">
            <summary>
            指定编辑控件能否进行多行文本编辑，若多行编辑器不指定ES_AUTOHSCROLL风格，则会自动换行，用户每按一次Enter，在当前光标处输入一个回车换行符(0Dh,0Ah)，文本增加一行。若不指定ES_AUTOVSCROLL，则多行编辑器会在窗口中正文装满时发出警告声响。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_LEFT">
            <summary>
            文本显示居左。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_CENTER">
            <summary>
            文本显示居中。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_RIGHT">
            <summary>
            文本显示居右。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_LOWERCASE">
            <summary>
            把用户输入的字母统统转换成小写字母。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_UPPERCASE">
            <summary>
            把用户输入的字母统统转换成大写字母。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_OEMCONVERT">
            <summary>
            把输入的文本从ANSI码转换成OEM码，然后又转换成ANSI码，目的是保证函数AnsiToOem的正确调用。这在编辑框中包含文件名时是很有用的。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_AUTOHSCROLL">
            <summary>
            （自动增加水平滚动条？） 当用户在行尾键入一个字符时，正文将自动向右滚动10个字符，当用户按回车键时，正文总是滚向左边。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_AUTOVSCROLL">
            <summary>
            当用户在最后一个可见行按回车键时，正文向上滚动一页。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_NUMBER">
            <summary>
            只接收数码输入，其它字符输入一律无效。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_NOHIDESEL">
            <summary>
            当编辑框失去输入焦点时，选中的文本将隐藏，正文中的选择保持不变。缺省时正文中的选择将失效，当获得输入焦点后才又显示出来。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_READONLY">
            <summary>
            将编辑框设置成只读的。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_PASSWORD">
            <summary>
            使所有键入的字符都用"*"来显示。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ES_WANTRETURN">
            <summary>
            使多行编辑器接收回车键输入并换行。如果不指定该风格，按回车键会选择缺省的命令按钮，这往往会导致对话框的关闭。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_FINDSTRING">
            <summary>
            查找列表项的字符串，返回值＝字符串所在的列表项的索引。-1表示从第0行开始查找，如果改为一个有效的列表项索引值，将从该行开始查找。
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_ITEMFROMPOINT">
            <summary>
            获取光标所在的列表项的索引
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETHORIZONTALEXTENT">
            <summary>
            设置列表框的横向滚动条以及滚动长度，长度为象素值
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETCOUNT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETCURSEL">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETITEMDATA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_FINDSTRINGEXACT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETITEMHEIGHT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETITEMRECT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETLOCALE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETSEL">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETSELCOUNT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETSELITEMS">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETTEXT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETTEXTLEN">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_GETTOPINDEX">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_INSERTSTRING">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_MSGMAX">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_OKAY">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_RESETCONTENT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SELECTSTRING">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SELITEMRANGE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SELITEMRANGEEX">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETCOLUMNWIDTH">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETCOUNT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETCURSEL">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETITEMDATA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETITEMHEIGHT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETLOCALE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETSEL">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETTABSTOPS">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LB_SETTOPINDEX">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_FIRST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETBKCOLOR">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETBKCOLOR">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETIMAGELIST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETIMAGELIST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETITEMCOUNT">
            <summary>
            获取列表行数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETITEM">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETITEM">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_INSERTITEMA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_DELETEITEM">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_DELETEALLITEMS">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETCALLBACKMASK">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETCALLBACKMASK">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETNEXTITEM">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_FINDITEMA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_FINDITEM">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETITEMPOSITION">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETITEMPOSITION">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETSTRINGWIDTHA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_HITTEST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_ENSUREVISIBLE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SCROLL">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_REDRAWITEMS">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_ARRANGE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_EDITLABELA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETEDITCONTROL">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_INSERTITEM">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETSTRINGWIDTH">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_EDITLABEL">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETCOLUMNA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETCOLUMN">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETCOLUMNA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETCOLUMN">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_INSERTCOLUMNA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_DELETECOLUMN">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETCOLUMNWIDTH">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETCOLUMNWIDTH">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETHEADER">
            <summary>
            IE 3+ only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_CREATEDRAGIMAGE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETVIEWRECT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETTEXTCOLOR">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETTEXTCOLOR">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETTEXTBKCOLOR">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETTEXTBKCOLOR">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETTOPINDEX">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETCOUNTPERPAGE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETORIGIN">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_UPDATE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETITEMSTATE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETITEMSTATE">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETITEMTEXT">
            <summary>
            获取列表内的内容
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETITEMTEXT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETITEMCOUNT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SORTITEMS">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETITEMPOSITION32">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETSELECTEDCOUNT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETITEMSPACING">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETISEARCHSTRINGA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETICONSPACING">
            <summary>
            IE 3+ only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETSUBITEMRECT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SUBITEMHITTEST">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETCOLUMNORDERARRAY">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETCOLUMNORDERARRAY">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETHOTITEM">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETHOTITEM">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETHOTCURSOR">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETHOTCURSOR">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_APPROXIMATEVIEWRECT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETWORKAREA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETSELECTIONMARK">
            <summary>
            Win32 and IE 4 only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETSELECTIONMARK">
            <summary>
            Win32 and IE 4 only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETBKIMAGEA">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETBKIMAGEA">
            <summary>
            Win32 and IE 4 only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETWORKAREA">
            <summary>
            Win32 and IE 4 only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETHOVERTIME">
            <summary>
            Win32 and IE 4 only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETHOVERTIME">
            <summary>
            Win32 and IE 4 only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETITEMW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_INSERTCOLUMN">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETISEARCHSTRING">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETBKIMAGE">
            <summary>
            Win32 and IE 4 only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETBKIMAGE">
            <summary>
            Win32 and IE 4 only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_INSERTITEMW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_FINDITEMW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETSTRINGWIDTHW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETCOLUMNW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETCOLUMNW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_INSERTCOLUMNW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETITEMTEXTW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETITEMTEXTW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_GETISEARCHSTRINGW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_EDITLABELW">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVM_SETBKIMAGEW">
            <summary>
            Win32 and IE 4 only
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.LVIF_TEXT">
            <summary />
        </member>
        <member name="F:App.FunctionLibrary.Messages.TVM_SETBKCOLOR">
            <summary>
            设置扩展树型列表控件的背景色(TVM开头的常数)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.PROCESS_VM_OPERATION">
            <summary>
            允许函数VirtualProtectEx使用此句柄修改进程的虚拟内存  
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.PROCESS_VM_READ">
            <summary>
            允许函数VirtualProtectEx使用此句柄修改进程的虚拟内存  
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.PROCESS_VM_WRITE">
            <summary>
            允许函数写入权限  
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.PROCESS_ALL_ACCESS">
            <summary>
            所有权限
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.MEM_COMMIT">
            <summary>
            为特定的页面区域分配内存中或磁盘的页面文件中的物理存储
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.MEM_RELEASE">
            <summary>
            释放分配的进程虚拟地址空间
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.MEM_RESERVE">
            <summary>
            /保留进程的虚拟地址空间,而不分配任何物理存储
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.HDM_GETITEMCOUNT">
            <summary>
            获取列表列数
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Messages.ERROR_ALREADY_EXISTS">
            <summary />
        </member>
        <member name="T:App.FunctionLibrary.Cacher">
            <summary>
            缓存基类
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Cacher.locker">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Cacher.logger">
            <summary>
            缓冲日志
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Cacher.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Cacher.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Cacher.Dispose">
            <summary>
            销毁缓存区数据
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Cacher.ID">
            <summary>
            缓存ID
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Cacher.InvalidatePool">
            <summary>
            致使缓存池内的所有缓存器失效。
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Cacher.Invalidated">
            <summary>
            缓存器数据失效事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Cacher.Updating">
            <summary>
            缓存器数据准备更新事件
            </summary>
        </member>
        <member name="E:App.FunctionLibrary.Cacher.Updated">
            <summary>
            缓存器数据更新完毕事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Cacher.OnInvalidated(App.FunctionLibrary.Cacher)">
            <summary>
            激活缓冲器数据失效事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Cacher.OnUpdating(App.FunctionLibrary.Cacher)">
            <summary>
            激活缓存器数据准备更新事件
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Cacher.OnUpdated(App.FunctionLibrary.Cacher)">
            <summary>
            激活缓存器数据更新完毕事件
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Cacher.Name">
            <summary>
            缓冲器名称
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Cacher.Timeout">
            <summary>
            缓存器数据超时时长(秒钟)
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Cacher.LastAccessTime">
            <summary>
            缓冲器最后更新的时刻
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Cacher.isInvalid">
            <summary>
            缓冲器失效状态
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Cacher.IsInvalid">
            <summary>
            缓存器已失效
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Cacher.Invalidate">
            <summary>
            导致缓存器失效
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Cacher.AccessUpdateTiming">
            <summary>
            访问缓存值时更新失效计时器(默认:false)
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.CacherGroup`1">
            <summary>
            创建一组具有相同功能的缓存器
            </summary>
            <typeparam name="T">缓存器的泛型类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`1.#ctor(App.FunctionLibrary.Cacher[])">
            <summary>
            实例化永不超时的缓存区
            </summary>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`1.#ctor(System.String,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化永不超时的缓存区
            </summary>
            <param name="name">缓存器名称</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`1.#ctor(System.Int32,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`1.#ctor(System.String,System.Int32,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="name">缓存器名称</param>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="T:App.FunctionLibrary.CacherGroup`2">
            <summary>
            创建一组具有相同功能的缓存器组
            </summary>
            <typeparam name="Tname">缓存名类型</typeparam>
            <typeparam name="Tvalue">缓存值类型</typeparam>
        </member>
        <member name="F:App.FunctionLibrary.CacherGroup`2.loopWatcher">
            <summary>
            缓存池循环监控线程
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CacherGroup`2.loopSigner">
            <summary>
            缓存池循环监控信号
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CacherGroup`2.loopPool">
            <summary>
            缓存池循环监控池
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CacherGroup`2.pool">
            <summary>
            缓存池
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.CacherGroup`2.sleep">
            <summary>
            休眠时间
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.#ctor(App.FunctionLibrary.Cacher[])">
            <summary>
            实例化永不超时的缓存区
            </summary>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.#ctor(System.String,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化永不超时的缓存区
            </summary>
            <param name="name">缓存器名称</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.#ctor(System.String,System.Int32,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="name">缓存器名称</param>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.#ctor(System.Int32,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.#ctor(System.Int32,System.Boolean)">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="accessUpdateTiming">访问缓存值时更新失效计时器</param>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.Dispose">
            <summary>
            销毁缓冲组中所有缓存器的数据
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CacherGroup`2.Item(`0)">
            <summary>
            获取指定缓存名的缓存值
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CacherGroup`2.AccessUpdateTiming">
            <summary>
            访问缓存值时更新失效计时器(默认:false)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CacherGroup`2.CacheCountLimit">
            <summary>
            获取或设置可缓存的最大数据量。
            </summary>
            <remarks>超过限制数量时将自动移除最旧的缓存数据，小于等于0时表示缓存不限制最大数据量。</remarks>
        </member>
        <member name="P:App.FunctionLibrary.CacherGroup`2.IsInvalid">
            <summary>
            缓存值是否失效
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.Invalidate">
            <summary>
            导致缓冲器中的所有缓存数据失效。
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.Invalidate(`0)">
            <summary>
            导致缓存组中的缓存数据失效并销毁
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.CacherGroup`2.Count">
            <summary>
            缓存组内缓存的元素组数目
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.CacherGroup`2.Contains(`0)">
            <summary>
            是否包含指定缓存名的缓存器。
            </summary>
        </member>
        <member name="T:App.FunctionLibrary.Cacher`1">
            <summary>
            缓冲缓存器
            </summary>
            <typeparam name="T">缓存器的泛型类型</typeparam>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(App.FunctionLibrary.Cacher[])">
            <summary>
            实例化永不超时的缓存区
            </summary>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(System.String,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化永不超时的缓存区
            </summary>
            <param name="name">缓存器名称</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(System.Int32,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(System.String,System.Int32,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="name">缓存器名称</param>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(System.Func{`0},App.FunctionLibrary.Cacher[])">
            <summary>
            实例化从不超时失效的缓存区。
            </summary>
            <param name="updater">当缓存区需要更新时使用的缓存更新器。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(System.String,System.Func{`0},App.FunctionLibrary.Cacher[])">
            <summary>
            实例化从不超时失效的缓存区。
            </summary>
            <param name="name">缓存器名称</param>
            <param name="updater">当缓存区需要更新时使用的缓存更新器。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(System.Func{`0},System.Int32,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="updater">当缓存区需要更新时使用的缓存更新器。</param>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(System.Int32,System.Func{`0},App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="updater">当缓存区需要更新时使用的缓存更新器。</param>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(System.String,System.Func{`0},System.Int32,App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="name">缓存器名称</param>
            <param name="updater">当缓存区需要更新时使用的缓存更新器。</param>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.#ctor(System.String,System.Int32,System.Func{`0},App.FunctionLibrary.Cacher[])">
            <summary>
            实例化超时自动刷新的缓存区
            </summary>
            <param name="name">缓存器名称</param>
            <param name="updater">当缓存区需要更新时使用的缓存更新器。</param>
            <param name="timeout">缓存失效时间(秒钟,小于1表示从不失效)。</param>
            <param name="inlineCachers">内联失效缓存器(即内联缓存器失效时也会导致当前缓存器失效)。</param>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.Dispose">
            <summary>
            销毁缓存区数据
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Cacher`1.Updater">
            <summary>
            缓冲数据更新器(当缓冲器失效时自动更新缓存值的委托器)
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Cacher`1.IsInvalid">
            <summary>
            缓存器已失效
            </summary>
        </member>
        <member name="F:App.FunctionLibrary.Cacher`1.value">
            <summary>
            缓冲值
            </summary>
        </member>
        <member name="P:App.FunctionLibrary.Cacher`1.Value">
            <summary>
            获取缓存数据
            </summary>
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.op_Implicit(App.FunctionLibrary.Cacher{`0})~`0">
            <summary />
        </member>
        <member name="M:App.FunctionLibrary.Cacher`1.op_Implicit(`0)~App.FunctionLibrary.Cacher{`0}">
            <summary />
        </member>
        <member name="T:App.Timers.ITimer">
            <summary>
            计时器接口
            </summary>
        </member>
        <member name="P:App.Timers.ITimer.Name">
            <summary>
            计时器名称
            </summary>
        </member>
        <member name="P:App.Timers.ITimer.Interval">
            <summary>
            获取或者设置计时器启动计时后的计时间隔(单位：毫秒)。
            </summary>
        </member>
        <member name="P:App.Timers.ITimer.Tag">
            <summary>
            计时器标签
            </summary>
        </member>
        <member name="P:App.Timers.ITimer.Enabled">
            <summary>
            计时器的运行状态，True表示运行，否则返回False。
            </summary>
        </member>
        <member name="E:App.Timers.ITimer.Tick">
            <summary>
            时钟周期到达事件
            </summary>
        </member>
        <member name="E:App.Timers.ITimer.EnabledChanged">
            <summary>
            计时器运行状态改变事件
            </summary>
        </member>
        <member name="M:App.Timers.ITimer.Start">
            <summary>
            开始计时器。
            </summary>
        </member>
        <member name="M:App.Timers.ITimer.Start(System.Boolean)">
            <summary>
            开始计时器。
            </summary>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.ITimer.Start(System.Int32)">
            <summary>
            开始计时器。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
        </member>
        <member name="M:App.Timers.ITimer.Start(System.Int32,System.Boolean)">
            <summary>
            开始计时器。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.ITimer.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="M:App.Timers.ITimer.ReStart">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary> 
        </member>
        <member name="M:App.Timers.ITimer.ReStart(System.Int32)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param> 
        </member>
        <member name="M:App.Timers.ITimer.ReStart(System.Boolean)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary> 
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.ITimer.ReStart(System.Int32,System.Boolean)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="T:App.Timers.MicrosecondTimer">
            <summary>
            微秒定时器。
            </summary>
            <remarks>适合定时时间不长，定时精度比较高的情况。</remarks>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor">
            <summary>
            实例化定时器
            </summary>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.String)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器的名称</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.Int32)">
            <summary>
            实例化定时器
            </summary>
            <param name="interval">定时器的计时间隔(单位：微秒)</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.Int32,System.Boolean)">
            <summary>
            实例化计时器
            </summary> 
            <param name="interval">计时器的计时间隔(单位：微秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.Boolean)">
            <summary>
            实例化计时器
            </summary>  
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.String,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
            <param name="interval">计时器的计时间隔(单位：微秒)。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.String,System.Boolean)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
            <param name="interval">计时器的计时间隔(单位：微秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
            <param name="interval">计时器的计时间隔(单位：微秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.Action,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.Action,System.Int32,System.Boolean)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.Action,System.Boolean,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.Int32,System.Action)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.Int32,System.Boolean,System.Action)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.#ctor(System.Boolean,System.Int32,System.Action)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="E:App.Timers.MicrosecondTimer.Tick">
            <summary>
            计时周期到达事件
            </summary>
        </member>
        <member name="E:App.Timers.MicrosecondTimer.EnabledChanged">
            <summary>
            计时器运行状态改变事件
            </summary>
        </member>
        <member name="P:App.Timers.MicrosecondTimer.Name">
            <summary>
            计时器的名称
            </summary>
        </member>
        <member name="P:App.Timers.MicrosecondTimer.Tag">
            <summary>
            计时器标签
            </summary>
        </member>
        <member name="P:App.Timers.MicrosecondTimer.Interval">
            <summary>
            定时器的计时间隔(单位：微秒)
            </summary>
            <value>微秒，取值范围：1～10000000(小于10秒钟)。</value>
        </member>
        <member name="P:App.Timers.MicrosecondTimer.Enabled">
            <summary>
            获取或者设置定时器是否正在运行。
            </summary>
            <returns>如果定时器当前处于启用状态，则为True，否则为False，默认False。</returns>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.Start">
            <summary>
            启动定时器。
            </summary>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.Start(System.Int32)">
            <summary>
             开始计时器，如果计时器已经开始则立即停止并且重新开始计时。
            </summary>
            <param name="interval">计时器的计时间隔(单位：微秒)，不改变当前刻度的设置。</param> 
        </member>
        <member name="M:App.Timers.MicrosecondTimer.Start(System.Boolean)">
            <summary>
             开始计时器，如果计时器已经开始则立即停止并且重新开始计时。
            </summary> 
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.Start(System.Boolean,System.Int32)">
            <summary>
             开始计时器，如果计时器已经开始则立即停止并且重新开始计时。
            </summary>
            <param name="interval">计时器的计时间隔(单位：微秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.Start(System.Int32,System.Boolean)">
            <summary>
             开始计时器，如果计时器已经开始则立即停止并且重新开始计时。
            </summary>
            <param name="interval">计时器的计时间隔(单位：微秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.Stop">
            <summary>
            停止定时器。
            </summary>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.ReStart">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.ReStart(System.Boolean)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.ReStart(System.Int32)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
        </member>
        <member name="M:App.Timers.MicrosecondTimer.ReStart(System.Int32,System.Boolean)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="T:App.Timers.ThreadTimer">
            <summary>
            线程计时器
            </summary>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor">
            <summary>
            实例化计时器(初时计时间隔100毫秒)。
            </summary>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.Int32,System.Boolean)">
            <summary>
            实例化计时器
            </summary> 
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.Boolean)">
            <summary>
            实例化计时器
            </summary>  
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.String,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param> 
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.String,System.Boolean)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param> 
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.Action,System.Int32,System.Boolean)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.Action,System.Boolean,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.Action,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.Int32,System.Action)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.Int32,System.Boolean,System.Action)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.#ctor(System.Boolean,System.Int32,System.Action)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:App.Timers.ThreadTimer.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="E:App.Timers.ThreadTimer.Tick">
            <summary>
            当指定的计时器已经到来并且计时器处于启用状态时发生。
            </summary>
        </member>
        <member name="E:App.Timers.ThreadTimer.EnabledChanged">
            <summary>
            计时器运行状态改变事件
            </summary>
        </member>
        <member name="M:App.Timers.ThreadTimer.Start">
            <summary>
            开始计时器。
            </summary>
        </member>
        <member name="M:App.Timers.ThreadTimer.Start(System.Int32)">
            <summary>
            开始计时器。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param> 
        </member>
        <member name="M:App.Timers.ThreadTimer.Start(System.Boolean)">
            <summary>
            开始计时器时。
            </summary>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.Start(System.Boolean,System.Int32)">
            <summary>
            开始计时器。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.Start(System.Int32,System.Boolean)">
            <summary>
            开始计时器。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.ReStart">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary> 
        </member>
        <member name="M:App.Timers.ThreadTimer.ReStart(System.Boolean)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary> 
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.ReStart(System.Int32)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param> 
        </member>
        <member name="M:App.Timers.ThreadTimer.ReStart(System.Boolean,System.Int32)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.ReStart(System.Int32,System.Boolean)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.ThreadTimer.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="P:App.Timers.ThreadTimer.Interval">
            <summary>
            获取或者设置计时器启动计时后的计时间隔(单位：毫秒)。
            </summary>
        </member>
        <member name="P:App.Timers.ThreadTimer.Name">
            <summary>
            计时器名称
            </summary>
        </member>
        <member name="P:App.Timers.ThreadTimer.Tag">
            <summary>
            计时器标签
            </summary>
        </member>
        <member name="P:App.Timers.ThreadTimer.Enabled">
            <summary>
            计时器的运行状态，True表示运行，否则返回False。
            </summary>
        </member>
        <member name="T:App.Timers.Timer">
            <summary>
            实现在用户定义的计时间隔引发事件的计时器。此计时器最宜用于 Windows 窗体应用程序中，并且必须在窗口中使用。
            </summary>
        </member>
        <member name="P:App.Timers.Timer.Name">
            <summary>
            计时器名称
            </summary>
        </member>
        <member name="P:App.Timers.Timer.Tag">
            <summary>
            计时器标签
            </summary>
        </member>
        <member name="P:App.Timers.Timer.Interval">
            <summary>
            获取或者设置计时器启动计时后的计时间隔(单位：毫秒)。
            </summary>
        </member>
        <member name="M:App.Timers.Timer.#ctor">
            <summary>
            实例化计时器
            </summary>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.String)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.Boolean)">
            <summary>
            实例化计时器
            </summary>  
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.Int32,System.Boolean)">
            <summary>
            实例化计时器
            </summary> 
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.String,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.String,System.Boolean)">
            <summary>
            实例化计时器
            </summary>
            <param name="name">计时器名称</param> 
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.Action,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.Action,System.Int32,System.Boolean)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.Action,System.Boolean,System.Int32)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.Int32,System.Action)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.Int32,System.Boolean,System.Action)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.#ctor(System.Boolean,System.Int32,System.Action)">
            <summary>
            实例化计时器
            </summary>
            <param name="tickHandler">计时器Tick事件</param>
            <param name="interval">计时器的计时间隔(单位：毫秒)。</param>
            <param name="immediately">计时器启动后立即触发Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="E:App.Timers.Timer.Tick">
            <summary>
            当指定的计时器已经到来并且计时器处于启用状态时发生。
            </summary>
        </member>
        <member name="E:App.Timers.Timer.EnabledChanged">
            <summary>
            计时器运行状态改变事件
            </summary>
        </member>
        <member name="M:App.Timers.Timer.onTick(System.EventArgs)">
            <summary>
            激活时钟事件 Tick
            </summary>
        </member>
        <member name="M:App.Timers.Timer.Start">
            <summary>
            开始计时器。
            </summary>
        </member>
        <member name="M:App.Timers.Timer.Start(System.Boolean)">
            <summary>
            开始计时器。
            </summary>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.Start(System.Int32)">
            <summary>
            开始计时器。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
        </member>
        <member name="M:App.Timers.Timer.Start(System.Boolean,System.Int32)">
            <summary>
            开始计时器。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.Start(System.Int32,System.Boolean)">
            <summary>
            开始计时器。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="M:App.Timers.Timer.ReStart">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary> 
        </member>
        <member name="M:App.Timers.Timer.ReStart(System.Int32)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param> 
        </member>
        <member name="M:App.Timers.Timer.ReStart(System.Boolean)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.ReStart(System.Boolean,System.Int32)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
        <member name="M:App.Timers.Timer.ReStart(System.Int32,System.Boolean)">
            <summary>
            重新启动计时器(立即停止当前计时器并且重新开始计时)。
            </summary>
            <param name="interval">计时器的计时间隔(单位：毫秒)，不改变当前刻度的设置。</param>
            <param name="onlyOne">仅仅激活一次计时器Tick事件。</param>
        </member>
    </members>
</doc>
