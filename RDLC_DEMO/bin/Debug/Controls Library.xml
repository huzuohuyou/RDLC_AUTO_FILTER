<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Controls Library</name>
    </assembly>
    <members>
        <member name="T:App.ControlLibrary.Button">
            <summary>
            按钮控件
            <para>说明:</para>
            <para>   1、增强了按钮的默认鼠标指针为手形指针</para>
            <para>   2、增加了灵活调整按钮上面呈现图标大小的属性ImageSize</para>
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Button.EnterSendTab">
            <summary>
            设置或者返回如何回车自动发送Tab键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.Button.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.Button.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="P:App.ControlLibrary.Button.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘前景事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘背景事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.WndProc(System.Windows.Forms.Message@)">
            <summary>
            消息事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.OnClick(System.EventArgs)">
            <summary>
            鼠标单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.OnDoubleClick(System.EventArgs)">
            <summary>
            鼠标双击事件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Button.Cursor">
            <summary>
            设置或者返回鼠标指针的样式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Button.ImageAlign">
            <summary>
            设置或者获取按钮控件的图片对齐方式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Button.Image">
            <summary>
            设置或者返回按钮控件上面显示的图标
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Button.ImageSize">
            <summary>
            设置或者返回图标尺寸
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Button.ImageIndex">
            <summary />
        </member>
        <member name="P:App.ControlLibrary.Button.ImageKey">
            <summary />
        </member>
        <member name="P:App.ControlLibrary.Button.ImageList">
            <summary />
        </member>
        <member name="P:App.ControlLibrary.Button.DataBindings">
            <summary />
        </member>
        <member name="M:App.ControlLibrary.Button.ProgressBegin">
            <summary>
            开始进度条展示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Button.ProgressFinally">
            <summary>
            结束进度条展示。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Calendar">
            <summary>
            日历控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.EnterSendTab">
            <summary>
            回车自动发送Tab键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="M:App.ControlLibrary.Calendar.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.Calendar.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="P:App.ControlLibrary.Calendar.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.BackColor">
            <summary>
            获取或设置控件的背景色。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.BackColorSel">
            <summary>
            选定的日期背景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.ClickBackColor">
            <summary>
            鼠标单击日历时的背景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.Value">
            <summary>
            设置或者返回日历选定的日期
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.Values">
            <summary>
            设置或者返回日历选定的日期(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.Year">
            <summary>
            返回日历选定的日期年
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.Month">
            <summary>
            返回日历选定的日期月
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.Day">
            <summary>
            返回日历选定的日期天
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.Size">
            <summary />
        </member>
        <member name="E:App.ControlLibrary.Calendar.Selected">
            <summary>
            日历选定事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnSelected(System.EventArgs)">
            <summary>
            激活日历选定事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.Calendar.ValueChanged">
            <summary>
            日历值改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnValueChanged(System.EventArgs)">
            <summary>
            激励日历值改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.InitYearList(System.Int32)">
            <summary>
            初始化年列表（年基数的前后50年）
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.FillControl(System.String,System.String)">
            <summary>
            填充控件
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Calendar.CalendarArea">
            <summary>
            日历区域大小和位置
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarInfo.Index">
            <summary>
            日历的索引
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarInfo.Value">
            <summary>
            日历的天值
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarInfo.Selected">
            <summary>
            选定的日历
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarInfo.MouseEnter">
            <summary>
            鼠标进入
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarInfo.Left">
            <summary>
            日历的左边距
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarInfo.Top">
            <summary>
            日历的上边距
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarInfo.Width">
            <summary>
            日历的宽度
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarInfo.Heigh">
            <summary>
            日历的高度
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarInfo.Rectangle">
            <summary>
            获取日历的大小和位置
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarCollection.Item(System.Drawing.Point)">
            <summary>
            获取指定位置处的日历
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Calendar.CalendarCollection.Item(System.DateTime)">
            <summary>
            根据指定日期的天值获取日历信息
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.CalendarCollection.CreateMonthCalendar(System.Int32,System.Int32)">
            <summary>
            生成月历
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnHandleCreated(System.EventArgs)">
            <summary>
            创建句柄事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            控件绘制事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            控件绘制背景事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标移动事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnSizeChanged(System.EventArgs)">
            <summary>
            调整大小事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnVisibleChanged(System.EventArgs)">
            <summary>
            可视状态改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.OnParentBackColorChanged(System.EventArgs)">
            <summary>
            父背景色改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            命令建事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Calendar.Dispose(System.Boolean)">
            <summary/>
        </member>
        <member name="T:App.ControlLibrary.Chart">
            <summary>
            图表控件
            </summary>
            <remarks>增强放大、平移功能。</remarks>
        </member>
        <member name="M:App.ControlLibrary.Chart.#ctor">
            <summary>
            图表控件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Chart.AllowZoom">
            <summary>
            是否允许缩放。
            <para>右键拖拽进行缩放，或者Ctrl+左键拖拽。</para>
            <para>如启用缩放，则鼠标右键双击立即恢复图表的原始非缩放时的图形，或者Ctrl+鼠标右键单击。</para>
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Chart.AllowPan">
            <summary>
            是否允许平移。
            <para>鼠标左键拖拽平移(只有放大的图形才允许进行平移)。</para>
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Chart.IsEmpty">
            <summary>
            获取控件是否为未设置任何图形数据的空图表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Chart.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            处理对话框键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Chart.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            键盘抬起事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Chart.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Chart.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标移动事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Chart.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标抬起事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Chart.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Chart.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标双击事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.CheckBox">
            <summary>
            复选框控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.CheckBox.EnterSendTab">
            <summary>
            回车自动发送Tab键的模式
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="P:App.ControlLibrary.CheckBox.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.CheckBox.PreviewCheckedChanged">
            <summary>
            复选改变之前事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.OnPreviewCheckedChanged(System.ComponentModel.CancelEventArgs)">
            <summary>
            激活复选改变之前事件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.CheckBox.ReadOnly">
            <summary>
            复选框是否允许通过鼠标点击事件来改变选定。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.CheckBox.Cursor">
            <summary>
            鼠标指针的样式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.CheckBox.Checkeds">
            <summary>
            获取或设置一个值，该值指示复选框是否处于选中状态(忽略事件的激活)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.OnCheckedChanged(System.EventArgs)">
            <summary>
            复选状态改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            键盘按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.OnClick(System.EventArgs)">
            <summary>
            鼠标单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            命令建
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标单击
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标弹起事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标双击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CheckBox.PerformCheckedChanged(System.EventArgs)">
            <summary>
            激活复选状态改变事件 CheckedChanged。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.EditableCell">
            <summary>
            嵌入的可编辑单元格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.Clone">
            <summary>
            获取单元格的精确副本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            初始化编辑器控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.DetachEditingControl">
            <summary>
            单元格分离编辑器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableCell.OwningColumn">
            <summary>
            获取包含此单元格的列。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableCell.FormattedValueType">
            <summary>
            格式化值的类型
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableCell.ValueType">
            <summary>
            单元格值的类型
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableCell.EditType">
            <summary>
            编辑器类型
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableCell.MaxInputLength">
            <summary>
            最大可录入的字符串长度。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.GetContentBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            获取单元格内容区域的大小和位置
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            获取异常图标的位置和大小
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.GetFormattedValue(System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            获取为显示进行格式化的单元格的值。
            </summary>
            <param name="rowIndex">该单元格父行的索引。</param>
            <param name="cellStyle">对单元格有效的样式。</param>
            <param name="context">DataGridViewDataErrorContexts 值的按位组合，用于描述需要格式化值的上下文。</param>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)">
            <summary>
            计算单元格的理想大小（以像素为单位）。
            </summary>
            <param name="constraintSize">单元格允许的最大大小</param>
            <param name="cellStyle">表示单元格样式</param>
            <param name="rowIndex">单元格的从零开始的行索引</param>
            <param name="graphics">用于绘制单元格的GDI+</param>        
        </member>
        <member name="M:App.ControlLibrary.EditableCell.KeyEntersEditMode(System.Windows.Forms.KeyEventArgs)">
            <summary>
            确定是否应基于给定键启动编辑模式。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.OnEnter(System.Int32,System.Boolean)">
            <summary>
            在焦点移动到单元格时进行调用。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.OnLeave(System.Int32,System.Boolean)">
            <summary>
            当焦点从单元格上移开时调用。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            在指针位于单元格上且用户同时单击鼠标按钮时进行调用。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            绘制当前的单元格。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            设置表格控件中的单元格承载的编辑控件的位置和大小。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableCell.ToString">
            <summary>
            返回描述当前单元格的字符串。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.EditableColumn">
            <summary>
            嵌入的可编辑表格列
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableColumn.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableColumn.#ctor(App.ControlLibrary.EditableCell)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableColumn.SortMode">
            <summary>
            获取或设置列的排序模式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableColumn.ReadOnly">
            <summary>
            获取或设置是否可以编辑列的单元格。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableColumn.Clone">
            <summary>
            创建此列的精确副本
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableColumn.DataGridView">
            <summary>
            获取与此可编辑列关联的 DataGridView 控件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableColumn.ToString">
            <summary>
            获取一个描述该列的字符串。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableColumn.CellTemplate">
            <summary>
            获取或设置用于创建新单元格的模板。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableColumn.MaxInputLength">
            <summary>
            最大可录入的字符串长度。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableColumn.Editor">
            <summary>
            嵌入的可编辑控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableColumn.ValidPropertyVerify(System.Type,System.String)">
            <summary>
            属性的有效性校验
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableColumn.GetPreferredWidth(System.Windows.Forms.DataGridViewAutoSizeColumnMode,System.Boolean)">
            <summary>
            根据指定条件计算列的理想宽度
            </summary>
        </member>
        <member name="T:App.ControlLibrary.EditableEditingControl">
            <summary>
            嵌入的可编辑控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableEditingControl.#ctor">
            <summary>
            初始化嵌入的可编辑控件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableEditingControl.OwnerCell">
            <summary>
            当前编辑控件的归属单元格
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditableEditingControl.Editor">
            <summary>
            用户签入的编辑器控件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableEditingControl.OnGotFocus(System.EventArgs)">
            <summary>
            未使用OnGotFocus，在鼠标单击单元格时偶有焦点丢失状况
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EditableEditingControl.ReLayoutEditor">
            <summary>
            重新布局编辑器位置和大小
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NodeCell">
            <summary>
            可折叠单元格
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeCell.OwningRow">
            <summary>
            获取包含此单元格的表格行。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeCell.OwningColumn">
            <summary>
            获取包含此单元格的表格列
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeCell.Level">
            <summary>
            获取当前行在树视表格中从0开始的子级数(非树视行为-1)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeCell.EditType">
            <summary>
            节点编辑器类型
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeCell.BoxArea">
            <summary>
            获取折叠图标的区域
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeCell.GlyphOffset">
            <summary>
            图形偏差
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeCell.GlyphMargin">
            <summary>
            图形边距
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeCell.UpdatePadding">
            <summary>
            更新节点单元格Padding
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeCell.Clone">
            <summary>
            创建此单元格的精确副本。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            重绘
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeCell.PaintingNodeRowPattern(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            画折叠行图样
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            鼠标按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            鼠标单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            鼠标移动事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)">
            <summary>
            键盘按下事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NodeColumn">
            <summary>
            可折叠表格列
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeColumn.#ctor">
            <summary>
            实例化树视表格列
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeColumn.#ctor(App.ControlLibrary.NodeCell)">
            <summary>
            实例化树视表格列
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeColumn.DefaultImage">
            <summary>
            默认树视表格行图像
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeColumn.Clone">
            <summary>
            复制列的精确副本
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NodeEditingControl">
            <summary>
            可折叠列编辑器
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NodeRow">
            <summary>
            可折叠节点行
            </summary>
        </member>
        <member name="F:App.ControlLibrary.NodeRow.IsVirtualRoot">
            <summary>
            是否为虚根
            </summary>
        </member>
        <member name="F:App.ControlLibrary.NodeRow.OriginalExpanded">
            <summary>
            折叠之前的原始展开状态
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.#ctor">
            <summary>
            在不使用模板的情况下初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.#ctor(App.ControlLibrary.NodeRow)">
            <summary>
            在不使用模板的情况下初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.#ctor(App.ControlLibrary.DataGridView)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Clone">
            <summary>
            创建此行的精确副本
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.DataGridView">
            <summary>
            获取与此行关联的树视表格控件。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.Visible">
            <summary>
            节点行是否可见.
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.Parent">
            <summary>
            获取此行的父节点行。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.Root">
            <summary>
            获取当前节点的根节点
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.Nodes">
            <summary>
            此行的子节点行集合。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.IsExpanded">
            <summary>
            获取节点行的展开状态。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.IsRoot">
            <summary>
            表示该树视表格行是否为根节点(不是归属关系的表格行也视为根行)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.IsFirstSibling">
            <summary>
            是否为父节点行的第一行。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.IsLastSibling">
            <summary>
            是否为父节点行的最后一行。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.IsFirstVisibleSibling">
            <summary>
            是否为父节点行的第一个可见节点行
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.IsLastVisibleSibling">
            <summary>
            是否为父节点行的最后一个可见节点行
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.Level">
            <summary>
            在树视表格中从0开始子级数。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.Image">
            <summary>
            节点行的图像
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.ImageIndex">
            <summary>
            使用树视表格图像列表控件中的图像索引。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.ImageKey">
            <summary>
            使用树视表格图像列表控件中的图像键值。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.ImageList">
            <summary>
            图像列表控件对象
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.HasChildren">
            <summary>
            是否存在子节点行。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.FirstChildren">
            <summary>
            获取第一个子节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.LastChildren">
            <summary>
            获取最后一个子节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.FirstVisibleChildren">
            <summary>
            获取第一个可见的子节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.LastVisibleChildren">
            <summary>
            获取最后一个可见的子节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.HasSibling">
            <summary>
            是否存在兄弟节点行。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.PreviousSibling">
            <summary>
            获取上一个兄弟节点行(如果没有兄弟节点行或者为第一个节点行返回 null)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.NextSibling">
            <summary>
            获取下一个兄弟节点行(如果没有兄弟节点行或者为最后一个节点行返回 null)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.FirstSibling">
            <summary>
            获取第一个兄弟节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.LastSibling">
            <summary>
            获取最后一个兄弟节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.FirstVisibleSibling">
            <summary>
            获取第一个可见的兄弟节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.LastVisibleSibling">
            <summary>
            获取最后一个可见的兄弟节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.Index">
            <summary>
            在树视表格中的位置索引。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.RowIndex">
            <summary>
            在树视表格中的位置索引(等同于Index)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.NodeIndex">
            <summary>
            在所属行集合中的位置索引(-1表示当前行不属于任何行集合)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRow.DefaultCellStyle">
            <summary>
            获取或设置行的默认样式，除非重写默认样式，否则将用它们来呈现行中的单元格。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Collapse(System.Boolean)">
            <summary>
            折叠节点行。
            </summary>
            <param name="includeJunior">是否包括所有子辈节点行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Expand(System.Boolean)">
            <summary>
            展开节点行(同时展开父辈节点行)。
            </summary>
            <param name="includeJunior">是否包括所有子辈节点行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Switch">
            <summary>
            切换节点行的折叠或展开状态。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.ToString">
            <summary>
            树视表格行文本表达式。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.IsElder(App.ControlLibrary.NodeRow)">
            <summary>
            判断当前节点行是否为指定节点行的父辈行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.IsJunior(App.ControlLibrary.NodeRow)">
            <summary>
            判断当前节点行是否为指定节点行的子辈行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.AddChildRow(App.ControlLibrary.NodeRow,System.Int32)">
            <summary>
            当前树视表格中追加子行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.InsertChildRow(System.Int32,App.ControlLibrary.NodeRow)">
            <summary>
            当前树视表格中插入子行,并且返回共插入包括家族的多少行。
            </summary>
            <param name="index">基于表格的从0开始的索引位置(绝对位置)。</param>
            <param name="childRow">插入的树视子表格行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.RemoveChildRow(App.ControlLibrary.NodeRow)">
            <summary>
            当前树视表格行移除子行(包括家族子行)。 
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.ClearChildRows">
            <summary>
            移除索引子树视表格行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.GetNodes(System.Boolean)">
            <summary>
            获取子节点列表。
            </summary>
            <param name="allJunior">是否包括所有后代子节点</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Move(System.Int32)">
            <summary>
            把指定的行节点在表格中移动到指定位置，并且返回该指定节点行。
            </summary>
            <param name="toIndex">移动到的指定索引位置</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Find(System.Predicate{App.ControlLibrary.NodeRow})">
            <summary>
            从子节点行集合中查找第一个符合条件的子节点。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.FindAll(System.Predicate{App.ControlLibrary.NodeRow})">
            <summary>
            从子节点行集合中查找所有符合条件的子节点。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.ForEach(System.Action{App.ControlLibrary.NodeRow})">
            <summary>
            循环枚举子节点行的集合。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Add">
            <summary>
            在子节点行集合的末尾新增加一个空的子节点行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Add(App.ControlLibrary.NodeRow)">
            <summary>
            在子节点行集合中增加一个指明的子节点行。
            </summary>
            <param name="node">指明的子节点行</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Add(System.Data.DataRow)">
            <summary>
            将数据行添加到子节点行集合的末尾处。
            </summary>
            <param name="dataRow">将要加入集合的数据行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Add(System.Object[])">
            <summary>
            在子节点行集合中添加新子节点行，并用指定对象数组填充单元格。
            </summary>
            <param name="values"> 用于填充新的单元格的对象，数量不定。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Add``1(``0)">
            <summary>
            将数据实体插入子节点行集合的指定索引处。
            </summary>
            <param name="item">将要加入集合的数据实体。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.AddRange(System.Collections.Generic.IEnumerable{App.ControlLibrary.NodeRow})">
            <summary>
            将指定节点集合的元素添加到子节点行集合的末尾。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.AddRange(App.ControlLibrary.NodeRow[])">
            <summary>
             将指定节点集合的元素添加到子节点行集合的末尾。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.AddRange``1(System.Collections.Generic.IList{``0})">
            <summary>
            将指定的数据实体集合添加到子节点行集合的末尾。
            </summary>
            <param name="items">数据实体集合</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Remove(App.ControlLibrary.NodeRow)">
            <summary>
            从子节点行集合中移除特定的对象(包括该对象的所有子孙级对象)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Remove(System.Int32)">
            <summary>
            移除子节点行集合的指定索引处的元素。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Boolean,System.Boolean)">
            <summary>
            重绘表格行
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.PaintCells(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Boolean,System.Boolean,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            重绘单元格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.PaintHeader(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Boolean,System.Boolean,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            重绘行头
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRow.CreateCellsInstance">
            <summary>
            创建表格实例
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NodeRowsCollection">
            <summary>
            可折叠节点行集合
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRowsCollection.OwningRow">
            <summary>
            获取管理此集合的节点行。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRowsCollection.Count">
            <summary>
            获取表格行集合中实际包含的元素数。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Counts(System.Boolean)">
            <summary>
            获取表格行集合中实际包含的元素数。
            </summary>
            <param name="includeChildrens">是否包括家族内的所有后代表格行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Add">
            <summary>
            在集合的末尾新增加一个空行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Add(App.ControlLibrary.NodeRow)">
            <summary>
            在集合中增加一个指明的表格行。
            </summary>
            <param name="node">指明的节点行</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Add(System.Data.DataRow)">
            <summary>
            将数据行添加到集合的末尾处。
            </summary>
            <param name="dataRow">将要加入集合的数据行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Add(System.Object[])">
            <summary>
            在集合中添加新行，并用指定对象填充单元格。
            </summary>
            <param name="values"> 用于填充新的单元格的对象，数量不定。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Add``1(``0)">
            <summary>
            将数据实体插入集合的指定索引处。
            </summary>
            <param name="item">将要加入集合的数据实体。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.AddRange(System.Collections.Generic.IEnumerable{App.ControlLibrary.NodeRow})">
            <summary>
            将指定集合的元素添加到树视表格行集合的末尾。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.AddRange(App.ControlLibrary.NodeRow[])">
            <summary>
             将指定集合的元素添加到树视表格行集合的末尾。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.AddRange``1(System.Collections.Generic.IList{``0})">
            <summary>
            将指定的数据实体集合添加到树视表格行集合的末尾。
            </summary>
            <param name="items">数据实体集合</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Add(System.Object,App.ControlLibrary.BindingMapping,System.Boolean)">
            <summary>
            内部新增表格行(不重复解析架构)
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.InsertAt(System.Int32)">
            <summary>
            在表格 DataGridView 行集合中的指定索引位置插入一个空节点行。
            </summary>
            <param name="rowIndex">DataGridView的行集合中的指定位置</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.InsertAt(System.Int32,App.ControlLibrary.NodeRow)">
            <summary>
            在表格 DataGridView 行集合中的指定索引位置插入一个节点行对象。
            </summary>
            <param name="rowIndex">DataGridView的行集合中的指定位置</param>
            <param name="node">要插入的节点行对象。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.InsertAt(System.Int32,System.Object[])">
            <summary>
            在表格 DataGridView 行集合中的指定索引位置用指定的单元格值插入一个节点行对象。
            </summary>
            <param name="rowIndex">DataGridView的行集合中的指定位置</param>
            <param name="values">需要插入行的单元格值</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.InsertAt(System.Int32,System.Data.DataRow)">
            <summary>
            在表格 DataGridView 行集合中的指定索引位置用指定的数据行值插入一个节点行对象。
            </summary>
            <param name="rowIndex">DataGridView的行集合中的指定位置</param>
            <param name="dataRow">将要插入集合的数据行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.InsertAt``1(System.Int32,``0)">
            <summary>
            在表格 DataGridView 行集合中的指定索引位置用指定的数据实体插入一个节点行对象。
            </summary>
            <param name="rowIndex">DataGridView的行集合中的指定位置</param>
            <param name="item">将要插入集合的数据实体。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Insert(System.Int32,App.ControlLibrary.NodeRow)">
            <summary>
            将元素插入子行集合的指定索引处。
            </summary>
            <param name="index">在集合中从零开始的索引，应在该位置插入 node。</param>
            <param name="node">要插入的对象。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Insert(System.Int32,System.Object[])">
            <summary>
            将元素插入子行集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="values">需要插入行的单元格数据</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Insert(System.Int32,System.Data.DataRow)">
            <summary>
            将元素插入子行集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="dataRow">将要插入集合的数据行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Insert``1(System.Int32,``0)">
            <summary>
            将数据实体插入集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">将要插入集合的数据实体。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.InsertRange(System.Int32,System.Collections.Generic.IList{App.ControlLibrary.NodeRow})">
            <summary>
             将指定集合的元素添加到树视表格行集合的指定位置索引处。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.InsertRange``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
             将指定集合的实体元素添加到树视表格行集合的指定位置索引处。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Insert(System.Int32,System.Object,App.ControlLibrary.BindingMapping,System.Boolean)">
            <summary>
            内部插入表格行(不重复解析架构)
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Edit(System.Int32,System.Object[])">
            <summary>
            编辑集合中指定索引处的表格行(按单元格顺序)。
            </summary>
            <param name="index">指定的索引</param>
            <param name="values">用于修改表格行的数据组。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Edit(System.Int32,System.Data.DataRow)">
            <summary>
            编辑集合中指定索引处的表格行(按 DataPropertyName 属性)。
            </summary>
            <param name="index">指定的索引</param>
            <param name="dataRow">用于修改表格行的数据行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Edit``1(System.Int32,``0)">
            <summary>
            编辑集合中指定索引处的表格行(按 DataPropertyName 属性)。
            </summary>
            <param name="index">指定的索引</param>
            <param name="item">用于修改表格行的数据实体。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Edit(App.ControlLibrary.NodeRow,System.Object[])">
            <summary>
            用指定的单元格值编辑指定的表格行(按单元格顺序)。
            </summary>
            <param name="node">指定的表格行</param>
            <param name="values">用于修改表格行的数据组。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Edit(App.ControlLibrary.NodeRow,System.Data.DataRow)">
            <summary>
            用指定的数据行值编辑指定的表格行(按 DataPropertyName 属性)。
            </summary>
            <param name="node">指定的表格行</param>
            <param name="dataRow">用于修改表格行的数据行。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Edit``1(App.ControlLibrary.NodeRow,``0)">
            <summary>
            用指定的数据实体值编辑指定的表格行(按 DataPropertyName 属性)。
            </summary>
            <param name="node">指定的表格行</param>
            <param name="item">用于修改表格行的数据实体。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Remove(App.ControlLibrary.NodeRow)">
            <summary>
            从集合中移除特定的对象(包括该对象的所有子孙级对象)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.RemoveAt(System.Int32)">
            <summary>
            移除集合的指定索引处的元素。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Clear">
            <summary>
            从集合中移除所有元素。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCollection.Contains(App.ControlLibrary.NodeRow,System.Boolean)">
             <summary>
             确定当前集合中是否包含指定的节点行。
             </summary>
             <param name="includeChildren">是否包含子辈的所有节点行的搜索。</param>
            <param name="node">要检索的节点行</param>
        </member>
        <member name="P:App.ControlLibrary.NodeRowsCollection.FirstVisibleSibling">
            <summary>
            获取节点集合中第一个可见的子节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRowsCollection.LastVisibleSibling">
            <summary>
            获取节点集合中最后一个可见的子节点。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ComboBase">
            <summary>
            组合选择器
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBase.popuper">
            <summary>
            弹出页对象
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBase.ComboBoxInfo">
            <summary>
            组合框信息
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnHandleCreated(System.EventArgs)">
            <summary>
            创建句柄
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.Dispose(System.Boolean)">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBase.editorWindow">
            <summary>
            编辑器窗口
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ComboBase.EditNativeWindow">
            <summary>
            编辑器消息窗口
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.EditNativeWindow.#ctor(App.ControlLibrary.ComboBase)">
            <summary>
            实例化编辑器窗口
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.EditNativeWindow.EditorRect">
            <summary>
            编辑器的矩形尺寸
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.EditNativeWindow.Refresh">
            <summary>
            重绘界面
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.EditNativeWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.EditNativeWindow.Dispose">
            <summary>
            销毁
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.EnterSendTab">
            <summary>
            回车自动发送Tab键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">hift+Tab 反向跳转。</param>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.RedrawSuspender">
            <summary>
            重绘挂起恢复器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.EventSuspender">
            <summary>
            事件响应挂起恢复器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.ProgressBegin">
            <summary>
            开始进度条展示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.ProgressFinally">
            <summary>
            结束进度条展示。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.Selector">
            <summary>
            组合嵌入的控件选择器。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.FlatAppearance">
            <summary>
            对于FlatStyle为FlatStyle.Flat样式时组合框的边框样式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.ShowButton">
            <summary>
            是否显示按钮
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.Text">
            <summary>
            设置与此控件关联的文本。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.Texts">
            <summary>
            设置与此控件关联的文本(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.SelectionText">
            <summary>
            获取或设置控件的可编辑部分中选定的文本。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.ReadOnly">
            <summary>
            只读属性，输入栏是否可以编辑。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.ImeType">
            <summary>
            键盘可以输入字符的类型。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.Opacity">
            <summary>
            下拉列表页面的透明度(0～1之间的小数)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.IsDropOpened">
            <summary>
            下拉列表打开状态
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.WatermarkColor">
            <summary>
            水印文本前景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.WatermarkText">
            <summary>
            水印文本内容
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.ImeMode">
            <summary>
            获取或设置控件的输入法编辑器 (IME) 模式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.Resizable">
            <summary>
            弹出页是否可以调整大小
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.FocusOnOpen">
            <summary>
            当弹出页打开时是否设置弹出控件为输入焦点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.Focused">
            <summary>
            获取控件是否具有输入焦点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.AutoClose">
            <summary>
            控件是否应在失去激活状态时自动关闭弹出页。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.QuickPreview">
            <summary>
            当键入键盘按键字符时弹出页打开进入快速搜索预览状态。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.InQuickPreviewing">
            <summary>
            获取是否处于快速预览模式中
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.DataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.ShowingAnimation">
            <summary>
            展开弹出页的动画效果。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.HidingAnimation">
            <summary>
            关闭弹出页的动画效果。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.AnimationDuration">
            <summary>
            弹出页动画的持续时间长度(单位毫秒:默认100)。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ComboBase.DropOpening">
            <summary>
            下拉列表即将打开事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ComboBase.DropOpened">
            <summary>
            下拉列表打开事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ComboBase.DropClosing">
            <summary>
            下拉列表即将关闭事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ComboBase.DropClosed">
            <summary>
            下拉列表关闭事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ComboBase.QuickPreviewing">
            <summary>
            快速预览事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnDropOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            当选择器下拉页面即将打开时发生。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnDropOpened(System.EventArgs)">
            <summary>
            选择器已经打开事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnDropClosing(App.ControlLibrary.DropClosingEventArgs)">
            <summary>
            选择器即将关闭事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnDropClosed(App.ControlLibrary.DropClosedEventArgs)">
            <summary>
            选择器已关闭事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnDropOpenedChanged(System.Boolean)">
            <summary>
            下拉列表打开状态改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnQuickPreviewing(App.ControlLibrary.QuickPreviewEventArgs)">
            <summary>
            激活快速预览事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.DropOpen">
            <summary>
            打开下拉列表页面
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.DropClose(System.Boolean)">
            <summary>
            关闭下拉列表页面
            </summary>
            <param name="selectAll">文本输入栏的文本是否设置为全选状态</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.DropSwitch">
            <summary>
            下拉列表页面打开、关闭切换。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.ResizeDropSize(System.Drawing.Size)">
            <summary>
            重新调整弹出页的显示尺寸
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.PerformTextChanged(System.EventArgs)">
            <summary>
            激活文本值改变事件 OnTextChanged。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.PerformKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            激活控件的 KeyDown 事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnEditorRelayout(App.ControlLibrary.ComboBoxInfo)">
            <summary>
            编辑器布局
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            选择器键盘事件
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBase.containerWndProc">
            <summary>
            控件所在容器消息处理窗口
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            键盘输入键按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnGotFocus(System.EventArgs)">
            <summary>
            获取焦点事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnLostFocus(System.EventArgs)">
            <summary>
            控件丢失焦点
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnBackColorChanged(System.EventArgs)">
            <summary>
            北京改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnSizeChanged(System.EventArgs)">
            <summary>
            尺寸改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnDropDownStyleChanged(System.EventArgs)">
            <summary>
            下拉样式改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnTextChanged(System.EventArgs)">
            <summary>
            文本值改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnVisibleChanged(System.EventArgs)">
            <summary>
            可视属性改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnFontChanged(System.EventArgs)">
            <summary>
            字体改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.ResetButtonCover(System.Boolean,System.Int32)">
            <summary>
            重新设置遮盖按钮的控件
            </summary>
            <param name="shown">true表示显示按钮，false表示隐藏按钮</param>
            <param name="width">按钮的宽度</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.OnEnabledChanged(System.EventArgs)">
            <summary>
            可用属性改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.AppllaySelectorFont(System.Windows.Forms.Control)">
            <summary>
            应用选择器字体
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBase.InvalidMouseClick(System.Drawing.Point)">
            <summary>
            判断是否为有效的鼠标点击
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.ItemHeight">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.FormattingEnabled">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.FormatString">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.MaxDropDownItems">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.Sorted">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.ValueMember">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.DisplayMember">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.DataManager">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.DataBindings">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.DropDownHeight">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.DropDownWidth">
            <summary/>
        </member>
        <member name="E:App.ControlLibrary.ComboBase.DropDown">
            <summary/>
        </member>
        <member name="E:App.ControlLibrary.ComboBase.DropDownClosed">
            <summary/>
        </member>
        <member name="E:App.ControlLibrary.ComboBase.SelectedValueChanged">
            <summary/>
        </member>
        <member name="E:App.ControlLibrary.ComboBase.SelectionChangeCommitted">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.AutoCompleteMode">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.AutoCompleteSource">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.AutoCompleteCustomSource">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBase.Items">
            <summary/>
        </member>
        <member name="T:App.ControlLibrary.ComboBox">
            <summary>
            组合框控件
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBox.ItemList">
            <summary>
            列表项目列表
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBox.ViewList">
            <summary>
            助记码检索的视图列表
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBox.ListBox">
            <summary>
            下拉列表页面
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnHandleCreated(System.EventArgs)">
            <summary>
            创建句柄
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Items">
            <summary>
            组合框中的列表项目(文本|编码|拼音助记码|扩展码|附加数据)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Item(System.Int32)">
            <summary>
            获取或者设置指定索引位置处的列表项(不改变当前索引)。
            </summary>
            <param name="index">指定的索引</param>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Item(System.String)">
            <summary>
            获取或者设置指定编码对应的列表项(不改变当前索引)。
            </summary>
            <param name="code">列表项编码</param>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.SelectedIndex">
            <summary>
            返回或者设置控件的选定索引，可以改变当前选定索引SelectedIndex。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.SelectedIndexs">
            <summary>
            设置控件的选定索引，可以改变当前选定索引 SelectedIndex(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Text">
            <summary>
            设置与此控件关联的文本。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Code">
            <summary>
            获取或者设置组合框当前索引位置处的编码
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Codes">
            <summary>
            返回或者设置组合框指定索引的编码(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.ExtraCode">
            <summary>
            获取或者设置当前索引位置处列表项的扩展码
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.ExtraCodes">
            <summary>
            获取或者设置指定索引位置处列表项的扩展码(忽略事件的激活)
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Spelling">
            <summary>
            获取或者设置当前索引位置处列表项的拼音助记码
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Data">
            <summary>
            获取或者设置当前索引位置处列表项的附加数据，一般为绑定数据源时使用的数据项。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Datas">
            <summary>
            获取或者设置指定索引位置处列表项的附加数据，一般为绑定数据源时使用的数据项(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.QuickPreview">
            <summary>
            当键入键盘按键字符时弹出页打开进入快速搜索预览状态。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.QuickPreviewMode">
            <summary>
            快速预览模式(true表示全模糊匹配模式，false表示仅开头字母模糊匹配模式)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.MaxDropDownItems">
            <summary>
            返回或者设置下拉列表中显示的最大列表数
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Count">
            <summary>
            组合框中列表的总数
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.AutoFind">
            <summary>
            回车自动根据输入的文本查找列表项目(改变当前索引值，查询按如下顺序：Text,Code,ExtraCode,Spelling)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.AutoSpelling">
            <summary>
            当没有设置助记码时是否自动设置助记码。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.FormatInfo">
            <summary>
            列表文件格式化器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.DataMapping">
            <summary>
            数据源字段映射
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.AutoComplete">
            <summary>
            在快速预览模式时是否自动完成剩余部分列表字符。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.Selector">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.FocusOnOpen">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.AutoClose">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.DataSources">
            <summary>
            设置控件的数据源
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ComboBox.DataSource">
            <summary>
            设置或获取控件的数据源
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.IndexOf(System.Predicate{App.ControlLibrary.DataItem})">
            <summary>
            在列表项集合中递归查询符合条件的第一个列表项的索引。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.IndexOf(System.String)">
            <summary>
            由列表项的编码值返回控件的列表项目索引。
            </summary>
            <param name="code">列表项的编码，错误的编码返回-1。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.IndexOfText(System.String)">
            <summary>
            由列表项的文本值返回控件的列表项目索引。
            </summary>
            <param name="text">列表项的文本，错误的文本返回-1。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.IndexOfExtraCode(System.String)">
            <summary>
            获取指定扩展码对应的列表项索引
            </summary>
            <param name="extraCode">列表项目的扩展码，错误的扩展码返回-1。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.IndexOfData(System.Predicate{System.Object})">
            <summary>
            根据委托条件获取指定列表项索引
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.IndexOfData(System.Object)">
            <summary>
            根据委托条件获取指定列表项索引
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.TextOf(System.Int32)">
            <summary>
            在列表项集合中查询索引位置处的列表项文本值。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.TextOf(System.Predicate{App.ControlLibrary.DataItem})">
            <summary>
            在列表项集合中递归查询符合条件的第一个列表项的文本值。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.TextOf(System.String)">
            <summary>
            由列表项的编码值返回对应的的列表项文本值。
            </summary>
            <param name="code">列表项的编码。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.TextOfExtraCode(System.String)">
            <summary>
            获取指定扩展码返回对应的列表项文本值。
            </summary>
            <param name="extraCode">列表项目的扩展码。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.CodeOf(System.Int32)">
            <summary>
            在列表项集合中查询索引位置处的列表项编码。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.CodeOf(System.Predicate{App.ControlLibrary.DataItem})">
            <summary>
            在列表项集合中递归查询符合条件的第一个列表项的编码。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.CodeOf(System.String)">
            <summary>
            由列表项的编码值返回对应的的列表项编码。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.CodeOfExtraCode(System.String)">
            <summary>
            获取指定扩展码返回对应的列表项编码。
            </summary>
            <param name="extraCode">列表项目的扩展码。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.ExtraCodeOf(System.Int32)">
            <summary>
            在列表项集合中查询索引位置处的列表项扩展码。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.ExtraCodeOf(System.Predicate{App.ControlLibrary.DataItem})">
            <summary>
            在列表项集合中递归查询符合条件的第一个列表项的扩展码。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.ExtraCodeOf(System.String)">
            <summary>
            由列表项的编码值返回对应的的列表项扩展码。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.ExtraCodeOfText(System.String)">
            <summary>
            由列表项的编码值返回对应的的列表项扩展码。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.DataOf(System.Int32)">
            <summary>
            在列表项集合中查询索引位置处的列表项附加数据。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.DataOf(System.String)">
            <summary>
            由列表项的编码值返回对应的列表项附加数据。
            </summary>
            <param name="code">列表项的编码，错误的编码返回-1。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.DataAs``1(System.Int32)">
            <summary>
            获取指定索引位置处列表项的附加数据，一般为绑定数据源时使用的数据项。
            </summary>
            <typeparam name="T">输出的泛型类型</typeparam>
            <param name="index">指定的索引位置(缺省表示当前索引位置)</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.Clear(System.Boolean)">
            <summary>
            清除所有的列表项目
            </summary>
            <param name="clearText">是否清空录入框的文本内容</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.Remove(System.Int32,System.Boolean)">
            <summary>
            删除指定索引的列表项目
            </summary>
            <param name="index">指定的索引，省略表示当前选定列表项目。</param>
            <param name="suspendEvent">是否临时挂起SelectedIndexChanged事件的响应。</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.AddItem(App.ControlLibrary.DataItem)">
            <summary>
            追加新列表项目
            </summary>
            <param name="data">数据实体</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.AddItem(System.String,System.String,System.String,System.String)">
            <summary>
            追加新列表项目
            </summary>
            <param name="text">项目名称</param>
            <param name="code">项目编码</param>
            <param name="spelling">项目助记码</param>
            <param name="extraCode">项目扩展码</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.EditItem(System.Int32,App.ControlLibrary.DataItem)">
            <summary>
            修改指定列表索引的列表项目
            </summary>
            <param name="index">列表索引</param>
            <param name="data">修改数据</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.EditItem(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            修改指定列表索引的列表项目
            </summary>
            <param name="index">列表索引</param>
            <param name="text">项目名称</param>
            <param name="code">项目编码</param>
            <param name="spelling">项目助记码</param>
            <param name="extraCode">项目扩展码</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.InsertItem(System.Int32,App.ControlLibrary.DataItem)">
            <summary>
            插入新列表项目
            </summary>
            <param name="data">插入的数据</param>
            <param name="index">插入的位置索引</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.InsertItem(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            插入新列表项目
            </summary>
            <param name="index">插入的位置索引</param>
            <param name="text">项目名称</param>
            <param name="code">项目编码</param>
            <param name="spelling">项目助记码</param>
            <param name="extraCode">项目扩展码</param>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.PerformSelectedIndexChanged(System.EventArgs)">
            <summary>
            生成 ComboBox 控件的 SelectedIndexChanged 事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            选择的索引改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnTextChanged(System.EventArgs)">
            <summary>
            文本值改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            键盘事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnQuickPreviewing(App.ControlLibrary.QuickPreviewEventArgs)">
            <summary>
            快速预览事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnFontChanged(System.EventArgs)">
            <summary>
            字体改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnBackColorChanged(System.EventArgs)">
            <summary>
            背景色改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnForeColorChanged(System.EventArgs)">
            <summary>
            前景色改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnDropOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            下拉页面即将打开事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.OnDropClosed(App.ControlLibrary.DropClosedEventArgs)">
            <summary>
            下拉页面关闭事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.SyncTextByIndex">
            <summary>
            同步当前列表的索引处所指示的项目和控件输入栏的文本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.RestoreListboxItems">
            <summary>
            恢复列表控件的全部列表项
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ComboBox.SyncIndexByText(System.Boolean)">
            <summary>
            由输入栏的文本同步列表控件的索引
            </summary>
            <param name="suspendEvent">是否临时挂起控件的事件响应</param>
        </member>
        <member name="T:App.ControlLibrary.DataGridView">
            <summary>
            自定义增强表格控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnHandleCreated(System.EventArgs)">
            <summary>
            创建句柄事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Dispose(System.Boolean)">
            <summary>
            销毁控件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.EnterSendTab">
            <summary>
            设置或者返回回车如何自动发送Tab键。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.RedrawSuspending">
            <summary>
            临时挂起控件的界面重绘,并在销毁时自动恢复挂起的重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            控件重绘前景时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘背景事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.PaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            重绘背景事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.EventSuspending">
            <summary>
            临时挂起控件的事件响应，并在销毁时自动恢复挂起的事件响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Item(System.Windows.Forms.DataGridViewRow,System.Int32)">
            <summary>
            获取指定行对象、列索引的单元格对象。
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnIndex">列索引</param>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Item(System.Int32,System.Windows.Forms.DataGridViewRow)">
            <summary>
            获取指定行对象、列索引的单元格对象。
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnIndex">列索引</param>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Item(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            获取指定行对象、列名称的单元格对象。
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param> 
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Item(System.String,System.Windows.Forms.DataGridViewRow)">
            <summary>
            获取指定行对象、列名称的单元格对象。
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param> 
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Item(System.Int32)">
            <summary>
            获取当前行指定列索引的单元格对象。
            </summary> 
            <param name="columnIndex">列索引</param>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Item(System.String)">
            <summary>
            获取当前行指定列名称的单元格对象。
            </summary> 
            <param name="columnName">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行、列索引的单元格对象。
            </summary>
            <param name="rowIndex">行索引</param>
            <param name="columnIndex">列索引</param>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Item(System.Int32,System.String)">
            <summary>
            获取指定行索引列名称的单元格对象。
            </summary>
            <param name="rowIndex">行索引</param>
            <param name="columnName">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Item(System.String,System.Int32)">
            <summary>
            获取指定行索引列名称的单元格对象。
            </summary>
            <param name="rowIndex">行索引</param>
            <param name="columnName">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Text">
            <summary>
            返回或者设置单元格的文本值
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Texts">
            <summary>
            返回或者设置单元格的文本值(挂起 CellValueChanged 事件)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.CellStyles">
            <summary>
            获取单元格的样式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.CellForeColors">
            <summary>
            设置或者返回单元格的前景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.CellBackColors">
            <summary>
            设置或者返回单元格的背景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.CellBounds">
            <summary>
            单元格位置和大小
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.HorizontalScrollBar">
            <summary>
            水平滚动条
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.VerticalScrollBar">
            <summary>
            垂直滚动条
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ProgressBegin">
            <summary>
            开始进度条展示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ProgressFinally">
            <summary>
            结束进度条展示。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.AutoRowNo">
            <summary>
            设置或者返回自动行序号
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.CellFocusCuesColor">
            <summary>
            选定单元格聚焦框的颜色。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.SordMode">
            <summary>
            表格列的排序方式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.BackgroundImage">
            <summary>
            表格背景图(单元格背景色设置为透明可以完全展示背景图像)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.RowCount">
            <summary>
            获取或设置 DataGridView 中显示的行数(返回不包含新增行和页脚虚行的总行数)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.ReadOnly">
            <summary>
            获取或者设置表格控件的只读属性。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.SelectionColor">
            <summary>
            获取或设置选定单元格背景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.VerticalScrollingOffset">
            <summary>
            获取或返回控件垂直滚动的像素数。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.AutoClickCollapse">
            <summary>
            鼠标单击节点行时自动展开或折叠。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.RowIndex">
            <summary>
            当前选择的具有输入焦点的行索引。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.RowIndexs">
            <summary>
            设置表格的当前行索引(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.NewRowIndex">
            <summary>
            获取新增加行索引
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.RowGoto(System.Int32,System.Boolean)">
            <summary>
            设置当前行索引为指定的行索引位置。
            </summary>
            <param name="rowIndex">行索引位置</param>
            <param name="suspendEvent">是否挂起事件的响应</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.RowGoto(System.Windows.Forms.DataGridViewRow,System.Boolean)">
            <summary>
            设置当前行索引为指定行的索引位置。
            </summary>
            <param name="row">指定的行</param>
            <param name="suspendEvent">是否挂起事件的响应</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.RowGoto(System.Predicate{System.Windows.Forms.DataGridViewRow},System.Boolean)">
            <summary>
            设置当前行索引为指定筛选器的行索引位置。
            </summary>
            <param name="match">筛选器</param>
            <param name="suspendEvent">是否挂起事件的响应</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.RowGoto(System.String,System.Object,System.Boolean)">
            <summary>
            设置当前行索引为指定筛选器的行索引位置。
            </summary>
            <param name="columnName">筛选的列名称</param>
            <param name="findValue">筛选值</param>
            <param name="suspendEvent">是否挂起事件的响应</param>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.ColumnIndex">
            <summary>
            获取或设置当前单元格的列索引
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.CurrentColumn">
            <summary>
            获取或设置包含当前单元格的列
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.ColumnIndexs">
            <summary>
            获取列索引
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ColumnGoto(System.String,System.Boolean)">
            <summary>
            设置当前单元格的列索引为列名称所指向的列。
            </summary>
            <param name="suspendEvent">是否挂起事件的响应</param>
            <param name="columnName">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ColumnGoto(System.Int32,System.Boolean)">
            <summary>
            设置当前单元格的列索引为列索引位置的列。
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="suspendEvent">是否挂起事件的响应</param>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.TabToNextCell">
            <summary>
            Tab键跳转到下一个可以获取焦点的单元格。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.TabToPreviousCell">
            <summary>
            Shift+Tab键跳转到上一个可以获取焦点的单元格。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnTabToNextCell(App.ControlLibrary.TabToCellEventArgs)">
            <summary>
            激活Tab键跳转到下一个可以获取焦点的单元格。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnTabToPreviousCell(App.ControlLibrary.TabToCellEventArgs)">
            <summary>
            Shift+Tab键跳转到上一个可以获取焦点的单元格。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.CurrentRowChanged">
            <summary>
            表格当前输入行更改时发生的事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCurrentRowChanged(System.EventArgs)">
            <summary>
            激活表格当前输入行更改时发生的事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnSelectionChanged(System.EventArgs)">
            <summary>
            激活选择行改变事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.CurrentColumnChanged">
            <summary>
            表格当前选择的列更改事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCurrentColumnChanged(System.EventArgs)">
            <summary>
            激活表格当前选择的列更改事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCurrentCellChanged(System.EventArgs)">
            <summary>
            激活当前单元格改变事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.SelectionRowsChanged">
            <summary>
            表格选择行集合改变事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnSelectionRowsChanged(App.ControlLibrary.SelectionRowsChangedEventArgs)">
            <summary>
            激活表格选择行集合改变事件。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.RowsCountChanged">
            <summary>
            表格总行数改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowsCountChanged(App.ControlLibrary.RowsCountChangeEventArgs)">
            <summary>
            激活表格总行数改变事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.EditorEditing">
            <summary>
            编辑器控件被激活并且处于编辑状态。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnEditorEditing(App.ControlLibrary.EditorEditingEventArgs)">
            <summary>
            激活编辑器控件被激活并且处于编辑状态。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.EditorEdited">
            <summary>
            编辑器控件完成编辑并且终止编辑状态事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnEditorEdited(App.ControlLibrary.EditorEditingEventArgs)">
            <summary>
            激活编辑器控件完成编辑并且终止编辑状态事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCellValueChanged(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            单元格值改变事件
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.editingControlOwningCell">
            <summary>
            编辑器控件归属的单元格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnEditingControlShowing(System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)">
            <summary>
            编辑器显示事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.CellValidating">
            <summary>
            单元格数据验证事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCellValidating(App.ControlLibrary.CellValidatingEventArgs)">
            <summary>
            激活单元格数据验证事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)">
            <summary>
            系统单元格验证事件重写
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.CellMouseClick">
            <summary>
            单元格鼠标单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCellMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            激活单元格鼠标单击事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.MouseDownBefore">
            <summary>
            鼠标按下之前事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnMouseDownBefore(App.ControlLibrary.MouseBeforeEventArgs)">
            <summary>
            激活鼠标按下之前事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.MouseUpBefore">
            <summary>
            鼠标弹起之前事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnMouseUpBefore(App.ControlLibrary.MouseBeforeEventArgs)">
            <summary>
            激活鼠标弹起之前事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.DoubleClickBefore">
            <summary>
            鼠标双击之前事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnDoubleClickBefore(App.ControlLibrary.MouseBeforeEventArgs)">
            <summary>
            激活鼠标双击之前事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Windows消息处理
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.ColumnVisibleChanged">
            <summary>
            列可视属性改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnVisibleChanged(System.Windows.Forms.DataGridViewColumnEventArgs)">
            <summary>
            激活列可视属性改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnStateChanged(System.Windows.Forms.DataGridViewColumnStateChangedEventArgs)">
            <summary>
            列状态改变事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.RowMoving">
            <summary>
            行被移动开始事件。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.RowMoved">
            <summary>
            行被移动完毕事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowMoving(App.ControlLibrary.RowMovingEventArgs)">
            <summary>
            激活行被移动开始事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowMoved(App.ControlLibrary.RowMovedEventArgs)">
            <summary>
            激活行被移动完毕事件。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.NodesCountChanged">
            <summary>
            表格节点行集合中子节点数改变事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnNodesCountChanged(App.ControlLibrary.NodeRowsCountChangedEventArgs)">
            <summary>
            激活表格节点行集合中子节点数改变事件。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.FooterVisibleChanged">
            <summary>
            页脚可视状态改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnFooterVisibleChanged(System.EventArgs)">
            <summary>
            激活页脚可视状态改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Clear">
            <summary>
            清空表格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Clear(System.Windows.Forms.DataGridViewRow,System.Boolean)">
            <summary>
            清理表格中行的所有数据
            </summary>
            <param name="row">要清理数据的表格行</param>
            <param name="suspendEvent">是否挂起事件</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Focus">
            <summary>
            为控件设置输入焦点
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Focus(System.Int32,System.Int32)">
            <summary>
            为控件设置输入焦点
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Focus(System.Int32,System.String)">
            <summary>
            为控件设置输入焦点
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Focus(System.Windows.Forms.DataGridViewRow,System.Int32)">
            <summary>
            为控件设置输入焦点
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Focus(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            为控件设置输入焦点
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SelectAll(System.Boolean)">
            <summary>
            全部选择单元格或者单元格内文本
            </summary>
            <param name="selectCell">true表示全选表格内的所有单元格，false表示为全选择当前编辑的单元格内文本。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ColumnEquals(System.String[])">
            <summary>
            判断当前列是否等于指定列名称的列。
            </summary>
            <param name="columnName">具有扩展功能的列名称(包括:ColumnName,HeaderText,DataPropertyName三种形式)</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ComputeMaxDisplaySize(System.Int32,System.Int32)">
            <summary>
            计算表格小于指定尺寸的最大可以呈现的尺寸。
            </summary>
            <param name="maxWidth">参考的最大显示宽度(小于0表示忽略宽度的计算)。</param>
            <param name="maxHeight">参考的最大显示高度(小于0表示忽略高度的计算)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ComputeMaxDisplaySize(System.Drawing.Size)">
            <summary>
            计算表格小于指定尺寸的最大可以呈现的尺寸。
            </summary>
            <param name="maxSize">参考的最大显示尺寸。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ComputeMaxDisplaySize(System.Int32)">
            <summary>
            计算表格小于指定尺寸的最大可以呈现的尺寸。
            </summary>
            <param name="maxHeight">参考的最大显示高度。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SumValue(System.Int32,System.Windows.Forms.DataGridViewRow[])">
            <summary>
            合计指定单元格列和指定表格行数组的单元格数字累加值
            </summary>
            <param name="columnIndex">指定合计的列索引(错误的列索引返回0)</param>
            <param name="rows">需要在其中进行累加计算的表格行数组</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SumValue(System.String,System.Windows.Forms.DataGridViewRow[])">
            <summary>
            合计指定单元格列和指定表格行数组的单元格数字累加值
            </summary>
            <param name="columnName">指定合计的列名称,错误的列名称返回0.0(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
            <param name="rows">需要在其中进行累加计算的表格行数组</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SumValue(System.Int32,System.Windows.Forms.DataGridViewSelectedRowCollection)">
            <summary>
            合计指定单元格列和指定表格行集合的单元格数字累加值
            </summary>
            <param name="columnIndex">指定合计的列索引(错误的列索引返回0)</param>
            <param name="rows">需要在其中进行累加计算的表格行集合</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SumValue(System.String,System.Windows.Forms.DataGridViewSelectedRowCollection)">
            <summary>
            合计指定单元格列和指定表格行集合的单元格数字累加值
            </summary>
            <param name="columnName">指定合计的列名称,错误的列名称返回0.0(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
            <param name="rows">需要在其中进行累加计算的表格行集合</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SumValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            合计指定单元格列和指定起止行的单元格数字累加值
            </summary>
            <param name="columnIndex">指定合计的列索引(错误的列索引返回0)</param>
            <param name="beginRowIndex">开始的行索引(错误的行索引从0开始)</param>
            <param name="endRowIndex">结束的行索引(错误的行索引表示为最后一行的行索引)</param>
            <returns>返回合计值</returns>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SumValue(System.String,System.Int32,System.Int32)">
            <summary>
            合计指定单元格列和指定起止行的单元格数字累加值
            </summary>
            <param name="columnName">指定合计的列名称,错误的列名称返回0.0(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
            <param name="beginRowIndex">开始的行索引(错误的行索引从0开始)</param>
            <param name="endRowIndex">结束的行索引(错误的行索引表示为最后一行的行索引)</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SumValue(System.String)">
            <summary>
            合计指定单元格列所有行的单元格数字累加值
            </summary>
            <param name="columnName">指定进行合计累加的列名称，不存在的列名称返回0.0(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.SumValue(System.Int32)">
            <summary>
            合计指定单元列所有行的单元格数字累加值
            </summary>
            <param name="columnIndex">指定合计的列索引</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.PerformCurrentRowChanged">
            <summary>
            激活当前行改变事件 CurrentRowChanged。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.PerformRowsCountChanged(System.ComponentModel.CollectionChangeAction,System.Windows.Forms.DataGridViewRow)">
            <summary>
            激活表格总行数改变事件 RowsCountChanged。
            </summary>
            <param name="action">激活事件的原因。</param>
            <param name="row">激活事件的表格行。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.PerformCellValueChanged(System.Int32,System.Int32)">
            <summary>
            激活单元格值改变事件 CellValueChanged。
            </summary>
            <param name="columnIndex">激活的单元格列索引，缺省表示当前列。</param>
            <param name="rowIndex">激活的单元格行索引，缺省表示当前行。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.PerformCellValidating(App.ControlLibrary.CellValidatingEventArgs)">
            <summary>
            激活单元格数据验证事件 CellValidating。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.EditMode">
            <summary>
            设置或者获取单元格编辑时的模式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.ColumnHeadersHeightSizeMode">
            <summary>
            是否允许调整列标头高度的行为
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.RowHeadersWidthSizeMode">
            <summary>
            是否允许调整行标题的宽度，以及它是由用户调整还是根据标题的内容自动调整。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.AllowUserToAddRows">
            <summary>
            表格控件是否允许用户添加数据
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.AllowUserToDeleteRows">
            <summary>
            表格控件是否允许用户删除数据
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.AllowUserToOrderColumns">
            <summary>
            允许通过手动对列重新定位(拖拽)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.AllowUserToResizeRows">
            <summary>
            是否可以调整行的大小
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.RowHeadersVisible">
            <summary>
            表格控件是否显示行标
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.SelectionMode">
            <summary>
            选择表格中单元格的模式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.ShowCellToolTips">
            <summary>
            鼠标停留在单元格上时，是否显示工具提示。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.BackgroundColor">
            <summary>
            获取或设置表格的背景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.ShowEditingIcon">
            <summary>
            获取或设置一个值，该值指示编辑标志符号是否在所编辑的单元格的行标题中可见。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.GridColor">
            <summary>
            获取和设置网格线的颜色，网格线对表格控件的单元格进行分隔。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.ImeMode">
            <summary>
            获取或设置控件的输入法编辑器 (IME) 模式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.BorderStyle">
            <summary>
             获取或设置边框样式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.DataBindings">
            <summary>
            DataBindings
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.DataMember">
            <summary>
            DataMember
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.VirtualMode">
            <summary>
            VirtualMode
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.IsValidColumn(System.Int32)">
            <summary>
            判断列是否为合法的列
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.IsValidColumn(System.String)">
            <summary>
            判断列是否为合法的列
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.IsValidRow(System.Int32)">
            <summary>
            判断行是否为合法的行
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.IsValidCell(System.Int32,System.Int32)">
            <summary>
            判断单元格是否为合法单元格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.IsValidCell(System.Int32,System.String)">
            <summary>
            判断单元格是否为合法单元格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.IsValidCell(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            判断单元格是否为合法单元格
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView._cellValidatingConstructorInfo">
            <summary>
            单元格验证事件参数集构造函数信息
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRaiseKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            激活KeyDown事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            编辑器键盘按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            处理命令键。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ProcessPreValidating">
            <summary>
            预处理单元格校验事件，并且提交编辑器值的更好但不结束编辑。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ProcessPreviewKey(System.Windows.Forms.Keys)">
            <summary>
            处理默认预览键
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.DataSource">
            <summary>
            赋值到表格数据源(按列的DataPropertyName属性设置填充数据,仅用于赋值，不进行数据源的绑定关系)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.DataSources">
            <summary>
            赋值到表格数据源(按列的DataPropertyName属性设置填充数据,仅用于赋值，不进行数据源的绑定关系)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)">
            <summary>
            当列宽改变时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowHeadersWidthChanged(System.EventArgs)">
            <summary>
            当列头宽度 改变时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnDividerDoubleClick(System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs)">
            <summary>
            列头分割线双击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)">
            <summary>
            行高度改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnHeadersDefaultCellStyleChanged(System.EventArgs)">
            <summary>
            列头样式改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnDefaultCellStyleChanged(System.Windows.Forms.DataGridViewColumnEventArgs)">
            <summary>
            当列样式改变时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnDefaultCellStyleChanged(System.EventArgs)">
            <summary>
            当表格默认样式改变时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnAdded(System.Windows.Forms.DataGridViewColumnEventArgs)">
            <summary>
            当列增加时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnRemoved(System.Windows.Forms.DataGridViewColumnEventArgs)">
            <summary>
            当列移除时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnDisplayIndexChanged(System.Windows.Forms.DataGridViewColumnEventArgs)">
            <summary>
            当列显示顺序改变发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)">
            <summary>
            当列名改变发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCurrentCellDirtyStateChanged(System.EventArgs)">
            <summary>
            在单元格的状态相对于其内容的更改而更改时发生
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnSizeChanged(System.EventArgs)">
            <summary>
            当表格控件的大小改变时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnGridColorChanged(System.EventArgs)">
            <summary>
            当表格的网格线颜色改变时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Sort(System.Windows.Forms.DataGridViewColumn,System.ComponentModel.ListSortDirection)">
            <summary />
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnColumnHeaderMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary />
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnSortCompare(System.Windows.Forms.DataGridViewSortCompareEventArgs)">
            <summary>
            当表格排序比较时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnUserDeletedRow(System.Windows.Forms.DataGridViewRowEventArgs)">
            <summary>
            当用户删除表格行时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnUserDeletingRow(System.Windows.Forms.DataGridViewRowCancelEventArgs)">
            <summary>
            当用户准备删除表格行时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCellEnter(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            当单元格进入时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCellLeave(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            离开单元格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)">
            <summary>
            当行增加时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)">
            <summary>
            当行删除时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowStateChanged(System.Int32,System.Windows.Forms.DataGridViewRowStateChangedEventArgs)">
            <summary>
            行状态改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.RemoveInvalidNodeRow(System.Collections.Generic.List{App.ControlLibrary.NodeRow})">
            <summary>
            移除失效的节点行
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnUserAddedRow(System.Windows.Forms.DataGridViewRowEventArgs)">
            <summary>
            当用户增加行时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            当单元格重绘时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowPostPaint(System.Windows.Forms.DataGridViewRowPostPaintEventArgs)">
            <summary>
            行头重绘事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.ComputeRowNo(System.Int32)">
            <summary>
            计算行号，不包括隐藏行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            滚动条滚动事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnDataError(System.Boolean,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
            <summary>
            引发 DataError 事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)">
            <summary>
            引发 CellFormatting 事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnGotFocus(System.EventArgs)">
            <summary>
            获取焦点事件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.QuickSearch">
            <summary>
            键盘按键字符快速搜索(当用户在当前非编辑的单元格内，对一段时间间隔内快速按键进行自动定位到符合条件的首行)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.InQuickSearching">
            <summary>
            获取当前表格输入是否处于快速搜索模式状态中。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.QuickSearching">
            <summary>
            快速搜索事件
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.quickSearchKeys">
            <summary>
            快速搜索键
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.quickSearchTimer">
            <summary>
            快速搜索延迟计时器
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.quickInputedChars">
            <summary>
            快速搜索输入的字符串
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnQuickSearching(App.ControlLibrary.QuickSearchingEventArgs)">
            <summary>
            快速搜索可重新函数(返回搜索到的行索引，未搜索到时返回-1)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            键盘按下字符按键
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.HotTrace">
            <summary>
            当鼠标在表格内移动时是否显示动态跟随效果。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.HotTraceForeColor">
            <summary>
            当鼠标在表格内移动时显示动态跟随效果的前景色。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.HotTraceBackColor">
            <summary>
            当鼠标在表格内移动时显示动态跟随效果的背景色。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.AllowUserToOrderRows">
            <summary>
            是否允许通过手动对行重新定位(拖拽)。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.OriginalAllowDrop">
            <summary>
            原有允许拖拽状态
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.MouseDragRowIndex">
            <summary>
            拖动的源数据行索引
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.MouseOverRowIndex">
            <summary>
            拖动中的鼠标所在位置的当前行索引
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.MouseDownDragBox">
            <summary>
            不启用拖放的鼠标范围
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            单元格鼠标按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            激活鼠标移动事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标弹起事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            拖拽中事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            拖拽放下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnRowDragOver(System.Int32)">
            <summary>
            拖拽完毕
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.MergeColumns">
            <summary>
            列头合并
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.MergeRows(System.Int32[])">
            <summary>
            按列索引自动合并行数据。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.MergeRows(System.String[])">
            <summary>
            按列名称自动合并行数据。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnDrawMergeRowCells(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            重绘表格行合并事件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.MergeCells">
            <summary>
            单元格合并
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.EditingControl">
            <summary>
            获取当前表格处于编辑状态的编辑器(非编辑状态返回 null)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.IsEditableEditor">
            <summary>
            判断当前编辑器是否为自定义可嵌入编辑的编辑器(无编辑器时也返回False)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.CommitEdit">
            <summary>
            提交当前编辑器的数据到当前单元格中，但不结束编辑模式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Footer">
            <summary>
            表格页脚
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.ExpandableColumn">
            <summary>
            可折叠的列
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.IsExpandabled">
            <summary>
            是否启用了可折叠的列
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DataGridView.InExpandCollapseMouseCapture">
            <summary>
            在折叠列鼠标的捕获
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.VirtualRoot">
            <summary>
            获取树视折叠表格的虚根节点(视图中根节点的父节点，该节点不在表格中，并且不包括任何单元格)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.ShowLines">
            <summary>
            显示树视表格各个子节点的连接线。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.Nodes">
            <summary>
            树视表格的节点行集合。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.ImageList">
            <summary>
            图像列表控件对象
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataGridView.CurrentNodeRow">
            <summary>
            当前选定的节点行
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.Expanding">
            <summary>
            节点行展开开始事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.Expanded">
            <summary>
            节点行展开完毕事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.Collapsing">
            <summary>
            节点行折叠开始事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DataGridView.Collapsed">
            <summary>
            节点行折叠完毕事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnExpanding(App.ControlLibrary.ExpandingCancelEventArgs)">
            <summary>
            激活节点行展开开始事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnExpanded(App.ControlLibrary.ExpandingEventArgs)">
            <summary>
            激活节点行展开完毕事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCollapsing(App.ControlLibrary.ExpandingCancelEventArgs)">
            <summary>
            激活节点行折叠开始事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.OnCollapsed(App.ControlLibrary.ExpandingEventArgs)">
            <summary>
            激活节点行折叠完毕事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Collapse(App.ControlLibrary.NodeRow[])">
            <summary>
            折叠指明的树视行集合(空值集合折叠所有树视表格的子节点行)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Collapse(System.Boolean)">
            <summary>
            折叠树视行集合。
            </summary>
            <param name="includeJunior">是否包括所有晚辈行</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Expand(App.ControlLibrary.NodeRow[])">
            <summary>
            展开指明的树视行集合(空值集合展开所有树视表格的子节点行)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridView.Expand(System.Boolean)">
            <summary>
            展开树视行集合。
            </summary>
            <param name="includeJunior">是否包括所有晚辈行</param>
        </member>
        <member name="T:App.ControlLibrary.DatePicker">
            <summary>
            日期选择控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.#ctor">
            <summary>
            日期选择控件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.DatePicker.ValueChanged">
            <summary>
            选择的日期值改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.OnValueChanged(System.EventArgs)">
            <summary>
            激活选择的日期值改变事件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.DateType">
            <summary>
            控件所表示的日期或时间类型
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Value">
            <summary>
            文本输入区的日期
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Values">
            <summary>
            文本输入区的日期(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Text">
            <summary>
            文本输入区的日期
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Year">
            <summary>
            获取所表示日期的年份部分。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Month">
            <summary>
            获取说表示日期的月份部分。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Day">
            <summary>
            获取所表示的日期为该月中的第几天。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Hour">
            <summary>
            获取所表示的小时部分。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Minute">
            <summary>
            获取所表示的分钟部分。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Second">
            <summary>
            获取所表示的秒钟部分。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.EmptyValue">
            <summary>
            空日期值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.OnHandleCreated(System.EventArgs)">
            <summary>
            句柄创建
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            键盘事件        
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            键盘键入字符事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.OnSizeChanged(System.EventArgs)">
            <summary>
            尺寸改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.OnDropOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            弹出页即将弹出事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.OnEnter(System.EventArgs)">
            <summary>
            获取焦点事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.PerformValueChanged(System.EventArgs)">
            <summary>
            激活值改变事件 ValueChanged。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DatePicker.PartPosition">
            <summary>
            日期部分实体
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.PartPosition.Parts">
            <summary>
            日期部分类型
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.PartPosition.Position">
            <summary>
            字符串的开始位置
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.PartPosition.Length">
            <summary>
            字符串的长度
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.PartPosition.#ctor(App.ControlLibrary.DateParts,App.ControlLibrary.DatePickType)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.setPartText(App.ControlLibrary.DateParts,System.String,System.Boolean)">
            <summary>
            设置日期部分文本值
            </summary>
            <param name="part">日期部分类型</param>
            <param name="value">文本值</param>
            <param name="selected">是否使日期部分处于选择状态</param>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.getPartText(App.ControlLibrary.DateParts)">
            <summary>
            获取日期部分的文本
            </summary>
            <param name="part">日期部分</param>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.getPartValue(App.ControlLibrary.DateParts,System.Int32)">
            <summary>
            获取日期部分的值
            </summary>
            <param name="part">日期部分</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.SelectedPartText(App.ControlLibrary.DateParts)">
            <summary>
            选择部分文本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.getCurrentPart(System.Int32)">
            <summary>
            获取当前光标所处的日期部分
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.CorrectDateTime">
            <summary>
            修订日期和时间
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.ReplaceKeyChar(System.Int32,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            替换键盘KeyChar字符
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.GetFormattedValue(System.DateTime)">
            <summary>
            获取格式化的文本字符串
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DatePicker.getFormatString(App.ControlLibrary.DatePickType)">
            <summary>
            获取当前日期类型的格式化字符串
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Selector">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.FocusOnOpen">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.AutoClose">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.DatePicker.Resizable">
            <summary/>
        </member>
        <member name="T:App.ControlLibrary.Animations">
            <summary>
            弹出页的动画类型
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.None">
            <summary>
            不使用动画
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.LeftToRight">
            <summary>
            从左到右的动画效果。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.RightToLeft">
            <summary>
            从右到左的动画效果。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.TopToBottom">
            <summary>
            从上到下的动画效果。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.BottomToTop">
            <summary>
            从下到上的动画效果。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.Center">
            <summary>
            在中间位置展开或折叠的动画效果。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.Slide">
            <summary>
            滑动动画效果。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.Blend">
            <summary>
            淡入淡出动画效果。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.Roll">
            <summary>
            滚动动画效果。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Animations.SystemDefault">
            <summary>
            系统默认的动画效果。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DropClosedReason">
            <summary>
            组合选择器下拉列表关闭原因
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DropClosedReason.MouseClicked">
            <summary>
            鼠标单击关闭
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DropClosedReason.LostFocus">
            <summary>
            焦点丢失关闭
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DropClosedReason.CloseCalled">
            <summary>
            调用DropClose方法关闭
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DropClosedReason.ItemClicked">
            <summary>
            项目选择关闭
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DropClosedReason.Keyboard">
            <summary>
            按键关闭
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DatePickType">
            <summary>
            日期时间类型
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DatePickType.Date">
            <summary>
            仅日期
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DatePickType.DateHour">
            <summary>
            日期和小时
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DatePickType.DateHourMinute">
            <summary>
            日期和小时分钟
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DatePickType.DateTime">
            <summary>
            日期和时间
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DatePickType.Time">
            <summary>
            仅时间
            </summary>
        </member>
        <member name="F:App.ControlLibrary.DatePickType.HourMinute">
            <summary>
            仅小时和分钟
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DateParts">
            <summary>
            日期时间部分枚举类型
            </summary>
        </member>
        <member name="T:App.ControlLibrary.EnterSendTabType">
            <summary>
            当输入控件键入Enter回车时转换为发送Tab键的枚举类型
            </summary>
        </member>
        <member name="F:App.ControlLibrary.EnterSendTabType.No">
            <summary>
            不发送Tab键
            </summary>
        </member>
        <member name="F:App.ControlLibrary.EnterSendTabType.Yes">
            <summary>
            发送Tab键
            </summary>
        </member>
        <member name="F:App.ControlLibrary.EnterSendTabType.EmptySend">
            <summary>
            为空时按回车发送Tab键　
            </summary>
        </member>
        <member name="F:App.ControlLibrary.EnterSendTabType.EmptyNotSend">
            <summary>
            为空时按回车不发送Tab键
            </summary>
        </member>
        <member name="T:App.ControlLibrary.MapType">
            <summary>
            复制表格数据时的要复制为的列名类型
            </summary>
        </member>
        <member name="F:App.ControlLibrary.MapType.DataPropertyName">
            <summary>
            数据属性字段名称
            </summary>
        </member>
        <member name="F:App.ControlLibrary.MapType.HeaderText">
            <summary>
            表格标题文本
            </summary>
        </member>
        <member name="F:App.ControlLibrary.MapType.ColumnName">
            <summary>
            列名称
            </summary>
        </member>
        <member name="F:App.ControlLibrary.MapType.Sequence">
            <summary>
            顺序号
            </summary>
        </member>
        <member name="T:App.ControlLibrary.PropertyType">
            <summary>
            界面控件的属性类型
            </summary> 
        </member>
        <member name="F:App.ControlLibrary.PropertyType.Enabled">
            <summary>
            可用属性
            </summary> 
        </member>
        <member name="F:App.ControlLibrary.PropertyType.ReadOnly">
            <summary>
            只读属性
            </summary> 
        </member>
        <member name="F:App.ControlLibrary.PropertyType.Visible">
            <summary>
            可视属性
            </summary> 
        </member>
        <member name="F:App.ControlLibrary.PropertyType.Text">
            <summary>
            文本属性
            </summary> 
        </member>
        <member name="F:App.ControlLibrary.PropertyType.Index">
            <summary>
            索引属性
            </summary> 
        </member>
        <member name="F:App.ControlLibrary.PropertyType.Value">
            <summary>
            值属性
            </summary> 
        </member>
        <member name="F:App.ControlLibrary.PropertyType.Checked">
            <summary>
            复选属性
            </summary> 
        </member>
        <member name="T:App.ControlLibrary.BorderType">
            <summary>
            控件边框类型
            </summary>
        </member>
        <member name="F:App.ControlLibrary.BorderType.None">
            <summary>
            无边框
            </summary>
        </member>
        <member name="F:App.ControlLibrary.BorderType.Left">
            <summary>
            左侧边框
            </summary>
        </member>
        <member name="F:App.ControlLibrary.BorderType.Top">
            <summary>
            顶部边框
            </summary>
        </member>
        <member name="F:App.ControlLibrary.BorderType.Right">
            <summary>
            右侧边框
            </summary>
        </member>
        <member name="F:App.ControlLibrary.BorderType.Bottom">
            <summary>
            底部边框
            </summary>
        </member>
        <member name="F:App.ControlLibrary.BorderType.All">
            <summary>
            全部边框(上、下、左、右)。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.CellValidatingEventArgs">
            <summary>
            单元格验证事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.CellValidatingEventArgs.Cancel">
            <summary>
            获取或设置指示是否应取消事件的值。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.CellValidatingEventArgs.OriginalValue">
            <summary>
            单元格原有值。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.CellValidatingEventArgs.Value">
            <summary>
            获取或者设置单元格当前值。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CellValidatingEventArgs.#ctor(System.Int32,System.Int32,System.Object,System.Object)">
            <summary>
            实例化
            </summary>
            <param name="rowIndex">单元格的行索引。</param>
            <param name="columnIndex">单元格的列索引。</param>
            <param name="originalValue">单元格的原有值。</param>
            <param name="value">单元格的现有值。</param>
        </member>
        <member name="T:App.ControlLibrary.ColumnClickEventArgs">
            <summary>
            列表视图控件列头单击事件参数集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ColumnClickEventArgs.#ctor(System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            初始化
            </summary>
            <param name="column">单击的列索引</param>
            <param name="sortOrder">列的排序模式</param>
        </member>
        <member name="P:App.ControlLibrary.ColumnClickEventArgs.SortOrder">
            <summary>
            列的排序模式
            </summary>
        </member>
        <member name="T:App.ControlLibrary.CountChangedEventArgs">
            <summary>
            集合总数量改变事件参数集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.CountChangedEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Int32,System.Object)">
            <summary>
            初始化
            </summary>
            <param name="action">引发集合改变的原因</param>
            <param name="element">引发集合改变的元素实例</param>
            <param name="count">集合的元素总数量</param>
        </member>
        <member name="P:App.ControlLibrary.CountChangedEventArgs.Count">
            <summary>
            集合总数量
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DropClosedEventArgs">
            <summary>
            组合框下拉列表关闭事件参数集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DropClosedEventArgs.#ctor(App.ControlLibrary.DropClosedReason)">
            <summary>
            初始化参数集
            </summary>
            <param name="reason">下拉列表关闭原因</param>
        </member>
        <member name="P:App.ControlLibrary.DropClosedEventArgs.ClosedReason">
            <summary>
            下拉列表关闭原因
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DropClosingEventArgs">
            <summary>
            组合框下拉列表即将关闭事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DropClosingEventArgs.Cancel">
            <summary>
            获取或设置指示是否应取消事件的值。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DropClosingEventArgs.#ctor(App.ControlLibrary.DropClosedReason,System.Boolean)">
            <summary>
            初始化参数集
            </summary>
            <param name="reason">下拉列表关闭原因</param>
            <param name="cancel">取消状态</param>
        </member>
        <member name="T:App.ControlLibrary.EditorEditingEventArgs">
            <summary>
            可嵌入编辑器的事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditorEditingEventArgs.Cell">
            <summary>
            激活编辑器的单元格
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditorEditingEventArgs.Editor">
            <summary>
            激活的编辑器控件对象
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditorEditingEventArgs.RowIndex">
            <summary>
            激活编辑器的单元格行索引
            </summary>
        </member>
        <member name="P:App.ControlLibrary.EditorEditingEventArgs.ColumnIndex">
            <summary>
            激活编辑器的单元格列索引
            </summary>
        </member>
        <member name="T:App.ControlLibrary.QuickSearchingEventHander">
            <summary>
            快速搜索事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ExpandingEventHandler">
            <summary>
            节点行展开开始事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ExpandedEventHandler">
            <summary>
            节点行展开完毕事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.CollapsingEventHandler">
            <summary>
            节点行折叠开始事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.CollapsedEventHandler">
            <summary>
            节点行折叠完毕事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.TabToNextCellEventHandler">
            <summary>
            Tab键跳转到下一个可以获取焦点的单元格。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.TabToPreviousCellEventHandler">
            <summary>
            Shift+Tab键跳转到上一个可以获取焦点的单元格。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.CurrentRowChangedEventHandler">
            <summary>
            表格当前输入行更改时发生的事件。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.CurrentColumnChangedEventHandler">
            <summary>
            表格当前选择的列更改事件。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.RowsCountChangedEventHandler">
            <summary>
            表格总行数改变事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.SelectionRowsChangedEventHandler">
            <summary>
            表格选择行集合改变事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NodeRowsCountChangedEventHandler">
            <summary>
            表格节点行集合中子节点数改变事件。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.EditorEditingEventHandler">
            <summary>
            编辑器控件被激活并且处于编辑状态。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.EditorEditedEventHandler">
            <summary>
            编辑器控件完成编辑并且终止编辑状态事件。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.CellValidatingEventHandler">
            <summary>
            单元格数据验证事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.MouseDownBeforeEventHandler">
            <summary>
            鼠标按下之前事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.MouseUpBeforeEventHandler">
            <summary>
            鼠标弹起之前事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DoubleClickBeforeEventHandler">
            <summary>
            鼠标双击之前事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ColumnVisibleChangedEventHandler">
            <summary>
            列可视属性改变事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.RowMovingEventHandler">
            <summary>
            行被移动开始事件。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.RowMovedEventHandler">
            <summary>
            行被移动完毕事件。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.PanelCollapsedEventHandler">
            <summary>
            面板折叠事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DropClosingEventHandler">
            <summary>
            下拉列表即将关闭事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DropClosedEventHandler">
            <summary>
            下拉列表关闭事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ColumnClickEventHandler">
            <summary>
            列头单击事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ItemClickEventHandler">
            <summary>
            列表项目单击事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ItemDoubleClickEventHandler">
            <summary>
            列表项目双击事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.CountChangedEventHandler">
            <summary>
            列表项目总行数改变事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.PreviewCheckedChangedEventHandler">
            <summary>
            当前选定状态改变之前发生的事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.SelectedEventHandler">
            <summary>
            选择节点时激活的事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DragEventHandler">
            <summary>
            拖拽事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NodesCountChangedEventHandler">
            <summary>
            节点总数改变事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.QuickPreviewEventHandler">
            <summary>
            快速预览事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ExpandingEventArgs">
            <summary>
            树视可扩展的表格行参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ExpandingEventArgs.Node">
            <summary>
            集合事件的树视表格节点对象。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ExpandingEventArgs.#ctor(App.ControlLibrary.NodeRow)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ExpandingCancelEventArgs">
            <summary>
            树视控件可取消扩展单元格的参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ExpandingCancelEventArgs.Cancel">
            <summary>
            获取或设置指示是否应取消事件的值。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ListViewItemEventArgs">
            <summary>
            列表控件项目事件参数集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewItemEventArgs.#ctor(System.Windows.Forms.ListViewItem)">
            <summary>
            实例化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListViewItemEventArgs.Item">
            <summary>
            列表项
            </summary>
        </member>
        <member name="T:App.ControlLibrary.MouseBeforeEventArgs">
            <summary>
            鼠标事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MouseBeforeEventArgs.Buttons">
            <summary>
            鼠标键
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MouseBeforeEventArgs.ColumnIndex">
            <summary>
            鼠标单击的单元格列索引
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MouseBeforeEventArgs.RowIndex">
            <summary>
            鼠标单击的单元格行索引
            </summary>
        </member>
        <member name="T:App.ControlLibrary.MsgboxEventArgs">
            <summary>
            Msgbox对话框事件参数
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MsgboxEventArgs.Owner">
            <summary>
            将拥有模式对话框的窗口实例。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MsgboxEventArgs.Title">
            <summary>
            要在消息框的标题栏中显示的文本。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MsgboxEventArgs.Message">
            <summary>
            要在消息框中显示的文本。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MsgboxEventArgs.Icons">
            <summary>
            在消息框中显示的图标。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MsgboxEventArgs.Buttons">
            <summary>
            在消息框中显示的按钮。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MsgboxEventArgs.DefaultButton">
            <summary>
            消息框中的默认按钮。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MsgboxEventArgs.Tag">
            <summary>
            消息对话框事件由用户附加的数据。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NodeRowsCountChangedEventArgs">
            <summary>
            表格节点行集合中子节点数改变事件参数集。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodeRowsCountChangedEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,App.ControlLibrary.NodeRow)">
            <summary>
            表格节点行集合中子节点数改变事件参数集。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRowsCountChangedEventArgs.NodeRow">
            <summary>
            获取引发集合改变的节点行(刷新数据时为 null)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodeRowsCountChangedEventArgs.Count">
            <summary>
            获取子节点行集合中子节点行的总数。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NodesCountChangeEventArgs">
            <summary>
            树视控件节点结婚改变事件参数集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NodesCountChangeEventArgs.#ctor(App.ControlLibrary.TreeView,System.ComponentModel.CollectionChangeAction,System.Windows.Forms.TreeNode)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodesCountChangeEventArgs.TreeNode">
            <summary>
            获取引发集合改变的节点实例(刷新数据时为 null)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.NodesCountChangeEventArgs.Count">
            <summary>
            获取集合的节点总数。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.PanelCollapsedEventArgs">
            <summary>
            面板折叠事件参数集。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PanelCollapsedEventArgs.#ctor(System.Windows.Forms.Panel,System.Boolean)">
            <summary>
            初始化参数集
            </summary>
            <param name="panel">激活折叠事件的面板</param>
            <param name="isCollapsed">面板是否为折叠状态</param>
        </member>
        <member name="P:App.ControlLibrary.PanelCollapsedEventArgs.IsCollapsed">
            <summary>
            面板的折叠状态
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PanelCollapsedEventArgs.Panel">
            <summary>
            激活折叠事件的面板
            </summary>
        </member>
        <member name="T:App.ControlLibrary.QuickPreviewEventArgs">
            <summary>
            快速预览事件参数集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.QuickPreviewEventArgs.#ctor(System.Char)">
            <summary>
            初始化快速预览事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.QuickPreviewEventArgs.Cancel">
            <summary>
            取消快速预览
            </summary>
        </member>
        <member name="T:App.ControlLibrary.QuickSearchingEventArgs">
            <summary>
            快速搜索事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.QuickSearchingEventArgs.InputedChars">
            <summary>
            已经输入的字符列表
            </summary>
        </member>
        <member name="P:App.ControlLibrary.QuickSearchingEventArgs.ColumnIndex">
            <summary>
            进行快速搜索的列索引
            </summary>
        </member>
        <member name="P:App.ControlLibrary.QuickSearchingEventArgs.Applied">
            <summary>
            是否已经应用，告知不再继续后续处理。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.SelectionRowsChangedEventArgs">
            <summary>
            表格选择行集合改变事件参数集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SelectionRowsChangedEventArgs.#ctor(App.ControlLibrary.DataGridView)">
            <summary>
            表格选择行集合改变事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SelectionRowsChangedEventArgs.Count">
            <summary>
            选择的表格行数目。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SelectionRowsChangedEventArgs.Rows">
            <summary>
            选择的表格行集合数组。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.TreeViewDragEventArgs">
            <summary>
            树视控件拖拽事件参数集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewDragEventArgs.#ctor(System.Windows.Forms.DragEventArgs,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            初始化树视控件节点拖拽事件参数集
            </summary>
            <param name="e">拖拽的事件参数</param>
            <param name="target">拖拽的目标节点</param>
            <param name="originalParent">拖拽节点的原始父节点</param>
        </member>
        <member name="P:App.ControlLibrary.TreeViewDragEventArgs.Cancel">
            <summary>
            取消拖拽操作
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeViewDragEventArgs.DragNode">
            <summary>
            获取拖拽的树节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeViewDragEventArgs.TargetNode">
            <summary>
            获取拖拽放下的目标节点。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeViewDragEventArgs.OriginalParent">
            <summary>
            获取拖拽树节点的原始父节点(null表示拖拽的为根节点)。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ControlExtension">
            <summary>
            控件扩展函数
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.CanInvoke(System.ComponentModel.Component)">
            <summary>
            判断指明的控件是否可以进行委托操作。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.InvokeRequired(System.Windows.Forms.IWin32Window)">
            <summary>
            获取一个值，该值指示调用方在对控件进行方法调用时是否必须调用 Invoke 方法，因为调用方位于创建控件所在的线程以外的线程中。
            </summary>
            <returns>如果控件的 System.Windows.Forms.Control.Handle 是在与调用线程不同的线程上创建的（说明您必须通过 Invoke 方法对控件进行调用），则为 true；否则为 false。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Invoke``1(System.Windows.Forms.Control,System.Func{``0})">
            <summary>
            在拥有此控件的基础窗口句柄的线程上执行指定的委托(已处理句柄创建、线程间委托等问题)。
            </summary>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托器。</param>
            <returns>正在被调用的委托的返回值，或者如果委托没有返回值、控件没有实例化、没有创建句柄或者已经销毁则返回 null。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Invoke(System.Windows.Forms.Control,System.Action)">
            <summary>
            在拥有此控件的基础窗口句柄的线程上执行指定的委托(已处理句柄创建、线程间委托等问题)。
            </summary>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托器。</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke(System.Windows.Forms.Control,System.Delegate,System.Object[])">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <param name="params">作为给定方法的参数传递的对象数组。如果不需要参数，则可以为 null。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke(System.Windows.Forms.Control,System.Action)">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke``1(System.Windows.Forms.Control,System.Action{``0},``0)">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <typeparam name="T">传入参数的泛型类型</typeparam>
            <param name="value">传入的参数值</param>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke``2(System.Windows.Forms.Control,System.Action{``0,``1},``0,``1)">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <typeparam name="T1">传入参数泛型类型1</typeparam>
            <typeparam name="T2">传入参数泛型类型2</typeparam>
            <param name="value1">传入的参数值1</param>
            <param name="value2">传入的参数值2</param>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke``3(System.Windows.Forms.Control,System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <typeparam name="T1">传入参数泛型类型1</typeparam>
            <typeparam name="T2">传入参数泛型类型2</typeparam>
            <typeparam name="T3">传入参数泛型类型3</typeparam>
            <param name="value1">传入的参数值1</param>
            <param name="value2">传入的参数值2</param>
            <param name="value3">传入的参数值3</param>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke``4(System.Windows.Forms.Control,System.Action{``0,``1,``2},``0,``1,``2,``3)">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <typeparam name="T1">传入参数泛型类型1</typeparam>
            <typeparam name="T2">传入参数泛型类型2</typeparam>
            <typeparam name="T3">传入参数泛型类型3</typeparam>
            <typeparam name="T4">传入参数泛型类型4</typeparam>
            <param name="value1">传入的参数值1</param>
            <param name="value2">传入的参数值2</param>
            <param name="value3">传入的参数值3</param>
            <param name="value4">传入的参数值4</param>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke``5(System.Windows.Forms.Control,System.Action{``0,``1,``2},``0,``1,``2,``3,``4)">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <typeparam name="T1">传入参数泛型类型1</typeparam>
            <typeparam name="T2">传入参数泛型类型2</typeparam>
            <typeparam name="T3">传入参数泛型类型3</typeparam>
            <typeparam name="T4">传入参数泛型类型4</typeparam>
            <typeparam name="T5">传入参数泛型类型5</typeparam>
            <param name="value1">传入的参数值1</param>
            <param name="value2">传入的参数值2</param>
            <param name="value3">传入的参数值3</param>
            <param name="value4">传入的参数值4</param>
            <param name="value5">传入的参数值5</param>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke``6(System.Windows.Forms.Control,System.Action{``0,``1,``2},``0,``1,``2,``3,``4,``5)">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <typeparam name="T1">传入参数泛型类型1</typeparam>
            <typeparam name="T2">传入参数泛型类型2</typeparam>
            <typeparam name="T3">传入参数泛型类型3</typeparam>
            <typeparam name="T4">传入参数泛型类型4</typeparam>
            <typeparam name="T5">传入参数泛型类型5</typeparam>
            <typeparam name="T6">传入参数泛型类型6</typeparam>
            <param name="value1">传入的参数值1</param>
            <param name="value2">传入的参数值2</param>
            <param name="value3">传入的参数值3</param>
            <param name="value4">传入的参数值4</param>
            <param name="value5">传入的参数值5</param>
            <param name="value6">传入的参数值6</param>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke``7(System.Windows.Forms.Control,System.Action{``0,``1,``2},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <typeparam name="T1">传入参数泛型类型1</typeparam>
            <typeparam name="T2">传入参数泛型类型2</typeparam>
            <typeparam name="T3">传入参数泛型类型3</typeparam>
            <typeparam name="T4">传入参数泛型类型4</typeparam>
            <typeparam name="T5">传入参数泛型类型5</typeparam>
            <typeparam name="T6">传入参数泛型类型6</typeparam>
            <typeparam name="T7">传入参数泛型类型7</typeparam>
            <param name="value1">传入的参数值1</param>
            <param name="value2">传入的参数值2</param>
            <param name="value3">传入的参数值3</param>
            <param name="value4">传入的参数值4</param>
            <param name="value5">传入的参数值5</param>
            <param name="value6">传入的参数值6</param>
            <param name="value7">传入的参数值7</param>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginInvoke``8(System.Windows.Forms.Control,System.Action{``0,``1,``2},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            在创建控件的基础句柄所在线程上，用指定的参数异步执行指定委托(已处理控件句柄创建等问题)。
            </summary>
            <typeparam name="T1">传入参数泛型类型1</typeparam>
            <typeparam name="T2">传入参数泛型类型2</typeparam>
            <typeparam name="T3">传入参数泛型类型3</typeparam>
            <typeparam name="T4">传入参数泛型类型4</typeparam>
            <typeparam name="T5">传入参数泛型类型5</typeparam>
            <typeparam name="T6">传入参数泛型类型6</typeparam>
            <typeparam name="T7">传入参数泛型类型7</typeparam>
            <typeparam name="T8">传入参数泛型类型8</typeparam>
            <param name="value1">传入的参数值1</param>
            <param name="value2">传入的参数值2</param>
            <param name="value3">传入的参数值3</param>
            <param name="value4">传入的参数值4</param>
            <param name="value5">传入的参数值5</param>
            <param name="value6">传入的参数值6</param>
            <param name="value7">传入的参数值7</param>
            <param name="value8">传入的参数值8</param>
            <param name="control">进行委托方法处理的目标控件</param>
            <param name="handler">一个方法委托，它采用的参数的数量和类型与 args 参数中所包含的相同。</param>
            <returns>一个表示 Control.BeginInvoke(System.Delegate) 操作的结果的 System.IAsyncResult，如果控件没有实例化、没有创建句柄或者已经销毁则返回 Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Focusing(System.Windows.Forms.Control)">
            <summary>
            设置控件获取到聚焦(线程间安全)。
            </summary>
            <param name="control">需要设置焦点的控件对象</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Focusing(System.Windows.Forms.Control,System.Int32)">
            <summary>
            设置控件获取到聚焦(线程间调用是安全的)。
            </summary>
            <param name="control">需要设置焦点的控件对象</param>
            <param name="delay">延迟后再次设置焦点的延迟时间(单位：毫秒。)</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Focusing(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            设置控件获取到聚焦(线程间安全)。
            </summary>
            <param name="control">需要设置焦点的控件对象</param>
            <param name="selectAll">如果是文本输入类控件，控件获取焦点时文本内容是否全部选定状态。</param> 
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Focusing(System.Windows.Forms.Control,System.Int32,System.Boolean)">
            <summary>
            设置控件获取到聚焦(线程间调用是安全的)。
            </summary>
            <param name="control">需要设置焦点的控件对象</param>
            <param name="delay">延迟后再次设置焦点的延迟时间(单位：毫秒。)</param>
            <param name="selectAll">如果是文本输入类控件，控件获取焦点时文本内容是否全部选定状态。</param>
            <remarks>
            使被设置的控件得到焦点，并且如果是文本输入类型的控件，使其文本全选择状态
            可以延时是控件得到焦点，
            如果设置控件的焦点后, 又有其他的代码迫使该控件的焦点丢失, 
            可以设置DelaySecond延时秒数来达到延时设置焦点
            </remarks>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Focusing(System.Windows.Forms.Control,System.Boolean,System.Int32)">
            <summary>
            设置控件获取到聚焦(线程间调用是安全的)。
            </summary>
            <param name="control">需要设置焦点的控件对象</param>
            <param name="delay">延迟后再次设置焦点的延迟时间(单位：毫秒。)</param>
            <param name="selectAll">如果是文本输入类控件，控件获取焦点时文本内容是否全部选定状态。</param>
            <remarks>
            使被设置的控件得到焦点，并且如果是文本输入类型的控件，使其文本全选择状态
            可以延时是控件得到焦点，
            如果设置控件的焦点后, 又有其他的代码迫使该控件的焦点丢失, 
            可以设置DelaySecond延时秒数来达到延时设置焦点
            </remarks>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.CreateHandle(System.ComponentModel.Component)">
            <summary>
            强制性创建控件句柄(不同于控件的CreateControl方法)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Controls``1(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            获取指定控件类型的所有子控件列表
            </summary>
            <typeparam name="T">搜索的泛型控件类型</typeparam>
            <param name="control">当前控件实例</param>
            <param name="searchAllChildren">是否递归搜索包括所有子代控件</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Controls(System.Windows.Forms.Control,System.Type[])">
            <summary>
            获取指定控件类型的所有子控件列表
            </summary>
            <param name="control">当前控件实例</param>
            <param name="findTypes">搜索的控件类型列表</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Controls(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            获取指定控件类型的所有子控件列表
            </summary>
            <param name="control">当前控件实例</param>
            <param name="searchAllChildren">是否递归搜索包括所有子代控件</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Controls(System.Windows.Forms.Control,System.Type[],System.Boolean)">
            <summary>
            获取指定控件类型的所有子控件列表
            </summary>
            <param name="control">当前控件实例</param>
            <param name="findTypes">搜索的控件类型列表</param>
            <param name="searchAllChildren">是否递归搜索包括所有子代控件</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.FindAll(System.Windows.Forms.Control.ControlCollection,System.Predicate{System.Windows.Forms.Control})">
            <summary>
            从控件集合中查找符合条件的控件组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.FindAll(System.Windows.Forms.Control,System.Predicate{System.Windows.Forms.Control})">
            <summary>
            从控件的子控件集合中查找符合条件的子控件组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Find(System.Windows.Forms.Control.ControlCollection,System.Predicate{System.Windows.Forms.Control})">
            <summary>
            从控件集合中查找符合条件的第一个控件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Find(System.Windows.Forms.Control,System.Predicate{System.Windows.Forms.Control})">
            <summary>
            从控件的子控件集合中查找符合条件的第一个子控件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.ForEach(System.Windows.Forms.Control.ControlCollection,System.Action{System.Windows.Forms.Control})">
            <summary>
            在控件集合中循环遍历。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.ForEach(System.Windows.Forms.Control,System.Action{System.Windows.Forms.Control})">
            <summary>
            在子控件集合中循环遍历。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.BeginUpdate(System.Windows.Forms.Control)">
            <summary>
            禁用控件的任何重绘
            </summary>
            <param name="control">禁用重绘的控件</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.EndUpdate(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            启用控件的重绘
            </summary>
            <param name="control">启用重绘的控件</param>
            <param name="invalidate">启用重绘成功后是否交付系统重绘控件。</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.HalfImeMode(System.Windows.Forms.Control)">
            <summary>
            检查输入法,并且将全角状态转化为半角状态
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.Animate(System.Windows.Forms.Control,App.ControlLibrary.Animations,System.Boolean,System.Int32)">
            <summary>
            窗口的动画进入和退出
            </summary>
            <param name="control">动画的窗口</param>
            <param name="animate">动画效果</param>
            <param name="duration">动画持续时间长度(毫秒)</param>
            <param name="visible">true表示显示时的进入动画，false表示关闭时的退出动画</param>
        </member>
        <member name="M:App.ControlLibrary.ControlExtension.RunMode(System.Windows.Forms.Control)">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.DataGridViewExtension">
            <summary>
            表格控件扩展函数
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Column(System.Windows.Forms.DataGridViewColumnCollection,System.String)">
            <summary>
            在列集合中搜索指定名称的列对象(包括列名称、数据属性名称、列标题三种形式均通用)。
            </summary>
            <param name="columns">用于搜索的列集合</param>
            <param name="name">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Column(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            在表格中搜索指定名称的列对象(包括列名称、数据属性名称、列标题三种形式均通用)。
            </summary>
            <param name="dgv">用于搜索的表格</param>
            <param name="name">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.GetColumnIndex(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            在表格中搜索指定名称的列索引(包括列名称、数据属性名称、列标题三种形式均通用)。
            </summary>
            <param name="dgv">用于搜索的表格</param>
            <param name="name">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ColumnIndex(System.Windows.Forms.DataGridView,System.String)">
            <summary>
            在表格中搜索指定名称的列索引(包括列名称、数据属性名称、列标题三种形式均通用)。
            </summary>
            <param name="dgv">用于搜索的表格</param>
            <param name="name">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ColumnIndex(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            在表格行归属的表格中搜索指定名称的列索引(包括列名称、数据属性名称、列标题三种形式均通用)。
            </summary>
            <param name="row">用于搜索的表格行</param>
            <param name="name">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ColumnIndex(System.Windows.Forms.DataGridViewColumnCollection,System.String)">
            <summary>
            在列集合中搜索指定名称的列索引(包括列名称、数据属性名称、列标题三种形式均通用)。
            </summary>
            <param name="columns">用于搜索的列集合</param>
            <param name="name">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Cell(System.Windows.Forms.DataGridViewRow,System.Int32)">
            <summary>
            获取表格行中指定列索引的单元格对象。
            </summary>
            <param name="row">获取单元格的行对象</param>
            <param name="columnIndex">指定的列索引</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Cell(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            获取表格行中指定列名称的单元格对象。
            </summary>
            <param name="row">获取单元格的行对象</param>
            <param name="columnName">指定的列名称(支持扩展了的列名称)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Bounds(System.Windows.Forms.DataGridViewCell)">
            <summary>
            单元格显示区域的位置和大小。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Value(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            在表格行中获取指定列名称的单元格值(如果列名称不存在返回空字符串)。
            </summary>
            <param name="row">获取单元格值的行对象</param>
            <param name="columnName">指定的列名称(支持扩展了的列名称)</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Text(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            在表格行中获取指定列名称的单元格文本值(如果列名称不存在返回空字符串)。
            </summary>
            <param name="row">获取单元格文本的行对象</param>
            <param name="columnName">指定的列名称(支持扩展了的列名称)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Text(System.Windows.Forms.DataGridViewCell)">
            <summary>
            获取单元格的文本值(如果单元格为空返回空字符串)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Values(System.Windows.Forms.DataGridViewRow)">
            <summary>
            获取表格行中包含的所有单元格值。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ForeColor(System.Windows.Forms.DataGridViewRow,System.Drawing.Color)">
            <summary>
            设置表格行的前景色
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ForeColor(System.Windows.Forms.DataGridViewCell,System.Drawing.Color)">
            <summary>
            设置单元格的前景色
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.BackColor(System.Windows.Forms.DataGridViewCell,System.Drawing.Color)">
            <summary>
            设置单元格的背景色
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.BackColor(System.Windows.Forms.DataGridViewRow,System.Drawing.Color)">
            <summary>
            设置表格行的背景色
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Font(System.Windows.Forms.DataGridViewCell,System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            设置单元格的字体。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Font(System.Windows.Forms.DataGridViewCell,System.Drawing.Font,System.Drawing.FontStyle,System.Boolean)">
            <summary>
            设置单元格的字体。
            </summary>
            <param name="cell">设置字体样式的单元格</param>
            <param name="fontStyle">设置的字体样式</param>
            <param name="font">在单元格上设置的新字体</param>
            <param name="attach">true表示在字体样式上叠加样式,false表示分离字体样式。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Font(System.Windows.Forms.DataGridViewCell,System.Drawing.FontStyle,System.Boolean)">
            <summary>
            设置单元格的字体。
            </summary>
            <param name="cell">设置字体样式的单元格</param>
            <param name="fontStyle">设置的字体样式</param>
            <param name="attach">true表示在字体样式上叠加样式,false表示分离字体样式。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Font(System.Windows.Forms.DataGridViewRow,System.Drawing.FontStyle,System.Boolean)">
            <summary>
            设置表格行的字体。
            </summary>
            <param name="row">设置字体样式的行</param>
            <param name="fontStyle">设置的字体样式</param>
            <param name="attach">true表示在字体样式上叠加样式,false表示分离字体样式。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Font(System.Windows.Forms.DataGridViewRow,System.Drawing.Font,System.Drawing.FontStyle,System.Boolean)">
            <summary>
            设置表格行的字体。
            </summary>
            <param name="row">设置字体样式的行</param>
            <param name="fontStyle">设置的字体样式</param>
            <param name="font">设置的新字体</param>
            <param name="attach">true表示在字体样式上叠加样式,false表示分离字体样式。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Font(System.Windows.Forms.DataGridViewRow,System.String,System.Drawing.FontStyle)">
            <summary>
            设置表格行的字体。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Font(System.Windows.Forms.DataGridViewRow,System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            设置表格行的字体
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Font(System.Windows.Forms.DataGridViewColumn,System.Drawing.FontStyle,System.Boolean)">
            <summary>
            设置表格列的字体。
            </summary>
            <param name="column">设置字体样式的列</param>
            <param name="fontStyle">设置的字体样式</param>
            <param name="attach">true表示在字体样式上叠加样式,false表示分离字体样式。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray(System.Windows.Forms.DataGridViewCellCollection,System.Predicate{System.Windows.Forms.DataGridViewCell})">
            <summary>
            单元格集合转换为单元格数组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray(System.Windows.Forms.DataGridViewSelectedCellCollection,System.Predicate{System.Windows.Forms.DataGridViewCell})">
            <summary>
            选定单元格集合转换为单元格数组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray(System.Windows.Forms.DataGridViewRowCollection,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            表格行集合转换为行数组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray(App.ControlLibrary.DataGridView,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            表格的行集合转换为行数组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray(System.Windows.Forms.DataGridViewSelectedRowCollection,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            选定行集合转换为行数组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray(System.Windows.Forms.DataGridViewColumnCollection,System.Predicate{System.Windows.Forms.DataGridViewColumn})">
            <summary>
            列集合转换为列数组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray(System.Windows.Forms.DataGridViewSelectedColumnCollection,System.Predicate{System.Windows.Forms.DataGridViewColumn})">
            <summary>
            选定列集合转换为列数组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray``1(System.Windows.Forms.DataGridViewRowCollection,System.Func{System.Windows.Forms.DataGridViewRow,``0})">
            <summary>
            行集合输出筛选器返回值列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray``1(App.ControlLibrary.DataGridView,System.Func{System.Windows.Forms.DataGridViewRow,``0})">
            <summary>
            表格的行集合输出筛选器返回值列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray``1(System.Windows.Forms.DataGridViewSelectedRowCollection,System.Func{System.Windows.Forms.DataGridViewRow,``0})">
            <summary>
            选择行集合输出筛选器返回值列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray``1(System.Windows.Forms.DataGridViewSelectedColumnCollection,System.Func{System.Windows.Forms.DataGridViewColumn,``0})">
            <summary>
            选择列集合输出筛选器返回值列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray``1(System.Windows.Forms.DataGridViewColumnCollection,System.Func{System.Windows.Forms.DataGridViewColumn,``0})">
            <summary>
            表格列集合输出筛选器返回值列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray``1(System.Windows.Forms.DataGridViewSelectedCellCollection,System.Func{System.Windows.Forms.DataGridViewCell,``0})">
            <summary>
            选择单元格集合输出筛选器返回值列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToArray``1(System.Windows.Forms.DataGridViewCellCollection,System.Func{System.Windows.Forms.DataGridViewCell,``0})">
            <summary>
            单元格集合输出筛选器返回值列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Edit``1(System.Windows.Forms.DataGridViewRow,``0)">
            <summary>
            根据指定的数据实体修改当前行对象的单元格值。
            </summary>
            <param name="row">当前表格行</param>
            <param name="item">数据实体</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Edit(System.Windows.Forms.DataGridViewRow,System.Data.DataRow)">
            <summary>
            根据指定的数据行修改当前行对象的单元格值。
            </summary>
            <param name="row">当前表格行</param>
            <param name="dataRow">指定的数据行</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Edit(System.Windows.Forms.DataGridViewRow,System.Object[])">
            <summary>
            根据指定的值数组修改当前行对象的单元格值。
            </summary>
            <param name="row">当前表格行</param>
            <param name="values">指定的值数组</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Edit(System.Windows.Forms.DataGridViewRow,System.String,System.String)">
            <summary>
            根据指定分隔符格式的行文本修改当前行对象的单元格值。
            </summary>
            <param name="row">当前表格行</param>
            <param name="valuesString">具有分隔符格式的行文本。</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Edit``1(System.Windows.Forms.DataGridView,System.Int32,``0)">
            <summary>
            修改表格索引处行对象的单元格值。
            </summary>
            <param name="dgv">表格对象</param>
            <param name="index">需要修改的行索引</param>
            <param name="item">数据实体</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Edit(System.Windows.Forms.DataGridView,System.Int32,System.Data.DataRow)">
            <summary>
            修改表格索引处行对象的单元格值。
            </summary>
            <param name="dgv">表格对象</param>
            <param name="index">需要修改的行索引</param>
            <param name="dataRow">指定的数据行</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Edit(System.Windows.Forms.DataGridView,System.Int32,System.Object[])">
            <summary>
            修改表格索引处行对象的单元格值。
            </summary>
            <param name="dgv">表格对象</param>
            <param name="index">需要修改的行索引</param>
            <param name="values">指定的值数组</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Edit(App.ControlLibrary.DataGridView,System.Int32,System.String,System.String)">
            <summary>
            修改表格索引处行对象的单元格值。
            </summary>
            <param name="dgv">表格对象</param>
            <param name="index">需要修改的行索引</param>
            <param name="valuesString">具有分隔符格式的行文本。</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Add``1(System.Windows.Forms.DataGridViewRowCollection,``0[])">
            <summary>
            在行集合的末尾位置开始追加新的数据列表。 
            </summary>
            <param name="rows">表格的行集合</param>
            <param name="items">需要追加的数据实体列表。</param>
            <returns>返回最后新增的 DataGridViewRow 对象。</returns>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Add(System.Windows.Forms.DataGridViewRowCollection,System.String,System.String)">
            <summary>
            在行集合的末尾位置开始追加新的行。
            </summary>
            <param name="rows">即将新增的行集合</param>
            <param name="valuesString">具有分隔符格式的行文本。</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Add``1(System.Windows.Forms.DataGridView,``0[])">
            <summary>
            在表格的行集合的末尾位置开始追加新的数据列表。 
            </summary>
            <param name="dgv">即将新增的表格对象</param>
            <param name="items">需要追加的数据实体列表。</param>
            <returns>返回最后新增的 DataGridViewRow 对象。</returns>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Add(System.Windows.Forms.DataGridView,System.Object[])">
            <summary>
            在行集合的末尾位置开始追加新的行。
            </summary>
            <param name="dgv">即将新增的表格对象</param>
            <param name="values">指定的值数组</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Add(System.Windows.Forms.DataGridView,System.String,System.String)">
            <summary>
            在行集合的末尾位置开始追加新的行。
            </summary>
            <param name="dgv">即将新增的表格对象</param>
            <param name="valuesString">具有分隔符格式的行文本。</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Add(System.Windows.Forms.DataGridView,System.Int32)">
            <summary>
            在行集合的末尾位置开始追加新的空行。
            </summary>
            <param name="dgv">即将新增的表格对象</param>
            <param name="count">插入的空行数量</param>
            <returns>返回最后新增的 DataGridViewRow 对象。</returns>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Insert``1(System.Windows.Forms.DataGridViewRowCollection,System.Int32,``0[])">
            <summary>
            从指定的行索引位置开始追加新的数据列表。 
            </summary>
            <param name="rows">表格的行集合</param>
            <param name="index">指定的行索引位置。</param>
            <param name="items">需要追加的数据实体列表。</param>
            <returns>返回最后插入的 DataGridViewRow 对象。</returns>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Insert(System.Windows.Forms.DataGridViewRowCollection,System.Int32,System.String,System.String)">
            <summary>
            从指定的行索引位置开始追加新的数据列表。
            </summary>
            <param name="rows">即将新增的行集合</param>
            <param name="index">指定的行索引位置。</param>
            <param name="valuesString">具有分隔符格式的行文本。</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Insert``1(System.Windows.Forms.DataGridView,System.Int32,``0[])">
            <summary>
            从指定的行索引位置开始追加新的数据列表。 
            </summary>
            <param name="dgv">插入数据的表格</param>
            <param name="index">指定的行索引位置。</param>
            <param name="items">需要追加的数据列表。</param>
            <returns>返回最后插入的 DataGridViewRow 对象。</returns>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Insert(System.Windows.Forms.DataGridView,System.Int32,System.Object[])">
            <summary>
            从指定的行索引位置开始追加新的数据列表。 
            </summary>
            <param name="dgv">插入数据的表格</param>
            <param name="index">指定的行索引位置。</param>
            <param name="values">需要追加的数据列表。</param>
            <returns>返回最后插入的 DataGridViewRow 对象。</returns>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Insert(System.Windows.Forms.DataGridView,System.Int32,System.String,System.String)">
            <summary>
            从指定的行索引位置开始追加新的行。
            </summary>
            <param name="dgv">表格对象</param>
            <param name="index">指定的行索引位置。</param>
            <param name="valuesString">具有分隔符格式的行文本。</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Insert(System.Windows.Forms.DataGridView,System.Int32,System.Int32)">
            <summary>
            在表格行集合指定索引位置处插入空行。
            </summary>
            <param name="dgv">表格对象</param>
            <param name="index">指定的行索引位置。</param>
            <param name="count">插入的空行数量</param>
            <returns>返回最后插入的 DataGridViewRow 对象。</returns>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Remove(System.Windows.Forms.DataGridViewRow)">
            <summary>
            把当前行从归属数据表格中移除。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Remove(System.Windows.Forms.DataGridView,System.Int32[])">
            <summary>
            从表格中删除指定的行索引。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Remove(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewRow[])">
            <summary>
            从表格中删除指定的行列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Remove(System.Collections.Generic.IEnumerable{System.Windows.Forms.DataGridViewRow})">
            <summary>
            从表格中删除指定的行列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.MoveTo(System.Windows.Forms.DataGridViewRow,System.Int32)">
            <summary>
            把指定的行对象在表格中移动到指定位置，并且返回该指定行。
            </summary>
            <param name="row">指定要移动的行</param>
            <param name="toIndex">移动到的指定索引位置</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Clear(System.Windows.Forms.DataGridViewRow,System.Boolean)">
            <summary>
            清理行的所有单元格数据
            </summary>
            <param name="row">要清理数据的表格行</param>
            <param name="suspendEvent">是否挂起事件</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Clear(System.Windows.Forms.DataGridViewRow,System.Int32[])">
            <summary>
            清理行的所有单元格数据
            </summary>
            <param name="row">要清理数据的表格行</param>
            <param name="excludeColumnIndex">排除的列索引(排除的列不参与清理操作)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Clear(System.Windows.Forms.DataGridViewRow,System.String[])">
            <summary>
            清理行的所有单元格数据
            </summary>
            <param name="row">要清理数据的表格行</param>
            <param name="excludeColumnNames">排除的列名称(排除的列不参与清理操作)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Clear(System.Windows.Forms.DataGridViewRow,System.Windows.Forms.DataGridViewCell[])">
            <summary>
            清理行的所有单元格数据
            </summary>
            <param name="row">要清理数据的表格行</param>
            <param name="excludeCells">排除的列名称(排除的列不参与清理操作)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Clear(System.Windows.Forms.DataGridViewRow,System.Boolean,System.Int32[])">
            <summary>
            清理行的所有单元格数据
            </summary>
            <param name="row">要清理数据的表格行</param>
            <param name="suspendEvent">是否挂起事件</param>
            <param name="excludeColumnIndex">排除的列索引(排除的列不参与清理操作)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Clear(System.Windows.Forms.DataGridViewRow,System.Boolean,System.String[])">
            <summary>
            清理行的所有单元格数据
            </summary>
            <param name="row">要清理数据的表格行</param>
            <param name="suspendEvent">是否挂起事件</param>
            <param name="excludeColumnNames">排除的列名称(排除的列不参与清理操作)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Clear(System.Windows.Forms.DataGridViewRow,System.Boolean,System.Windows.Forms.DataGridViewCell[])">
            <summary>
            清理行的所有单元格数据
            </summary>
            <param name="row">要清理数据的表格行</param>
            <param name="suspendEvent">是否挂起事件</param>
            <param name="excludeCells">排除的列名称(排除的列不参与清理操作)。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToString(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            获取表格行的字符串表达式
            </summary>
            <param name="row">获取字符串表达式的表格行。</param>
            <param name="delimiter">拆分字符串，默认为管道符号|。</param>
            <returns>返回指定行索引的行格式化文本字符串</returns>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FromStrings(System.Windows.Forms.DataGridViewRow,System.String,System.String)">
            <summary>
            由字符串表达式设置表格行中单元格的值。
            </summary>
            <param name="row">设置表达式的目标表格行</param>
            <param name="express">设置行单元格值的字符串表达式</param>
            <param name="delimiter">拆分字符串，默认为管道符号|。</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToEntity``1(System.Windows.Forms.DataGridViewRow)">
            <summary>
            表格行数据输出为数据实体项
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToList``1(System.Windows.Forms.DataGridView)">
            <summary>
            表格数据输出为实体列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.CreateTableSchema(System.Windows.Forms.DataGridView,App.ControlLibrary.MapType,System.String)">
            <summary>
            根据表格创建数据表架构
            </summary>
            <param name="view">创建数据表架构的表格对象</param>
            <param name="mapType">复制表格数据时的要复制为的列名类型</param>
            <param name="tableName">复制的数据表名称</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToTable(System.Windows.Forms.DataGridView,App.ControlLibrary.MapType,System.String)">
            <summary>
            根据表格数据创建数据表。
            </summary>
            <param name="view">复制数据的表格</param>
            <param name="tablename">复制的数据表名称</param>
            <param name="maptype">复制表格数据时的要复制为的列名类型</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.CreateTable(System.Windows.Forms.DataGridView,App.ControlLibrary.MapType,System.String)">
            <summary>
            根据表格数据创建数据表。
            </summary>
            <param name="view">复制数据的表格</param>
            <param name="tableName">复制的数据表名称</param>
            <param name="mapType">复制表格数据时的要复制为的列名类型</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ToNodeRow(System.Windows.Forms.DataGridViewRow)">
            <summary>
            表格行对象转换为节点行类型。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindAll(System.Windows.Forms.DataGridView,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格内的行集合进行循环查找符合条件的行列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindAll(System.Windows.Forms.DataGridViewRowCollection,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格的行集合进行循环遍历查找所有符合条件的行组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindAll(System.Windows.Forms.DataGridViewColumnCollection,System.Predicate{System.Windows.Forms.DataGridViewColumn})">
            <summary>
            对表格的列集合进行循环遍历查找所有符合条件的列组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindAll(System.Windows.Forms.DataGridView,System.Int32,System.Object)">
            <summary>
            对表格内的行集合进行循环查找符合条件的行列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindAll(System.Windows.Forms.DataGridView,System.String,System.Object)">
            <summary>
            对表格内的行集合进行循环查找符合条件的行列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindAll(System.Windows.Forms.DataGridViewSelectedRowCollection,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格内选择的行计划进行遍历循环查询符合条件的行列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindAll(System.Windows.Forms.DataGridViewCellCollection,System.Predicate{System.Windows.Forms.DataGridViewCell})">
            <summary>
            对单元格集合进行循环遍历查询所有符合条件的单元格组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindAll(System.Collections.Generic.IEnumerable{System.Windows.Forms.DataGridViewCell},System.Predicate{System.Windows.Forms.DataGridViewCell})">
            <summary>
            对单元格列表进行循环遍历查找所有符合条件的单元格组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindAll(System.Windows.Forms.ScrollableControl,System.Predicate{System.Windows.Forms.Control})">
            <summary>
            在控件的子控件集合中查找所有符合条件的控件列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Find(System.Windows.Forms.DataGridView,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格内的行集合进行循环查找第一个符合条件的行(查询是否返回 null)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Find(System.Windows.Forms.DataGridViewRowCollection,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格行集合进行循环遍历查找第一个符合条件的行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Find(System.Windows.Forms.DataGridViewColumnCollection,System.Predicate{System.Windows.Forms.DataGridViewColumn})">
            <summary>
            对表格列集合进行循环遍历查找第一个符合条件的列。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Find(System.Windows.Forms.DataGridView,System.Int32,System.Object)">
            <summary>
            对表格内的行集合进行循环查找第一个符合条件的行(查询是否返回 null)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Find(System.Windows.Forms.DataGridView,System.String,System.Object)">
            <summary>
            对表格内的行集合进行循环查找第一个符合条件的行(查询是否返回 null)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Find(System.Windows.Forms.DataGridViewSelectedRowCollection,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格内选择的行集合进行遍历循环查找第一个符合条件的行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Find(System.Windows.Forms.DataGridViewCellCollection,System.Predicate{System.Windows.Forms.DataGridViewCell})">
            <summary>
            对单元格集合进行循环遍历查询第一个符合条件的单元格。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Find(System.Collections.Generic.IEnumerable{System.Windows.Forms.DataGridViewCell},System.Predicate{System.Windows.Forms.DataGridViewCell})">
            <summary>
            对单元格列表进行循环遍历查找第一个符合条件的单元格。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Find(System.Windows.Forms.ScrollableControl,System.Predicate{System.Windows.Forms.Control})">
            <summary>
            在控件的子控件集合中查找第一个符合条件的子控件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindIndex(System.Windows.Forms.ScrollableControl,System.Predicate{System.Windows.Forms.Control})">
            <summary>
            在控件的子控件集合中查找第一个符合条件的子控件索引。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindIndex(System.Windows.Forms.DataGridView,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格内的行集合进行循环查找第一个符合条件的行索引(查询失败返回 -1)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindIndex(System.Windows.Forms.DataGridViewRowCollection,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格行集合进行循环遍历查找第一个符号条件的行索引(查询失败返回-1)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindIndex(System.Windows.Forms.DataGridViewSelectedRowCollection,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格选择行集合进行循环遍历查找第一个符合条件的行索引(查询失败返回-1)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindIndex(System.Windows.Forms.DataGridViewSelectedColumnCollection,System.Predicate{System.Windows.Forms.DataGridViewColumn})">
            <summary>
            对表格列集合进行循环编号查找第一个符合条件的列索引(查询失败返回-1)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindIndex(System.Windows.Forms.DataGridView,System.Int32,System.Object)">
            <summary>
            对表格内的行集合进行循环查找第一个符合条件的行索引(查询失败返回 -1)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindIndex(System.Windows.Forms.DataGridView,System.String,System.Object)">
            <summary>
            对表格内的行集合进行循环查找第一个符合条件的行索引(查询失败返回 -1)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindIndex(System.Windows.Forms.DataGridViewCellCollection,System.Predicate{System.Windows.Forms.DataGridViewCell})">
            <summary>
            对单元格集合进行循环遍历查询第一个符合条件的单元格列索引。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.FindIndex(System.Collections.Generic.IEnumerable{System.Windows.Forms.DataGridViewCell},System.Predicate{System.Windows.Forms.DataGridViewCell})">
            <summary>
            对单元格列表进行循环遍历查找第一个符合条件的单元格列索引。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Exists(App.ControlLibrary.DataGridView,System.Predicate{System.Windows.Forms.DataGridViewRow})">
            <summary>
            判断指定的表格中是否存在符合条件的行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Exists(App.ControlLibrary.DataGridView,System.String,System.Object)">
            <summary>
            对表格内的行集合进行循环,查找是否存在符合条件的行。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ForEach(System.Windows.Forms.DataGridView,System.Action{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格内的行集合进行遍历循环。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ForEach(System.Windows.Forms.DataGridViewRowCollection,System.Action{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格行集合进行循环遍历。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ForEach(System.Windows.Forms.DataGridViewSelectedRowCollection,System.Action{System.Windows.Forms.DataGridViewRow})">
            <summary>
            对表格内选择的行集合进行遍历循环。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ForEach(System.Windows.Forms.DataGridViewColumnCollection,System.Action{System.Windows.Forms.DataGridViewColumn})">
            <summary>
            对表格列集合进行循环遍历。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ForEach(System.Windows.Forms.DataGridViewCellCollection,System.Action{System.Windows.Forms.DataGridViewCell})">
            <summary>
            对单元格集合进行循环遍历查询第一个符合条件的单元格列索引。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.ForEach(System.Collections.Generic.IEnumerable{System.Windows.Forms.DataGridViewCell},System.Action{System.Windows.Forms.DataGridViewCell})">
            <summary>
            对单元格列表进行循环遍历查找第一个符合条件的单元格列索引。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.Copy(System.Windows.Forms.DataGridViewRow)">
            <summary>
            复制一个数据行
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.HasDataPropertyName(System.Windows.Forms.DataGridView)">
            <summary>
            判断是否指定了表格列的数据属性，用于数据绑定赋值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.SetCellValues(System.Windows.Forms.DataGridViewRow,System.Data.DataRow,App.ControlLibrary.BindingMapping,System.Boolean)">
            <summary>
            设置表格行的单元格值,并且返回表格行(用于修改,不进行参数校验)。
            </summary>
            <param name="row">表格行对象</param>
            <param name="datarow">数据行对象</param>
            <param name="mapping">绑定映射关系</param>
            <param name="hasDataPropertyName">true表示绑定填充，fals表示顺序填充</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.SetCellValues``1(System.Windows.Forms.DataGridViewRow,``0,App.ControlLibrary.BindingMapping,System.Boolean)">
            <summary>
            设置表格行的单元格值,并且返回表格行(用于修改,不进行参数校验)。
            </summary>
            <param name="row">表格行对象</param>
            <param name="item">数据实体对象</param>
            <param name="mapping">绑定映射关系</param>
            <param name="hasDataPropertyName">true表示绑定填充，fals表示顺序填充</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.CreateCellValues(System.Windows.Forms.DataGridView,System.Data.DataRow,App.ControlLibrary.BindingMapping,System.Boolean)">
            <summary>
            生成需要填充到表格行的单元格值对象列表(用于新增和插入,不进行参数校验)
            </summary>
            <param name="dgv">表格对象</param>
            <param name="datarow">数据行对象</param>
            <param name="mapping">绑定映射关系</param>
            <param name="hasDataPropertyName">true表示绑定填充，fals表示顺序填充</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.CreateCellValues``1(System.Windows.Forms.DataGridView,``0,App.ControlLibrary.BindingMapping,System.Boolean)">
            <summary>
            生成需要填充到表格行的单元格值对象列表(用于新增和插入,不重复解析架构,不进行参数校验)
            </summary>
            <param name="dgv">表格对象</param>
            <param name="item">数据实体对象</param>
            <param name="mapping">绑定映射关系</param>
            <param name="hasDataPropertyName">true表示绑定填充，fals表示顺序填充</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.MergeCells(System.Windows.Forms.DataGridViewRow,System.String[])">
            <summary>
            合并单元格。
            </summary>
            <param name="row">需要合并单元格展示的表格行。</param>
            <param name="columnNames">列名称，缺省表示全部单元格</param>
        </member>
        <member name="M:App.ControlLibrary.DataGridViewExtension.MergeCells(System.Windows.Forms.DataGridViewRow,System.String,System.String[])">
            <summary>
            合并单元格。
            </summary>
            <param name="row">需要合并单元格展示的表格行。</param>
            <param name="mergeText">合并后的单元格显示文本。</param>
            <param name="columnNames">列名称，缺省表示全部单元格</param>
        </member>
        <member name="T:App.ControlLibrary.EventExtension">
            <summary>
            事件扩展函数
            </summary>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.PreProcessKeyDown(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs,App.ControlLibrary.ImeType)">
            <summary>
            在调度键盘或输入消息之前，对键码响应进行预处理。(已经被处理过的键码返回True，否则返回False)。
            </summary>
            <param name="editor">编辑器控件</param>
            <param name="keys">要处理的键码参数。</param>
            <param name="imeType">可输入的字符类型。</param>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.PerformKeyDown(System.Windows.Forms.Control,System.Windows.Forms.KeyEventArgs)">
            <summary>
            生成控件的KeyDown事件。
            </summary>
            <param name="control">生成事件的控件</param>
            <param name="keys">要处理的键码参数。</param>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.PerformKeyDown(System.Windows.Forms.Control,System.Windows.Forms.Keys)">
            <summary>
            生成控件的KeyDown事件。
            </summary>
            <param name="control">生成事件的控件</param>
            <param name="keys">
            一个 Keys，表示按下的键以及任何修饰符标志（指示同时按下的 Ctrl、Shift 和 Alt 键）。
            可通过将按位"或"(|) 运算符应用于 Keys 枚举中的常数，来获取可能的值。
            </param>
            <returns>如果目标控件已经处理了该事件返回true，否则返回false。</returns>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.PerformKeyDown(System.ComponentModel.Component,System.Windows.Forms.KeyEventArgs)">
            <summary>
            生成控件的KeyDown事件。
            </summary>
            <param name="component">生成事件的组件</param>
            <param name="keys">要处理的键码参数。</param>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.PerformKeyDown(System.ComponentModel.Component,System.Windows.Forms.Keys)">
            <summary>
            生成控件的KeyDown事件。
            </summary>
            <param name="component">生成事件的组件</param>
            <param name="keys">要处理的键码参数。</param>
            <returns>如果目标组件已经处理了该事件返回true，否则返回false。</returns>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.PerformEvent(System.ComponentModel.Component,System.String,System.EventArgs)">
            <summary>
            生成组件的事件。
            </summary>
            <param name="component">生成事件的组件对象</param>
            <param name="name">生成的事件名称。</param>
            <param name="e">生成事件需要传入的参数。</param>
            <remarks>如果传入的参数名称 name 和参数 e 不正确时将不激活事件。</remarks>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.PerformEvent(System.Windows.Forms.Control,System.String,System.EventArgs)">
            <summary>
            生成组件的事件。
            </summary>
            <param name="control">生成事件的控件</param>
            <param name="name">生成的事件名称。</param>
            <param name="e">生成事件需要传入的参数。</param>
            <remarks>如果传入的参数名称 name 和参数 e 不正确时将不激活事件。</remarks>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.PerformClick(System.Windows.Forms.Control,System.EventArgs)">
            <summary>
            生成控件的Click事件。
            </summary>
            <param name="control">生成事件的控件</param>
            <param name="e">生成事件的参数集</param>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.PerformClick(System.ComponentModel.Component,System.EventArgs)">
            <summary>
            生成控件的Click事件。
            </summary>
            <param name="component">生成事件的控件</param>
            <param name="e">生成事件的参数集</param>
        </member>
        <member name="M:App.ControlLibrary.EventExtension.FindEventField(System.Type,System.String)">
            <summary>
            获取事件字段值
            </summary>
        </member>
        <member name="T:App.ControlLibrary.HtmlElementExtension">
            <summary>
            HtmlElement扩展类
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.Find_ByID(System.Windows.Forms.HtmlDocument,System.String[])">
            <summary>
            在HTML文档中搜索指定ID的元素
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.HasClass(System.Windows.Forms.HtmlElement,System.String[])">
            <summary>
            是否存在指定的类名称
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.RemoveClass(System.Windows.Forms.HtmlElement,System.String[])">
            <summary>
            移除指定的类名称
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.AppendClass(System.Windows.Forms.HtmlElement,System.String[])">
            <summary>
            追加指定的类名称
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.Find_ByTag(System.Windows.Forms.HtmlElement,System.String[])">
            <summary>
            筛选符合指定标记链的第一个元素
            </summary>
            <param name="parent">父元素(null表示根元素Body)。</param>
            <param name="tags">标记链数组(兼容空格、\、/、>&lt;等符号)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.FindAll_ByTag(System.Windows.Forms.HtmlElement,System.String[])">
            <summary>
            筛选符合指定标记链的元素数组
            </summary>
            <param name="parent">父元素(null表示根元素Body)。</param>
            <param name="tags">标记链数组(兼容空格、\、/、>&lt;等符号)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.FindAll_ByTag(System.Windows.Forms.HtmlWindow,System.String[])">
            <summary>
            筛选符合指定标记链的元素数组
            </summary>
            <param name="frame">Frame框架</param>
            <param name="tags">标记链数组(兼容空格、\、/、>&lt;等符号)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.Find_ByTag(System.Windows.Forms.HtmlWindow,System.String[])">
            <summary>
            筛选符合指定标记链的第一个元素
            </summary>
            <param name="frame">Frame框架</param>
            <param name="tags">标记链数组(兼容空格、\、/、>&lt;等符号)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.FindAll_ByTag(System.Windows.Forms.HtmlDocument,System.String[])">
            <summary>
            筛选符合指定标记链的元素数组
            </summary>
            <param name="document">HTML文档</param>
            <param name="tags">标记链数组(兼容空格、\、/、>&lt;等符号)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.Find_ByTag(System.Windows.Forms.HtmlDocument,System.String[])">
            <summary>
            筛选符合指定标记链的第一个元素
            </summary>
            <param name="document">HTML文档</param>
            <param name="tags">标记链数组(兼容空格、\、/、>&lt;等符号)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.Find_ByClass(System.Windows.Forms.HtmlElement,System.String[])">
            <summary>
            通过ClassName获取元素数组
            </summary>
            <param name="parent">父元素，Nothing表示根元素Body。</param>
            <param name="names">类名称数组</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.FindAll_ByClass(System.Windows.Forms.HtmlElement,System.String[])">
            <summary>
            通过ClassName获取元素数组
            </summary>
            <param name="parent">父元素，Nothing表示根元素Body。</param>
            <param name="names">类名称数组</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.Find_ByName(System.Windows.Forms.HtmlDocument,System.String,System.String)">
            <summary>
            由元素的名称Name获取元素
            </summary>
            <param name="document">在其中搜索元素的HTML的文档</param>
            <param name="name">元素名称</param>
            <param name="value">元素值(缺省表示不比对元素值)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.FindAll_ByName(System.Windows.Forms.HtmlDocument,System.String)">
            <summary>
            由元素名称Name获取元素数组
            </summary>
            <param name="document">在其中搜索元素的HTML的文档</param>
            <param name="name">元素名称</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.HasChildren(System.Windows.Forms.HtmlElement)">
            <summary>
            是否存在子元素
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.Children(System.Windows.Forms.HtmlElement,System.Predicate{System.Windows.Forms.HtmlElement})">
            <summary>
            获取元素的所有子元素
            </summary>
            <param name="element">获取子元素的元素实例</param>
            <param name="match">子元素筛选器(null表示所有子元素)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.FirstChild(System.Windows.Forms.HtmlElement,System.Predicate{System.Windows.Forms.HtmlElement})">
            <summary>
            获取元素符号筛选条件的第一个子元素
            </summary>
            <param name="element">获取子元素的元素实例</param>
            <param name="match">子元素筛选器(null表示第一个子元素)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.LastChild(System.Windows.Forms.HtmlElement,System.Predicate{System.Windows.Forms.HtmlElement})">
            <summary>
            获取元素符号筛选条件的最后一个子元素
            </summary>
            <param name="element">获取子元素的元素实例</param>
            <param name="match">子元素筛选器(null表示最后一个子元素)</param>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.HasSibling(System.Windows.Forms.HtmlElement)">
            <summary>
            是否存在同一级别的其他元素
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.PrevSibling(System.Windows.Forms.HtmlElement)">
            <summary>
            获取同一级别的上一个元素。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.NextSibling(System.Windows.Forms.HtmlElement)">
            <summary>
            获取同一级别的下一个元素。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.Find_Recursion(System.Windows.Forms.HtmlElement,System.String[],System.Func{System.Windows.Forms.HtmlElement,System.String},System.Int32)">
            <summary>
            搜索首个符合条件的元素递归子过程
            </summary>
        </member>
        <member name="M:App.ControlLibrary.HtmlElementExtension.FindAll_Recursion(System.Windows.Forms.HtmlElement,System.String[],System.Func{System.Windows.Forms.HtmlElement,System.String},System.Int32)">
            <summary>
            搜索元素列表的递归子过程
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ListViewExtension">
            <summary>
            列表视图扩展函数
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.ColumnIndex(System.Windows.Forms.ListView.ColumnHeaderCollection,System.String)">
            <summary>
            由指定的列名称返回列索引
            </summary>
            <param name="columns">列表视图控件的列集合</param>
            <param name="columnName">列名称，也即是列标题、列头文本。</param>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.ColumnIndex(System.Windows.Forms.ListView,System.String)">
            <summary>
            由指定的列名称返回列索引
            </summary>
            <param name="listview">列表视图控件</param>
            <param name="columnName">列名称，也即是列标题、列头文本。</param>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.Find(System.Windows.Forms.ListView,System.Predicate{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件的所有项集合中查找第一个符合条件的列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.Find(System.Windows.Forms.ListView.ListViewItemCollection,System.Predicate{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件的所有项集合中查找第一个符合条件的列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.Find(System.Windows.Forms.ListView.SelectedListViewItemCollection,System.Predicate{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件的所有项集合中查找第一个符合条件的列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.FindAll(System.Windows.Forms.ListView,System.Predicate{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件集合中查找所有符合条件的列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.FindAll(System.Windows.Forms.ListView.ListViewItemCollection,System.Predicate{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件集合中查找所有符合条件的列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.FindAll(System.Windows.Forms.ListView.SelectedListViewItemCollection,System.Predicate{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件选定集合中查找所有符合条件的列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.ForEach(System.Windows.Forms.ListView.ListViewItemCollection,System.Action{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件集合中循环遍历所有列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.ForEach(System.Windows.Forms.ListView,System.Action{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件集合中循环遍历所有列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.ForEach(System.Windows.Forms.ListView.SelectedListViewItemCollection,System.Action{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件选定集合中循环遍历所有列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.ToArray``1(System.Windows.Forms.ListView,System.Func{System.Windows.Forms.ListViewItem,``0})">
            <summary>
            在列表视图控件的所有项集合中输出为数组项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.ToArray``1(System.Windows.Forms.ListView.ListViewItemCollection,System.Func{System.Windows.Forms.ListViewItem,``0})">
            <summary>
            在列表视图控件的所有项集合中输出为数组项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.ToArray``1(System.Windows.Forms.ListView.SelectedListViewItemCollection,System.Func{System.Windows.Forms.ListViewItem,``0})">
            <summary>
            在列表视图控件选定集合中输出为数组项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListViewExtension.EndEdit(System.Windows.Forms.ListViewItem)">
            <summary>
            终止项文本的编辑模式。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.TreeViewExtension">
            <summary>
            树视控件扩展函数
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.RootNode(System.Windows.Forms.TreeNode)">
            <summary>
            获取当前树节点的根节点。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.VirtualRoot(System.Windows.Forms.TreeView)">
            <summary>
            获取树视图的虚节点(视图中根节点的父节点)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.NodesFamily(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            获取当前节点的所有子族节点组。
            </summary>
            <param name="node">获取子族节点组的当前节点。</param>
            <param name="includeCurrentNode">是否包含当前节点。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.NodesFamily(System.Windows.Forms.TreeView)">
            <summary>
            获取当前树视图控件的所有子族节点组。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.CheckedNodes(System.Windows.Forms.TreeNode)">
            <summary>
            获取当前节点的所有选中的子节点组(包括当前节点，子节点非全选的不视为选定节点)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.NodeTable(System.Windows.Forms.TreeView)">
            <summary>
            获取节点表
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Copy(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            获取当前树节点的精确复制副本。
            </summary>
            <param name="node">当前节点</param>
            <param name="includeChildren">是否包括子节点的复制。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.IsRoot(System.Windows.Forms.TreeNode)">
            <summary>
            获取当前树节点是否为根节点。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.IsParent(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            确定当前树节点是否为指定节点的父节点。
            </summary>
            <param name="node">当前节点</param>
            <param name="children">指定的子节点</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.IsChildren(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            确定当前树节点是否为指定节点的子节点。
            </summary>
            <param name="node">当前节点</param>
            <param name="parent">指定的节点</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.HasChildren(System.Windows.Forms.TreeNode)">
            <summary>
            前树节点是否有子节点。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.HasBrother(System.Windows.Forms.TreeNode)">
            <summary>
            当前节点是否存在兄弟节点。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.ToPaths(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            获取路径
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.NamePath(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            获取节点相对于上层父节点的名称路径。
            </summary>
            <param name="node">当前节点</param>
            <param name="parent">上层父节点(默认表示根节点)。</param> 
            <remarks>如果指示的父节点不是当前节点的父节点将返回当前节点的相对于根节点的绝对路径。</remarks>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.TextPath(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            获取节点相对于上层父节点的文本路径
            </summary>
            <param name="node">当前节点</param>
            <param name="parent">上层父节点(默认表示根节点)。</param> 
            <remarks>如果指示的父节点不是当前节点的父节点将返回当前节点的相对于根节点的绝对路径。</remarks>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Add(System.Windows.Forms.TreeNode,System.String[],System.String,System.Object)">
            <summary>
            数组式新增节点
            </summary>
            <param name="node">当前节点</param>
            <param name="texts">新增的包括节点的路由节点文本数组</param>
            <param name="name">新增节点的名称，省略表示没有名称。</param>
            <param name="tag">Tag值。</param>
            <returns>返回新增的节点</returns>    
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Add(System.Windows.Forms.TreeView,System.String[],System.String,System.Object)">
            <summary>
            数组式新增节点
            </summary>
            <param name="treeview">当前树视控件</param>
            <param name="texts">新增的包括节点的路由节点文本数组</param>
            <param name="name">新增节点的名称，省略表示没有名称。</param>
            <param name="tag">Tag值。</param>
            <returns>返回新增的节点</returns>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.FormatText(System.Windows.Forms.TreeNode,System.String,System.String,System.Object)">
            <summary>
            设置节点格式化的文本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Add(System.Windows.Forms.TreeNode,System.String,System.String,System.Object)">
            <summary>
            路径式新增节点
            </summary>
            <param name="node">当前节点</param>
            <param name="textpath">文本路径。</param>
            <param name="name">新增节点的名称，省略表示没有名称。</param>
            <param name="tag">新增的标签值</param>
            <returns>返回新增的节点</returns>   
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Add(System.Windows.Forms.TreeView,System.String,System.String,System.Object)">
            <summary>
            路径式新增节点
            </summary>
            <param name="treeview">当前树视控件</param>
            <param name="textpath">文本路径。</param>
            <param name="name">新增节点的名称，省略表示没有名称。</param>
            <param name="tag">新增的标签值</param>
            <returns>返回新增的节点</returns> 
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Add(System.Windows.Forms.TreeView,System.Windows.Forms.TreeNode)">
            <summary>
            新增节点作为根节点
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Add(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            新增节点作为当前节点的子节点
            </summary>
            <param name="node">当前节点</param>
            <param name="children">新增的子节点</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Edit(System.Windows.Forms.TreeNode,System.String,System.String)">
            <summary>
            编辑节点的文本及名称
            </summary>
            <param name="node">当前节点</param>
            <param name="text">节点文本</param>
            <param name="name">节点名称</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Edit(System.Windows.Forms.TreeView,System.String,System.String,System.String)">
            <summary>
            编辑指定节点名称的文本及名称
            </summary>
            <param name="name">节点名称</param>
            <param name="treeview">树视控件</param>
            <param name="newText">新节点文本</param>
            <param name="newName">新节点名称</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Find(System.Windows.Forms.TreeNode,System.String,System.Boolean)">
            <summary>
            在当前节点中搜索指定节点名称的子节点。
            </summary>
            <param name="node">当前节点</param>
            <param name="name">节点名称</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
            <returns>返回找到的子节点对象，否则返回Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.FindAll(System.Windows.Forms.TreeNode,System.String,System.Boolean)">
            <summary>
            在当前节点中搜索指定节点名称的所有子节点列表。
            </summary>
            <param name="node">当前节点</param>
            <param name="name">节点名称</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
            <returns>返回找到的子节点对象，否则返回Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Find(System.Windows.Forms.TreeView,System.String,System.Boolean)">
            <summary>
            在树视图控件中搜索指定节点名称的子节点。
            </summary>
            <param name="treeview">当前树视控件</param>
            <param name="name">节点名称</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
            <returns>返回找到的子节点对象，否则返回Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.FindAll(System.Windows.Forms.TreeView,System.String,System.Boolean)">
            <summary>
            在树视图控件中搜索指定节点名称的所有子节点列表。
            </summary>
            <param name="treeview">当前树视控件</param>
            <param name="name">节点名称</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
            <returns>返回找到的子节点对象，否则返回Nothing。</returns>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Find(System.Windows.Forms.TreeNodeCollection,System.Predicate{System.Windows.Forms.TreeNode},System.Boolean)">
            <summary>
            针对树视控件的节点进行遍历循环搜索第一个符合条件的节点。
            </summary>
            <param name="nodes">搜索的节点集合</param>
            <param name="match">筛选比较器</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Find(System.Windows.Forms.TreeView,System.Predicate{System.Windows.Forms.TreeNode},System.Boolean)">
            <summary>
            针对树视控件的根节点进行遍历循环搜索第一个符合条件的根节点。
            </summary>
            <param name="view">搜索的树视控件</param>
            <param name="match">筛选比较器</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Find(System.Windows.Forms.TreeNode,System.Predicate{System.Windows.Forms.TreeNode},System.Boolean)">
            <summary>
            针对树视控件节点的子节点列表进行遍历循环搜索第一个符合条件的子节点。
            </summary>
            <param name="node">搜索的节点</param>
            <param name="match">筛选比较器</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Find(System.Windows.Forms.TreeNode,System.String[])">
            <summary>
            根据文本路径组查询当前节点中第一个符合条件的子节点。
            </summary>
            <param name="node">当前节点</param>
            <param name="texts">文本路径组</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Find(System.Windows.Forms.TreeView,System.String[])">
            <summary>
            根据文本路径组查询树视图控件中第一个符合条件的子节点。
            </summary>
            <param name="treeview">当前树视控件</param>
            <param name="texts">文本路径组</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.FindAll(System.Windows.Forms.TreeNode,System.String[])">
            <summary>
            根据文本路径组查询当前节点中所有符合条件的子节点。
            </summary>
            <param name="node">当前节点</param>
            <param name="texts">文本路径组</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.FindAll(System.Windows.Forms.TreeView,System.String[])">
            <summary>
            根据文本路径组查询当前节点中所有符合条件的子节点。
            </summary>
            <param name="treeview">当前树视控件</param>
            <param name="texts">文本路径组</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.FindAll(System.Windows.Forms.TreeNode,System.Predicate{System.Windows.Forms.TreeNode},System.Boolean)">
            <summary>
            针对节点的子节点集合进行遍历循环搜索所有符合条件的根节点列表。
            </summary>
            <param name="node">搜索的节点集合</param>
            <param name="match">筛选比较器</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.FindAll(System.Windows.Forms.TreeView,System.Predicate{System.Windows.Forms.TreeNode},System.Boolean)">
            <summary>
            针对树视控件的根节点进行遍历循环搜索所有符合条件的根节点列表。
            </summary>
            <param name="view">搜索的树视控件</param>
            <param name="match">筛选比较器</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.FindAll(System.Windows.Forms.TreeNodeCollection,System.Predicate{System.Windows.Forms.TreeNode},System.Boolean)">
            <summary>
            针对树视控件的节点进行遍历循环搜索所有符合条件的节点列表。
            </summary>
            <param name="nodes">搜索的节点集合</param>
            <param name="match">筛选比较器</param>
            <param name="includeChildren">是否包括子节点的搜索。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.ForEach(System.Windows.Forms.TreeNode,System.Action{System.Windows.Forms.TreeNode})">
            <summary>
            对节点的子节点进行遍历循环。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.ForEach(System.Windows.Forms.TreeView,System.Action{System.Windows.Forms.TreeNode})">
            <summary>
            对树视控件的根节点进行遍历循环。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.ForEach(System.Windows.Forms.TreeNodeCollection,System.Action{System.Windows.Forms.TreeNode})">
            <summary>
            对树视控件的节点计划进行遍历循环
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Clear(System.Windows.Forms.TreeNode)">
            <summary>
            清除节点的所有子节点。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.Clear(System.Windows.Forms.TreeView)">
            <summary>
            清除树视控件中的所有子节点。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.MoveTo(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode,System.Int32)">
            <summary>
            树视节点移动到新目标位置。
            </summary>
            <param name="node">被移动的节点</param>
            <param name="parent">移动到的目标节点父节点，null表示为根节点。</param>
            <param name="index">移动到目标父节点的索引位置。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.ToArray``1(System.Windows.Forms.TreeNode,System.Func{System.Windows.Forms.TreeNode,``0},System.Boolean)">
            <summary>
            对节点的子节点进行循环，并且返回输出结果数组。
            </summary>
            <typeparam name="T">输出数组结果的泛型类型</typeparam>
            <param name="node">进行循环搜索子节点的节点对象</param>
            <param name="selector">筛选器</param>
            <param name="removeEmpty">是否移除空值。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeViewExtension.ToArray(System.Windows.Forms.TreeNodeCollection)">
            <summary>
            树节点集合转换为数组。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.FlowLayoutPanel">
            <summary>
            流布局容器控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.FlowLayoutPanel.#ctor">
            <summary>
            流布局容器控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.FlowLayoutPanel.GetFlowBreak(System.Windows.Forms.Control)">
            <summary>
            控件的流中断设置。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.FlowLayoutPanel.SetFlowBreak(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            控件的流中断设置。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.FlowLayoutPanel.FlowDirection">
            <summary>
            获取或设置控件的流向。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.FlowLayoutPanel.LayoutEngine">
            <summary>
            获取面板的布局引擎的缓存实例。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.FlowLayoutPanel.WrapContents">
            <summary>
            获取或设置控件的内容进行换行还是剪裁。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.FlowLayoutPanel.ShowBorder">
            <summary>
            显示视觉效果边框
            </summary>
        </member>
        <member name="P:App.ControlLibrary.FlowLayoutPanel.BorderStyle">
            <summary>
            指示控件的边框样式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.FlowLayoutPanel.Padding">
            <summary>
            获取或设置控件内距离边框的空白像素数。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.FlowLayoutPanel.OnSizeChanged(System.EventArgs)">
            <summary>
            控件尺寸改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.FlowLayoutPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件背景事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.GroupBox">
            <summary>
            群组容器控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.GroupBox.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.GroupBox.EnterSendTab">
            <summary /> 
        </member>
        <member name="M:App.ControlLibrary.GroupBox.SendTab(System.Boolean)">
            <summary />
        </member>
        <member name="M:App.ControlLibrary.GroupBox.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.GroupBox.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.GroupBox.SuspendEvents">
            <summary />
        </member>
        <member name="M:App.ControlLibrary.GroupBox.ResumeEvents(System.Boolean)">
            <summary />
        </member>
        <member name="M:App.ControlLibrary.GroupBox.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.GroupBox.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.GroupBox.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.GroupBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            控件重绘
            </summary>
        </member>
        <member name="M:App.ControlLibrary.GroupBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件背景
            </summary>
        </member>
        <member name="M:App.ControlLibrary.GroupBox.OnPaintText(System.Drawing.Graphics)">
            <summary>
            重绘标题
            </summary>
        </member>
        <member name="P:App.ControlLibrary.GroupBox.LineColor">
            <summary>
            边框颜色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.GroupBox.TextColor">
            <summary>
            控件标题的颜色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.GroupBox.Text">
            <summary>
            控件标题的文本
            </summary>
        </member>
        <member name="P:App.ControlLibrary.GroupBox.CircularCorner">
            <summary>
            是否为圆角的边框线
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewColumnIndexIndexer">
            <summary>
            列索引索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewColumnIndexIndexer.Item(System.String)">
            <summary>
            在表格中搜索指定名称的列索引(包括列名称、数据属性名称、列标题三种形式均通用)。
            </summary>
            <param name="name">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewColumnIndexIndexer.Item(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            在表格行归属的表格中搜索指定名称的列索引(包括列名称、数据属性名称、列标题三种形式均通用)。
            </summary>
            <param name="row">用于搜索的表格行</param>
            <param name="name">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.ComboBoxSourceIndexer">
            <summary>
            数据源索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ComboBoxSourceIndexer.Item(App.ControlLibrary.DataItem,App.ControlLibrary.TextFormat)">
            <summary>
            设置控件的数据源
            </summary>
            <param name="dataMapping">数据源字段映射管理器</param>
            <param name="formater">列表项文本显示格式化器</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ComboBoxSourceIndexer.Item(App.ControlLibrary.TextFormat,App.ControlLibrary.DataItem)">
            <summary>
            设置控件的数据源
            </summary>
            <param name="dataMapping">数据源字段映射管理器</param>
            <param name="formater">列表项文本显示格式化器</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ComboBoxSourceIndexer.Item(System.String,System.String,System.String,System.String)">
            <summary>
            设置控件的数据源
            </summary>
            <param name="text">列表项的文本对应字段</param>
            <param name="code">列表项的编码对应字段</param>
            <param name="spelling">列表项的附加码对应字段</param>
            <param name="extraCode">列表项的拼音助记码对应字段</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.ComboBoxSourceIndexer.AsTable(System.String)">
            <summary>
            返回绑定到控件的数据源
            </summary>
            <param name="tableName">表名称</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.ComboBoxSourceIndexer.As``1">
            <summary>
            返回绑定到控件的数据源
            </summary>
            <typeparam name="T">数据源的泛型类型</typeparam>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewCellBoundIndexer">
            <summary>
            单元格位置和大小的索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellBoundIndexer.Item(System.Boolean)">
            <summary>
            获取当前单元格的位置和大小
            </summary>
            <param name="cutOverflow">如果只返回该单元格的显示部分，则为 true；如果返回整个单元格界限，则为 false。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellBoundIndexer.Item(System.Windows.Forms.DataGridViewCell,System.Boolean)">
            <summary>
            获取单元格的位置和大小。
            </summary>
            <param name="cell">获取位置和大小的单元格</param>
            <param name="cutOverflow">如果只返回该单元格的显示部分，则为 true；如果返回整个单元格界限，则为 false。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellBoundIndexer.Item(System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取单元格的位置和大小。
            </summary>
            <param name="rowIndex">单元格的行索引</param>
            <param name="columnIndex">单元格的列索引</param>
            <param name="cutOverflow">如果只返回该单元格的显示部分，则为 true；如果返回整个单元格界限，则为 false。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellBoundIndexer.Item(System.Int32,System.String,System.Boolean)">
            <summary>
            获取单元格的位置和大小。
            </summary>
            <param name="rowIndex">单元格的行索引</param>
            <param name="columnName">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
            <param name="cutOverflow">如果只返回该单元格的显示部分，则为 true；如果返回整个单元格界限，则为 false。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellBoundIndexer.Item(System.String,System.Int32,System.Boolean)">
            <summary>
            获取单元格的位置和大小。
            </summary>
            <param name="rowIndex">单元格的行索引(缺省表示当前行)</param>
            <param name="columnName">列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
            <param name="cutOverflow">如果只返回该单元格的显示部分，则为 true；如果返回整个单元格界限，则为 false。</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer">
            <summary>
            单元格颜色索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer.Item(System.Int32,System.Int32)">
            <summary>
            返回或者设置单元格的颜色值
            </summary>
            <param name="rowIndex">单元格行索引，不正确的行索引表示所有行。</param>
            <param name="columnIndex">单元格列索引，不正确的列索引表示所有列。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer.Item(System.Windows.Forms.DataGridViewRow,System.Int32)">
            <summary>
            返回或者设置单元格的颜色值
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnIndex">单元格的列索引</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer.Item(System.Int32,System.Windows.Forms.DataGridViewRow)">
            <summary>
            返回或者设置单元格的颜色值
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnIndex">单元格的列索引</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer.Item(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            返回或者设置单元格的颜色值
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer.Item(System.String,System.Windows.Forms.DataGridViewRow)">
            <summary>
            返回或者设置单元格的颜色值
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer.Item(System.Int32,System.String)">
            <summary>
            返回或者设置单元格的颜色值
            </summary>
            <param name="rowIndex">单元格的行索引。</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer.Item(System.String,System.Int32)">
            <summary>
            返回或者设置单元格的颜色值
            </summary>
            <param name="rowIndex">单元格的行索引。</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer.Item(System.Int32)">
            <summary>
            返回或者设置单元格的颜色值
            </summary>
            <param name="columnIndex">单元格的列索引。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellColorIndexer.Item(System.String)">
            <summary>
            返回或者设置单元格的颜色值
            </summary>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewCellStyleIndexer">
            <summary>
            单元格样式索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellStyleIndexer.Item(System.Int32,System.Int32)">
            <summary>
            获取单元格样式
            </summary>
            <param name="rowIndex">单元格行索引，不正确的行索引表示所有行。</param>
            <param name="columnIndex">单元格列索引，不正确的列索引表示所有列。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewCellStyleIndexer.Item(System.Int32,System.String)">
            <summary>
            获取单元格样式
            </summary>
            <param name="rowIndex">单元格行索引，不正确的行索引表示所有行。</param>
            <param name="columnName">单元格列名称，不正确的列索引表示所有列(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer">
            <summary>
            合并列头索引器
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.MergedColumnSettion">
            <summary>
            列头合并设置
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.MergedColumnSettion.HeaderText">
            <summary>
            合并后的列标题
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.MergedColumnSettion.Font">
            <summary>
            合并后的列标题字体
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.MergedColumnSettion.ForeColor">
            <summary>
            合并后的列标题前景色
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.MergedColumnSettion.Invalidate">
            <summary>
            更新合并标题的显示
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.MergedColumnSettion.Columns">
            <summary>
            合并的表格列对象列表
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.MergedColumnSettion.Add(System.String[])">
            <summary>
            增加合并列
            </summary>
            <param name="columnNames">增加合并的列名称</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.MergedColumnSettion.Add(System.Int32[])">
            <summary>
            增加合并列
            </summary>
            <param name="columnIndexs">增加合并的列索引</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.MergedColumnSettion.Add(System.Windows.Forms.DataGridViewColumn[])">
            <summary>
            增加合并列
            </summary>
            <param name="columns">增加合并的列</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Clear">
            <summary>
            清理已经合并的所有列合并设置
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Clear(System.Int32)">
            <summary>
            清理指定列索引对应的合并列设置。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Clear(System.String)">
            <summary>
            清理指定列名称对应的合并列设置。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Add(System.String,System.String[])">
            <summary>
            列头合并
            </summary>
            <param name="headerText">合并后的列头文本</param>
            <param name="columnNames">需要进行合并的列名称组</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Add(System.String,System.Int32[])">
            <summary>
            列头合并
            </summary>
            <param name="headerText">合并后的列头文本</param>
            <param name="columnIndexs">需要进行合并的列索引组</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Add(System.String,System.Windows.Forms.DataGridViewColumn[])">
            <summary>
            列头合并
            </summary>
            <param name="headerText">合并后的列头文本</param>
            <param name="columns">需要进行合并的列组</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Count">
            <summary>
            列标题合并设置的数量
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Columns">
            <summary>
            获取所有参与合并的列
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Item(System.Int32)">
            <summary>
            根据指定的列索引获取对应的合并列设置。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Item(System.String)">
            <summary>
            根据指定的列名称获取对应的合并列设置。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.Item(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            根据指定的列获取对应的合并列设置。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.OnDrawMergeColumnHeader(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            重画
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.VerifyRepeatMerge(System.Collections.Generic.IList{System.Windows.Forms.DataGridViewColumn})">
            <summary>
            校验列被重复合并
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.AdaptiveColumnHeaderHeight">
            <summary>
            调整列头高度
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeColumnsIndexer.GetEnumerator">
            <summary>
            获取循环访问的枚举器
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewNodeSourceIndexer">
            <summary>
            数据源索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewNodeSourceIndexer.Item(System.String,System.String,System.String)">
            <summary>
            设置当前表格行的数据源以添加子行。
            </summary>
            <param name="IdField">编码字段</param>
            <param name="parentIdField">父编码字段</param>
            <param name="parentIdValue">父编码值</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewNodeSourceIndexer.Item(System.String[])">
            <summary>
            设置当前表格行的数据源以添加子行(从当前表格行开始的顺序链数据形式)
            </summary>
            <param name="pathFields">路径字段数组</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewTextIndexer">
            <summary>
            单元格文本索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.Windows.Forms.DataGridViewCell)">
            <summary>
            获取或设置单元格的文本值
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.Windows.Forms.DataGridViewRow,System.Int32)">
            <summary>
            返回或者设置单元格的文本值
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnIndex">单元格的列索引</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.Int32,System.Windows.Forms.DataGridViewRow)">
            <summary>
            返回或者设置单元格的文本值
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnIndex">单元格的列索引</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            返回或者设置单元格的文本值
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.String,System.Windows.Forms.DataGridViewRow)">
            <summary>
            返回或者设置单元格的文本值
            </summary>
            <param name="row">单元格的行对象</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.Int32,System.Int32)">
            <summary>
            返回或者设置单元格的文本值
            </summary>
            <param name="rowIndex">单元格的行索引。</param>
            <param name="columnIndex">单元格的列索引。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.Int32,System.String)">
            <summary>
            返回或者设置单元格的文本值
            </summary>
            <param name="rowIndex">单元格的行索引。</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.String,System.Int32)">
            <summary>
            返回或者设置单元格的文本值
            </summary>
            <param name="rowIndex">单元格的行索引。</param>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.Int32)">
            <summary>
            返回或者设置当前选定行的单元格的文本值
            </summary>
            <param name="columnIndex">单元格的列索引。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewTextIndexer.Item(System.String)">
            <summary>
            返回或者设置当前选定行的单元格的文本值
            </summary>
            <param name="columnName">单元格的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewSourceIndexer">
            <summary>
            数据源索引器
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.AssignType">
            <summary>
            填充模式
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.AssignType.AutoColumnsInOrdinate">
            <summary>
            自动列顺序填充模式
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.AssignType.FixedColumnsInOrdinate">
            <summary>
            固定列顺序填充模式
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.AssignType.FixedColumnsCustom">
            <summary>
            固定列用户自定义填充模式(按DataPropertyName填充)
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.Item(System.Boolean)">
            <summary>
            赋值到表格的数据源(仅用于赋值，不进行数据源的绑定关系)。
            </summary>
            <param name="autoGenerateColumns">true表示按照数据源结构自动创建列(破坏对于表格所有列的定义)，false表示按列的DataPropertyName属性设置填充数据;(未设置DataPropertyName属性则按数据源结构的列顺序填充)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.Item(System.String,System.String,System.String,App.ControlLibrary.NodeRow)">
            <summary>
             折叠树视表格设置数据源(父子交叉列的数据源形式)
            </summary>
            <param name="IdField">编码字段</param>
            <param name="owningField">归属编码字段</param>
            <param name="owningRow">归属表格行</param>
            <param name="owningValue">归属编码值</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.Item(System.String,System.String,System.String)">
            <summary>
            折叠树视表格设置数据源(父子交叉列的数据源形式)
            </summary>
            <param name="idField">编码字段</param>
            <param name="owningField">归属编码字段</param>
            <param name="owningValue">归属编码值</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.Item(System.String[])">
            <summary>
             折叠树视表格设置数据源(从根表格行开始的顺序链数据形式)
            </summary>
            <param name="pathFields">路径字段数组</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.Item(App.ControlLibrary.NodeRow,System.String[])">
            <summary>
            折叠树视表格设置数据源(从父表格行开始的顺序链数据形式)
            </summary>
            <param name="pathFields">路径字段数组</param>
            <param name="owningNode">归属表格行</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.Item(System.String,System.String)">
            <summary>
             折叠树视表格设置数据源(从根表格行开始的顺序链数据形式)
            </summary>
            <param name="pathField">路径字符串表达式</param>
            <param name="delimiter">路径字符串定界符</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.Item(App.ControlLibrary.NodeRow,System.String,System.String)">
            <summary>
             折叠树视表格设置数据源(从根表格行开始的顺序链数据形式)
            </summary>
            <param name="owningNode">归属表格行</param>
            <param name="pathField">路径字符串表达式</param>
            <param name="delimiter">路径字符串定界符</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.AsTable(System.String)">
            <summary>
            数据源输出为数据表
            </summary>
            <param name="tableName">表名称</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.As``1">
            <summary>
            数据源输出为泛型类型
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.DataSource_DataTable(System.Data.DataTable,App.ControlLibrary.Indexers.DataGridViewSourceIndexer.AssignType)">
            <summary>
            DataTable数据源填充表格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.DataSource_IEnumerable(System.Collections.IEnumerable,App.ControlLibrary.Indexers.DataGridViewSourceIndexer.AssignType)">
            <summary>
            列表数据源填充表格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.PreRecursiveDataSource(System.String,System.String,System.String,System.Object,App.ControlLibrary.NodeRowsCollection)">
            <summary>
            父子交叉递归预处理
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.RecursiveDataSource(System.String,System.String,App.ControlLibrary.NodeRowsCollection,System.Data.DataRow[],System.Data.DataTable,App.ControlLibrary.BindingMapping)">
            <summary>
            父子关系递归数据源
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.RecursiveDataSource(System.String[],System.Int32,App.ControlLibrary.NodeRowsCollection,System.Data.DataRow[],App.ControlLibrary.BindingMapping)">
            <summary>
            顺序链 递归数据源
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewSourceIndexer.RecursiveDataSource(App.ControlLibrary.NodeRowsCollection,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String[],System.Data.DataRow}},App.ControlLibrary.BindingMapping)">
            <summary>
            顺序链 递归数据源
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewFooterValueIndexer">
            <summary>
            页脚单元格值索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterValueIndexer.Item(System.Int32)">
            <summary>
            设置或者获取页面脚本行的单元格值。
            </summary>
            <param name="columnIndex">列索引值(-1表示行头)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterValueIndexer.Item(System.String)">
            <summary>
            设置或者获取页面脚本行的单元格值。
            </summary>
            <param name="columnName">指定的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.ListBoxDataSourceIndexer">
            <summary>
            数据源索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListBoxDataSourceIndexer.Item(App.ControlLibrary.DataItem,App.ControlLibrary.TextFormat)">
            <summary>
            设置控件的数据源
            </summary>
            <param name="dataMapping">数据源字段映射管理器</param>
            <param name="formater">列表项文本显示格式化器</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListBoxDataSourceIndexer.Item(App.ControlLibrary.TextFormat,App.ControlLibrary.DataItem)">
            <summary>
            设置控件的数据源
            </summary>
            <param name="dataMapping">数据源字段映射管理器</param>
            <param name="formater">列表项文本显示格式化器</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListBoxDataSourceIndexer.Item(System.String,System.String,System.String,System.String)">
            <summary>
            设置控件的数据源
            </summary>
            <param name="text">列表项的文本对应字段</param>
            <param name="code">列表项的编码对应字段</param>
            <param name="spelling">列表项的附加码对应字段</param>
            <param name="extraCode">列表项的拼音助记码对应字段</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.ListBoxDataSourceIndexer.AsTable(System.String)">
            <summary>
            返回绑定到控件的数据源
            </summary>
            <param name="tableName">表名称</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.ListBoxDataSourceIndexer.As``1">
            <summary>
            返回绑定到控件的数据源
            </summary>
            <typeparam name="T">数据源的泛型类型</typeparam>
        </member>
        <member name="T:App.ControlLibrary.Indexers.ListViewCellBoundIndexer">
            <summary>
            CellBound索引器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.ListViewCellBoundIndexer.#ctor(App.ControlLibrary.ListView)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListViewCellBoundIndexer.Item(System.Int32,System.Int32)">
            <summary>
            返回列表项目的矩形边框的大小和位置
            </summary>
            <param name="rowIndex">行索引</param>
            <param name="columnIndex">列索引</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.ListViewColumnVisiable">
            <summary>
            数据视图控件列可视属性索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListViewColumnVisiable.Item(System.Windows.Forms.ColumnHeader)">
            <summary>
            根据列对象获取或者设置列的可视状态。
            </summary>
            <param name="column">指定的列对象</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListViewColumnVisiable.Item(System.String)">
            <summary>
            根据列名称获取或者设置列的可视状态。
            </summary>
            <param name="name">指定的列名称</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListViewColumnVisiable.Item(System.Int32)">
            <summary>
            根据列集合中指定索引获取或者设置列对象的可视状态。
            </summary>
            <param name="index">要从列集合中检索的列标题的索引。</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.ListViewDataSourceIndexer">
            <summary>
            数据源索引器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.ListViewDataSourceIndexer.#ctor(App.ControlLibrary.ListView)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListViewDataSourceIndexer.Item(System.String,System.String)">
            <summary>
            数据源
            </summary>
            <param name="itemField">显示的字段</param>
            <param name="keyValueField">键值字段</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListViewDataSourceIndexer.Item(System.String,System.String,System.String,System.String[])">
            <summary>
            数据源
            </summary>
            <param name="itemField">显示的字段</param>
            <param name="keyValueField">键值字段</param>
            <param name="imageFields">显示图标的字段</param>
            <param name="imageConditions">显示图标的条件数组</param>
            <remarks>
            <para>eg:ImageFields="空房"-索引0的图标，ImageFields＝"有人"-索引1的图标，ImageFields="预定"-索引2的图标</para>
            <para>ImageConditionArray设置为：{"空房","有人","预定"}</para>
            <para>注：必须设置ImageFields，显示图标的条件数组ImageConditionArray才有效</para>
            </remarks>
        </member>
        <member name="T:App.ControlLibrary.Indexers.ListViewRowStringIndexer">
            <summary>
            行数据表达式索引器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.ListViewRowStringIndexer.#ctor(App.ControlLibrary.ListView)">
            <summary>
            初始化列表项行文本索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListViewRowStringIndexer.Item(System.Windows.Forms.ListViewItem,System.String)">
            <summary>
            获取或设置行列表文本字符串。
            </summary>
            <param name="row">行列表项</param>
            <param name="delimiter">拆分字符串，默认为管道符号|。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.ListViewRowStringIndexer.Item(System.Int32,System.String)">
            <summary>
            获取指定行索引的行列表文本字符串
            </summary>
            <param name="index">行索引</param>
            <param name="delimiter">拆分字符串，默认为管道符号|。</param>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer">
            <summary>
            合并单元格索引器
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.MergeCellSetting">
            <summary>
            单元格合并设置
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.MergeCellSetting.Row">
            <summary>
            参与合并的单元格所属的表格行。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.MergeCellSetting.Cells">
            <summary>
            参与合并的单元格列表。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.MergeCellSetting.MergeText">
            <summary>
            单元格合并后显示的文本内容。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.#ctor(App.ControlLibrary.DataGridView)">
            <summary>
            初始化合并单元格索引器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Clear">
            <summary>
            清理已经合并的所有单元格合并设置
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Clear(System.Windows.Forms.DataGridViewCell)">
            <summary>
            移除指定单元格对应的合并单元格设置。
            </summary>
            <param name="mergedCell">参考的合并单元格(单元格合并组的任一单元格)。</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Clear(System.Windows.Forms.DataGridViewRow)">
            <summary>
            移除指定表格行对应的所有单元格合并。
            </summary>
            <param name="mergedCellsRow">需要移除单元格合并的表格行。</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.ClearInvalid">
            <summary>
            移除无线的单元格合并。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Add(System.String,System.Windows.Forms.DataGridViewCell[])">
            <summary>
            合并单元格(同一表格行)。
            </summary>
            <param name="mergeText">合并后的单元格显示文本。</param>
            <param name="cells">需要合并展示的单元格组(同一表格行)。</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Add(System.Windows.Forms.DataGridViewCell[])">
            <summary>
            合并单元格(同一表格行)。
            </summary>
            <param name="cells">需要合并展示的单元格组(同一表格行)。</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Add(System.Int32,System.String[])">
            <summary>
            合并单元格。
            </summary>
            <param name="rowIndex">需要合并单元格展示的表格行索引。</param>
            <param name="columnNames">列名称，缺省表示全部单元格</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Add(System.String,System.Int32,System.String[])">
            <summary>
            合并单元格。
            </summary>
            <param name="mergeText">合并后的单元格显示文本。</param>
            <param name="rowIndex">需要合并单元格展示的表格行索引。</param>
            <param name="columnNames">列名称，缺省表示全部单元格</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Add(System.Windows.Forms.DataGridViewRow,System.String[])">
            <summary>
            合并单元格。
            </summary>
            <param name="row">需要合并单元格展示的表格行。</param>
            <param name="columnNames">列名称，缺省表示全部单元格</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Add(System.Windows.Forms.DataGridViewRow[])">
            <summary>
            合并单元格
            </summary>
            <param name="rows">需要合并单元格展示的表格行列表。</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Add(System.String,System.Windows.Forms.DataGridViewRow,System.String[])">
            <summary>
            合并单元格。
            </summary>
            <param name="row">需要合并单元格展示的表格行。</param>
            <param name="mergeText">合并后的单元格显示文本。</param>
            <param name="columnNames">列名称，缺省表示全部单元格</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Item(System.Windows.Forms.DataGridViewCell)">
            <summary>
            根据合并的单元格获取单元格合并设置。
            </summary>
            <param name="mergedCell">参考的合并单元格(单元格合并组的任一单元格)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Item(System.Windows.Forms.DataGridViewRow)">
            <summary>
            根据合并的单元格所属表格行获取单元格合并设置。
            </summary>
            <param name="mergedCellsRow">单元格所属表格行。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.Count">
            <summary>
            单元格合并设置的数量
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewMergeCellsIndexer.GetEnumerator">
            <summary>
            获取循环访问的枚举器
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer">
            <summary>
            索引器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.AsTable(System.String)">
            <summary>
            返回绑定到控件的数据源
            </summary>
            <param name="tableName">表名称</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.As``1">
            <summary>
            返回绑定到控件的数据源
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.Item(System.String[])">
            <summary>
            设置数据源(从根节点开始的顺序链数据形式)或者获取数据源
            </summary>
            <param name="textFields">文本字段数组</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.Item(System.String,System.String[])">
            <summary>
            设置数据源(顺序链的数据形式)
            </summary>
            <param name="textFields">文本字段参数组</param>
            <param name="nameField">名称字段</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.Item(System.String,System.String,System.String[])">
            <summary>
            设置数据源(顺序链的数据形式)
            </summary>
            <param name="textFields">文本字段参数组</param>
            <param name="nameField">名称字段</param>
            <param name="tagField">Tag字段</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.Item(System.Windows.Forms.TreeNode,System.String,System.String[])">
            <summary>
            设置数据源(顺序链的数据形式)
            </summary>
            <param name="textFields">文本字段参数组</param>
            <param name="nameField">名称字段</param>
            <param name="fatherNode">父节点，省略表示从根节点开始。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.Item(System.Windows.Forms.TreeNode,System.String,System.String,System.String[])">
            <summary>
            设置数据源(顺序链的数据形式)
            </summary>
            <param name="textFields">文本字段参数组</param>
            <param name="nameField">名称字段</param>
            <param name="tagField">Tag字段</param>
            <param name="fatherNode">父节点，省略表示从根节点开始。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.Item(System.String,System.String,System.String,System.String)">
            <summary>
            设置数据源(父子交叉列的数据源形式)
            </summary>
            <param name="textFields">节点文本字段名称</param>
            <param name="nameField">节点名称字段名称</param>
            <param name="fatherNameField">父节点字段名称</param> 
            <param name="rootValue">起始的根节点值</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.Item(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            设置数据源(父子交叉列的数据源形式)
            </summary>
            <param name="textField">节点文本字段名称</param>
            <param name="nameField">节点名称字段名称</param>
            <param name="tagField">Tag字段名称</param>
            <param name="fatherNameField">父节点字段名称</param> 
            <param name="rootValue">起始的根节点值</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.Item(System.String,System.String,System.String,System.Windows.Forms.TreeNode)">
            <summary>
            设置数据源(父子交叉列的数据源形式)
            </summary>
            <param name="textField">节点文本字段名称</param>
            <param name="nameField">节点名称字段名称</param> 
            <param name="fatherNameField">父节点字段名称</param>
            <param name="fatherNode">父节点</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.Item(System.String,System.String,System.String,System.String,System.Windows.Forms.TreeNode)">
            <summary>
            设置数据源(父子交叉列的数据源形式)
            </summary>
            <param name="textField">节点文本字段名称</param>
            <param name="nameField">节点名称字段名称</param>
            <param name="tagField">Tag字段名称</param>
            <param name="fatherNameField">父节点字段名称</param>
            <param name="fatherNode">父节点</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.PreRecursiveSetDataSource(System.String,System.String,System.String,System.String,System.String,System.Object,System.Windows.Forms.TreeNodeCollection)">
            <summary>
            预处理父子关系数据源
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.TreeViewDataSourceIndexer.RecursiveSetDataSource(System.String,System.String,System.String,System.String,System.Windows.Forms.TreeNodeCollection,System.Data.DataRow[],System.Data.DataTable)">
            <summary>
            父子关系
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewFooterManager">
            <summary>
            页脚管理器
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Indexers.DataGridViewFooterManager.footerView">
            <summary>
            页脚表格
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterManager.Visible">
            <summary>
            是否显示页脚(行高不允许调整大小)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterManager.Item(System.Int32)">
            <summary>
            设置或者获取页面脚本行的单元格值。
            </summary>
            <param name="columnIndex">列索引值(-1表示行头)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterManager.Item(System.String)">
            <summary>
            设置或者获取页面脚本行的单元格值。
            </summary>
            <param name="columnName">指定的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterManager.Values">
            <summary>
            设置或者获取页面脚本行的单元格值。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterManager.OnBottom">
            <summary>
            页脚是否始终处于表格的底部。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterManager.ForeColor">
            <summary>
            页脚的前景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterManager.BackColor">
            <summary>
            页脚的背景色
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Indexers.DataGridViewFooterManager.FooterStyleIndexer">
            <summary>
            页脚单元格样式索引器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterManager.FooterStyleIndexer.Item(System.Int32)">
            <summary>
            设置或者获取页面脚本单元格的样式。
            </summary>
            <param name="columnIndex">列索引值(-1表示行头)。</param>
        </member>
        <member name="P:App.ControlLibrary.Indexers.DataGridViewFooterManager.FooterStyleIndexer.Item(System.String)">
            <summary>
            设置或者获取页面脚本行的单元格值。
            </summary>
            <param name="columnName">指定的列名称(包括列名称、数据属性名称、列标题三种形式均通用)。</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewFooterManager.CreateFooter">
            <summary>
            创建页脚表格
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewFooterManager.CreateFooterColumn(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            创建页脚列
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewFooterManager.CreateFooterColumnStyle(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            创建页脚列样式
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewFooterManager.AdaptiveFootVirtualRow">
            <summary>
            调整页脚虚拟行
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewFooterManager.AdaptiveFootGridSize">
            <summary>
            调整匹配页脚表格尺寸
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewFooterManager.GetCellWorkareaHeight(System.Boolean)">
            <summary>
            获取单元格工作区域高度(包括列头，不包括滚动条)。
            </summary>
            <param name="includeBackground">True包括背景工作区空白部分，否则表示仅单元格部分。</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewFooterManager.CorrectAutoSizeColumnWidth(System.Int32,System.Windows.Forms.DataGridViewAutoSizeColumnMode)">
            <summary>
            修正自动模式列宽度
            </summary>
            <param name="index">列索引</param>
            <param name="autoSizeMode">列自动模式</param>
        </member>
        <member name="M:App.ControlLibrary.Indexers.DataGridViewFooterManager.CorrectColumnDefaultCellStyle(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            修正列默认单元格样式
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Label">
            <summary>
            标签控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Label.EnterSendTab">
            <summary />
        </member>
        <member name="M:App.ControlLibrary.Label.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.Label.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应。
            </summary>
            <param name="performEvent">True表示立即恢复所有挂起，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.Label.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.SendTab(System.Boolean)">
            <summary />
        </member>
        <member name="P:App.ControlLibrary.Label.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Label.Texts">
            <summary>
            与该控件关联的文本(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Label.AutoSize">
            <summary>
            自动调整控件的大小以完整显示其内容
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Label.BackColor">
            <summary>
            控件的背景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Label.BorderStyle">
            <summary>
            指示控件的边框样式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Label.ShowBorder">
            <summary>
            显示视觉效果边框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.OnHandleCreated(System.EventArgs)">
            <summary>
            句柄创建事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.OnSizeChanged(System.EventArgs)">
            <summary>
            尺寸改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            控件重绘事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Label.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            控件重绘背景事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ListBox">
            <summary>
            列表项目控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.OnHandleCreated(System.EventArgs)">
            <summary>
            句柄创建事件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.EnterSendTab">
            <summary>
            回车自动发送Tab键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.Count">
            <summary>
            列表框中的列表项目数量
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.Item(System.Int32)">
            <summary>
            获取或者设置指定索引位置处的列表项(不改变当前索引)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.Item(System.String)">
            <summary>
            获取或者设置指定编码对应的列表项(不改变当前索引)。
            </summary>
            <param name="code">列表项编码</param>
        </member>
        <member name="P:App.ControlLibrary.ListBox.SelectedIndex">
            <summary>
            返回或者设置控件的选定索引，触发SelectedIndexChanged事件。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.SelectedIndexes">
            <summary>
            设置控件的选定索引(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.FormatInfo">
            <summary>
            列表文件格式化器
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.DataMapping">
            <summary>
            数据源字段映射
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.Text">
            <summary>
            返回或者设置控件中显示的文本
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.Texts">
            <summary>
            返回或者设置控件中显示的文本(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.Code">
            <summary>
            获取或者设置组合框当前索引位置处的编码
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.Codes">
            <summary>
            获取或者设置组合框当前索引位置处的编码(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.ExtraCode">
            <summary>
            获取或者设置组合框当前索引位置处的扩展码
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.ExtraCodes">
            <summary>
            获取或者设置组合框当前索引位置处的扩展码(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.ImeMode">
            <summary>
            获取或设置控件的输入法编辑器 (IME) 模式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.DataSources">
            <summary>
            设置控件的数据源
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.DataSource">
            <summary>
            获取或设置列表的数据源
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.IndexOf(System.String)">
            <summary>
            由列表的编码返回控件的列表项目索引，不改变当前选定索引。
            </summary>
            <param name="code">列表项目的编码</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.IndexOfText(System.String)">
            <summary>
            由列表项的文本值返回控件的列表项目索引。
            </summary>
            <param name="text">列表项的文本，错误的文本返回-1。</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.Remove(System.Int32)">
            <summary>
            删除指定索引的列表项目
            </summary>
            <param name="index">指定的索引，省略表示当前选定列表项目。</param>
            <returns>删除成功返回True，否则返回False。</returns>
        </member>
        <member name="M:App.ControlLibrary.ListBox.AddItem(System.String,System.String,System.String,System.String)">
            <summary>
            追加新列表项目
            </summary>
            <param name="text">项目名称</param>
            <param name="code">项目编码</param>
            <param name="spelling">项目助记码</param>
            <param name="extraCode">项目扩展码</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.AddItem(App.ControlLibrary.DataItem)">
            <summary>
            追加新列表项目
            </summary>
            <param name="data">数据实体</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.EditItem(System.Int32,App.ControlLibrary.DataItem)">
            <summary>
            修改指定列表索引的列表项目
            </summary>
            <param name="index">列表索引</param>
            <param name="data">修改数据</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.EditItem(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            修改指定列表索引的列表项目
            </summary>
            <param name="index">列表索引</param>
            <param name="text">项目名称</param>
            <param name="code">项目编码</param>
            <param name="spelling">项目助记码</param>
            <param name="extraCode">项目扩展码</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.InsertItem(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            插入新列表项目
            </summary>
            <param name="index">插入的位置索引</param>
            <param name="text">项目名称</param>
            <param name="code">项目编码</param>
            <param name="spelling">项目助记码</param>
            <param name="extraCode">项目扩展码</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.InsertItem(System.Int32,App.ControlLibrary.DataItem)">
            <summary>
            插入新列表项目
            </summary>
            <param name="data">插入的数据</param>
            <param name="index">插入的位置索引</param>
        </member>
        <member name="M:App.ControlLibrary.ListBox.Clear">
            <summary>
            清除所有的列表项目
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ListBox.KeyDown">
            <summary>
            键盘按键按下事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ListBox.SelectedIndexChanged">
            <summary>
            列表选项的索引改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            键盘按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            选择索引改变事件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListBox.DataManager">
            <summary/>
        </member>
        <member name="P:App.ControlLibrary.ListBox.DataBindings">
            <summary/>
        </member>
        <member name="M:App.ControlLibrary.ListBox.ProgressBegin">
            <summary>
            开始进度条展示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListBox.ProgressFinally">
            <summary>
            结束进度条展示。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ListView">
            <summary>
            表示 Windows 列表视图控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.EnterSendTab">
            <summary>
            设置或者返回如何回车自动发送Tab键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ListView.ColumnClick">
            <summary>
            列头单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            列头单击事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ListView.CountChanged">
            <summary>
            列表项目总行数改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnCountChanged(App.ControlLibrary.CountChangedEventArgs)">
            <summary>
            激活列表项目总行数改变事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ListView.ItemClick">
            <summary>
            列表项目单击事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.ListView.ItemDoubleClick">
            <summary>
            列表项目双击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnItemClick(App.ControlLibrary.ListViewItemEventArgs)">
            <summary>
            激活列表项目单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnItemDoubleClick(App.ControlLibrary.ListViewItemEventArgs)">
            <summary>
            激活
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.Count">
            <summary>
            列表项目总行数
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.SelectedCount">
            <summary>
            选择的列表项目总行数
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.SelectedItem">
            <summary>
            当前选定的列表项目
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.GridLines">
            <summary>
            在包含控件中项及其子项的行和列之间是否显示网格线。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.View">
            <summary>
            获取或设置项在控件中的显示方式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.FullRowSelect">
            <summary>
            单击某项是否选择其所有子项。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.HideSelection">
            <summary>
            当控件没有焦点时，该控件中选定的项是否保持突出显示。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.ColumnCount">
            <summary>
            返回列表视图的总列数
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.RowCount">
            <summary>
            返回列表视图的总行数，等同于Count。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.CurrentRow">
            <summary>
            获取当前列表项
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.MultiSelect">
            <summary>
            是否可以选择多个项。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.ColumnVisible">
            <summary>
            视图列的可视状态。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.RowString">
            <summary>
            获取或设置列表项目的行列表文本字符串。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.CellBounds">
            <summary>
            返回列表项目的矩形边框的位置和大小。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.Item(System.Int32,System.Int32)">
            <summary>
            获取知道行列索引的子项。
            </summary>
            <param name="rowIndex">行索引</param>
            <param name="columnIndex">列索引</param>
        </member>
        <member name="P:App.ControlLibrary.ListView.Item(System.Int32,System.String)">
            <summary>
            返回或者设置指定行索引、列名称的列表子项
            </summary>
            <param name="rowIndex">行索引</param>
            <param name="columnName">列名称</param>
        </member>
        <member name="P:App.ControlLibrary.ListView.Item(System.Int32)">
            <summary>
            返回或者设置指定列索引的列表子项
            </summary>
            <param name="columnIndex">列索引</param>
        </member>
        <member name="P:App.ControlLibrary.ListView.Item(System.String)">
            <summary>
            返回或者设置指定列名称的列表子项
            </summary>
            <param name="columnName">列名称</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.EditRow(System.Windows.Forms.ListViewItem,System.String,System.String)">
            <summary>
            修改列表项目
            </summary>
            <param name="row">被修改列表项目</param>
            <param name="value">需要修改的列表行文本</param>
            <param name="delimiter">拆分字符串，默认为管道符号|。</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.EditRow(System.Int32,System.String,System.String)">
            <summary>
            修改列表项目
            </summary>
            <param name="rowIndex">被修改列表项索引</param>
            <param name="value">需要修改的列表行文本</param>
            <param name="delimiter">拆分字符串，默认为管道符号|。</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.Add(System.Windows.Forms.ListViewItem)">
            <summary>
            追加列表项目
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.Add(System.String,System.String)">
            <summary>
            追加列表项目
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.Insert(System.Int32,System.Windows.Forms.ListViewItem)">
            <summary>
            插入列表项目
            </summary>
            <param name="index">插入的位置</param>
            <param name="row">插入的列表项</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.Insert(System.Int32,System.String,System.String)">
            <summary>
            插入列表项目
            </summary>
            <param name="index">插入的位置</param>
            <param name="value">插入的列表项字符串表达式</param>
            <param name="delimiter">字符表达式拆分符</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.Clear">
            <summary>
            清除所有的列表项目
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.Remove">
            <summary>
            删除当前选定的列表项目
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.Remove(System.Windows.Forms.ListViewItem)">
            <summary>
            删除指定的列表项目
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.Remove(System.Int32)">
            <summary>
            删除指定的列表项目
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.ToArray">
            <summary>
            当前所有列表项目输出为二维数组
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.SumValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            合计指定列的数值之和
            </summary>
            <param name="columnIndex">指定的列索引</param>
            <param name="beginRowIndex">合计的开始行索引(缺省表示从首行开始)</param>
            <param name="finallyRowIndex">合计的结束行索引(缺省表示从尾行开始)</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.SumValue(System.String,System.Int32,System.Int32)">
            <summary>
            合计指定列的数值之和
            </summary>
            <param name="columnName">指定的列名称</param>
            <param name="beginRowIndex">合计的开始行索引</param>
            <param name="finallyRowIndex">合计的结束行索引</param>
        </member>
        <member name="M:App.ControlLibrary.ListView.Find(System.Predicate{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件的所有项集合中查找第一个符合条件的列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.FindAll(System.Predicate{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件集合中查找所有符合条件的列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.ForEach(System.Action{System.Windows.Forms.ListViewItem})">
            <summary>
            在列表视图控件集合中循环遍历所有列表项。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.ToArray``1(System.Func{System.Windows.Forms.ListViewItem,``0})">
            <summary>
            在列表视图控件的所有项集合中输出为数组项。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ListView.DataSource">
            <summary>
            设置或者返回列表视图的数据源，支持数据表、数据视图、二维数组、List列表四种方式。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            键盘事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            选择索引改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnClick(System.EventArgs)">
            <summary>
            鼠标单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnDoubleClick(System.EventArgs)">
            <summary>
            鼠标双击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)">
            <summary>
            列宽改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)">
            <summary>
            绘制列头
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.ProgressBegin">
            <summary>
            开始进度条展示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ListView.ProgressFinally">
            <summary>
            结束进度条展示。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Panel">
            <summary>
            容器控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Panel.#ctor">
            <summary>
            初始化容器控件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Panel.ShowBorder">
            <summary>
            显示视觉效果边框
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Panel.BorderStyle">
            <summary>
            指示控件的边框样式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Panel.Padding">
            <summary>
            获取或设置控件内距离边框的空白像素数。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Panel.OnSizeChanged(System.EventArgs)">
            <summary>
            控件尺寸改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Panel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件背景事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Panel.ProgressBegin">
            <summary>
            开始进度条展示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Panel.ProgressFinally">
            <summary>
            结束进度条展示。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.PictureBox">
            <summary>
            表示用于显示图像的 Windows 图片框控件。
            </summary>
            <remarks>实现了控件的键盘事件。</remarks>
        </member>
        <member name="M:App.ControlLibrary.PictureBox.OnClick(System.EventArgs)">
            <summary>
            激活控件的 Click 事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PictureBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            处理命令键。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PictureBox.ShowBorder">
            <summary>
            显示视觉效果边框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PictureBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件背景事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.PopupStrip">
            <summary>
            自定义的一个弹出页
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.#ctor(System.Windows.Forms.Control)">
            <summary>
            初始化弹出页
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Dispose(System.Boolean)">
            <summary>
            销毁弹出页
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.Resizable">
            <summary>
            控件是否可以调整大小
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.Content">
            <summary>
            弹出的内容控件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.ShowingAnimation">
            <summary>
            展开弹出页的动画效果。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.HidingAnimation">
            <summary>
            关闭弹出页的动画效果。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.AnimationDuration">
            <summary>
            弹出页动画的持续时间长度(单位毫秒:默认100)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.FocusOnOpen">
            <summary>
            当打开时是否设置内容控件为焦点
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.AcceptAlt">
            <summary>
            当按Alt键时是否关闭弹出页
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.MinimumSize">
            <summary>
            弹出页的最小尺寸
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.MaximumSize">
            <summary>
            弹出页的最大尺寸
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.Focused">
            <summary>
            获取弹出页是否具有输入焦点。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show">
            <summary>
            显示一个包含特殊控件的弹出页。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show(System.Drawing.Point)">
            <summary>
            在相对于指定的屏幕位置显示一个包含特殊控件的弹出页。
            </summary>
            <param name="screenLocation">屏幕左上角的水平和垂直位置，以像素为单位。</param>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show(System.Int32,System.Int32)">
            <summary>
            在相对于指定的屏幕位置显示一个包含特殊控件的弹出页。
            </summary>
            <param name="x">水平屏幕坐标（以像素为单位）。</param>
            <param name="y">垂直屏幕坐标（以像素为单位）。</param>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show(System.Drawing.Point,System.Windows.Forms.ToolStripDropDownDirection)">
            <summary>
            在相对于指定的控件位置并以相对于父控件的指定方向显示一个包含特殊控件的弹出页。
            </summary>
            <param name="position">引用控件左上角的水平和垂直位置，以像素为单位。</param>
            <param name="direction">弹出页的展示方向</param>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show(System.Windows.Forms.Control)">
            <summary>
            显示一个包含特殊控件的弹出页。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            相对于指定的控件位置显示一个包含特殊控件的弹出页。
            </summary>
            <param name="control">弹出位置的参考点的控件</param>
            <param name="position">引用控件左上角的水平和垂直位置，以像素为单位。</param>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            相对于指定的控件位置显示一个包含特殊控件的弹出页。
            </summary>
            <param name="control">弹出位置的参考点的控件</param>
            <param name="x">控件的水平屏幕坐标（以像素为单位）。</param>
            <param name="y">控件的垂直屏幕坐标（以像素为单位）。</param>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.ToolStripDropDownDirection)">
            <summary>
            相对于指定位置的指定控件并以相对于父控件的指定方向显示一个包含特殊控件的弹出页。
            </summary>
            <param name="control">弹出位置的参考点的控件</param>
            <param name="position">引用控件左上角的水平和垂直位置，以像素为单位。</param>
            <param name="direction">弹出页的展示方向</param>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show(System.Drawing.Rectangle)">
            <summary>
            显示一个包含特殊控件的弹出页。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.Show(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            显示一个包含特殊控件的弹出页。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.OnOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            弹出页即将打开事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.OnOpened(System.EventArgs)">
            <summary>
            弹出页打开事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.OnClosed(System.Windows.Forms.ToolStripDropDownClosedEventArgs)">
            <summary>
            弹出页关闭事件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.PopupStrip.CreateParams">
            <summary>
            创建参数
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.WndProc(System.Windows.Forms.Message@)">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            处理对话框键。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.OnVisibleChanged(System.EventArgs)">
            <summary>
            弹出页的可视属性改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.OnSizeChanged(System.EventArgs)">
            <summary>
            大小改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.OnFontChanged(System.EventArgs)">
            <summary>
            字体改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.ProcessResizing(System.Windows.Forms.Message@)">
            <summary>
            Processes the resizing messages.
            </summary>
            <param name="m">The message.</param>
            <returns>true, if the WndProc method from the base class shouldn't be invoked.</returns>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.PaintSizeGrip(System.Windows.Forms.PaintEventArgs)">
            <summary>
            绘制一个可以调整控件大小的手柄
            </summary>
        </member>
        <member name="M:App.ControlLibrary.PopupStrip.UpdateRegion">
            <summary>
            更新与控件关联的窗口区域。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ProgressBar">
            <summary>
            进度条控件(只有执行了 ProgressBar.Start() 方法才能在用户界面显示出来。)
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ProgressBar.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ProgressBar.Value">
            <summary>
            进度条的值(多线程是安全的)
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ProgressBar.MarqueeAnimationSpeed">
            <summary>
            获取或设置进度块在进度栏内滚动所用的时间段，以毫秒为单位。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ProgressBar.Start">
            <summary>
            开始进度(线程安全)
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ProgressBar.Stop">
            <summary>
            停止进度(线程安全)
            </summary>
        </member>
        <member name="T:App.ControlLibrary.RadioButton">
            <summary>
            单选项控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.#ctor">
            <summary>
            初始化后单选项控件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RadioButton.EnterSendTab">
            <summary>
            回车自动发送Tab键的模式
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RadioButton.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            控件重绘
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件背景
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnCheckedChanged(System.EventArgs)">
            <summary>
            选择值改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnClick(System.EventArgs)">
            <summary>
            鼠标单击事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            控件键盘事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            命令键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标单击
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标弹起事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标双击事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.RadioButton.PreviewCheckedChanged">
            <summary>
            当前选定状态改变之前发生的事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.OnPreviewCheckedChanged(System.ComponentModel.CancelEventArgs)">
            <summary>
            激活当前选定状态改变之前发生的事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RadioButton.PerformCheckedChanged(System.EventArgs)">
            <summary>
            激活复选状态改变事件 CheckedChanged。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RadioButton.ReadOnly">
            <summary>
            只读属性(控件不能通过用户操纵来改变选定状态)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RadioButton.Cursor">
            <summary>
            鼠标指针的样式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RadioButton.Checkeds">
            <summary>
            单选框选择状态(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RadioButton.CheckedRadioButton">
            <summary>
            获取当前控件所在容器中被选中的单选项控件。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Separator">
            <summary>
            分割线
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Separator.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Separator.Orientation">
            <summary>
            分割线方向
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Separator.LineColor">
            <summary>
            分割线颜色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Separator.ShadowColor">
            <summary>
            阴影线颜色
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Separator.OnSizeChanged(System.EventArgs)">
            <summary>
            控件尺寸改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Separator.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件背景
            </summary>
        </member>
        <member name="T:App.ControlLibrary.SplitContainer">
            <summary>
            表示一个由可移动条组成的控件，该可移动条将容器的显示区域分成两个大小可调的面板。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SplitContainer.ShowBorder1">
            <summary>
            Panel1的显示视觉效果边框
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SplitContainer.ShowBorder2">
            <summary>
            Panel2的显示视觉效果边框
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SplitContainer.BorderStyle">
            <summary>
            指示控件的边框样式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SplitContainer.SplitterColor">
            <summary>
            分割栏的颜色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SplitContainer.SplitterWidth">
            <summary>
            获取或设置拆分器的宽度（以像素为单位）。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SplitContainer.SplitterMargin">
            <summary>
            分割拖拽栏的边距
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SplitContainer.Orientation">
            <summary>
            分割拖拽栏的方向
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SplitContainer.Panel1Collapsed">
            <summary>
            获取或设置一个值，该值确定 Panel1 是折叠的还是展开的。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.SplitContainer.Panel2Collapsed">
            <summary>
            获取或设置一个值，该值确定 Panel2 是折叠的还是展开的。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.MinSizeSetter(System.Boolean,System.Int32)">
            <summary>
            设置容器Panel的最小尺寸
            </summary>
        </member>
        <member name="E:App.ControlLibrary.SplitContainer.SplitterWidthChanged">
            <summary>
            分割拖拽栏的宽度改变时发生事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnSplitterWidthChanged(System.EventArgs)">
            <summary>
            激活分割拖拽栏的宽度改变时发生事件。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.SplitContainer.PanelCollapsed">
            <summary>
            面板折叠事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnPanelCollapsed(App.ControlLibrary.PanelCollapsedEventArgs)">
            <summary>
            激活面板折叠事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.SplitContainer.SplitterMoved">
            <summary>
            当移动拆分器控件时发生。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.SplitContainer.SplitterMoving">
            <summary>
            当拆分器控件正处在移动过程中发生。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnSplitterMoving(System.Windows.Forms.SplitterCancelEventArgs)">
            <summary>
            引发 SplitterMoving 事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnSplitterMoved(System.Windows.Forms.SplitterEventArgs)">
            <summary>
            引发 SplitterMoved 事件。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.SplitContainer.PaintSplitter">
            <summary>
            重绘拆分器矩形区域事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnPaintSplitter(System.Windows.Forms.PaintEventArgs)">
            <summary>
            激活重绘拆分器矩形区域事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘背景
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnSizeChanged(System.EventArgs)">
            <summary>
            控件尺寸改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            重新布局事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.WndProc(System.Windows.Forms.Message@)">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.ProcessTabKey(System.Boolean)">
            <summary>
            跳格键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标按下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标移动
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SplitContainer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标弹起
            </summary>
        </member>
        <member name="T:App.ControlLibrary.TextBox">
            <summary>
            文本输入框控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.EnterSendTab">
            <summary>
            回车自动发送Tab键的模式
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="M:App.ControlLibrary.TextBox.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.TextBox.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.TextBox.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.ProgressBegin">
            <summary>
            开始进度条展示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.ProgressFinally">
            <summary>
            结束进度条展示。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.Texts">
            <summary>
            设置文本框的文本值(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.Length">
            <summary>
            文本字符串的长度
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.FocusSelectAll">
            <summary>
            输入文本框得到焦点是是否全部选定状态
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.PasswordChar">
            <summary>
            控件中的呈现密码的字符。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.ImeType">
            <summary>
            键盘可以输入字符的类型
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.ImeMode">
            <summary>
            获取或设置控件的输入法编辑器 (IME) 模式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.WatermarkColor">
            <summary>
            水印文本前景色
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.WatermarkText">
            <summary>
            水印文本内容
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.WatermarkFont">
            <summary>
            水印文本绘制字体。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.DataBindings">
            <summary/>
        </member>
        <member name="M:App.ControlLibrary.TextBox.Insert(System.Int32,System.String)">
            <summary>
            插入字符串
            </summary>
            <param name="startIndex">插入的位置索引</param>
            <param name="value">将要插入的字符串值</param>
            <returns>返回插入后的文本字符串</returns>
        </member>
        <member name="M:App.ControlLibrary.TextBox.Insert(System.String)">
            <summary>
            在文件编辑框的当前光标位置插入字符串
            </summary>
            <param name="value">将要插入的字符串值</param>
        </member>
        <member name="M:App.ControlLibrary.TextBox.InsertLine(System.String)">
            <summary>
            在文件编辑框的最后位置插入一行字符。
            </summary>
            <param name="value">需要插入的字符。</param>
        </member>
        <member name="M:App.ControlLibrary.TextBox.Remove(System.Int32,System.Int32)">
            <summary>
            从指定的位置删除指定数量的字符。
            </summary>
            <param name="startIndex">指定的位置</param>
            <param name="count">指定删除的字符数量。</param>
        </member>
        <member name="M:App.ControlLibrary.TextBox.Remove(System.Int32)">
            <summary>
            删除从指定位置开始的所有字符。
            </summary>
            <param name="startIndex">指定的位置</param>
        </member>
        <member name="M:App.ControlLibrary.TextBox.PerformTextChanged(System.EventArgs)">
            <summary>
            激活文本值改变事件 OnTextChanged。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.PerformKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            激活控件的 KeyDown 事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.OnHandleCreated(System.EventArgs)">
            <summary>
            创建句柄
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            键盘事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            在控件有焦点的情况下按下键时发生
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            键盘弹起事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.OnTextChanged(System.EventArgs)">
            <summary>
            文本改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.OnEnter(System.EventArgs)">
            <summary>
            获取焦点事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.OnDrawWatchmark(System.Drawing.Graphics)">
            <summary>
            绘制水印文本
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.Unredo.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.Unredo.Start">
            <summary>
            光标位置
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.Unredo.Length">
            <summary>
            选择长度
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.CanUndo">
            <summary>
            在文本框控件中能否撤消前一操作。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextBox.CanRedo">
            <summary>
            在文本框控件中能否重做前一操作。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.Undo">
            <summary>
            撤消文本框中的上一个编辑操作。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.Redo">
            <summary>
            重做文本框中的上一次编辑操作。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.ClearUndo">
            <summary>
            从该文本框的撤消缓冲区中清除关于最近操作的信息。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextBox.ClearRedo">
            <summary>
            从该文本框的重做缓冲区中清除关于最近操作的信息。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.TreeView">
            <summary>
            显示标记项的分层集合控件，每个标记项用一个 Node 来表示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.DrawMode">
            <summary>
            获取或设置绘制控件的模式。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.EnterSendTab">
            <summary>
            设置或者返回如何回车自动发送Tab键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="P:App.ControlLibrary.TreeView.RedrawSuspender">
            <summary>
            控件重绘挂起器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.TreeView.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            绘制前景
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            绘制背景
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.SuspendEvents">
            <summary>
            临时挂起控件事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.ResumeEvents(System.Boolean)">
            <summary>
            恢复临时挂起的事件响应。
            </summary>
            <param name="immed">立即恢复事件响应</param>
        </member>
        <member name="M:App.ControlLibrary.TreeView.EventSuspending">
            <summary>
            临时挂起控件的事件响应,并在销毁时自动恢复事件的响应。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.LayoutSuspending">
            <summary>
            临时挂起控件的布局响应，并在销毁时自动恢复挂起的布局响应。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.ProgressBegin">
            <summary>
            开始进度条展示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.ProgressFinally">
            <summary>
            结束进度条展示。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.AutoDragDrop">
            <summary>
            是否按指定的模式自动接受用户拖放到它上面的数据。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.FormatInfo">
            <summary>
            文件显示的呈现格式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.SelectedNode">
            <summary>
            获取或者设置被选定的节点
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.SelectedNodes">
            <summary>
            获取或者设置被选定的节点(忽略事件的激活)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.IsExpanded">
            <summary>
            根节点是否全部展开状态
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.IsCollapsed">
            <summary>
            根节点是否全部折叠状态
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.HideSelection">
            <summary>
            用以指示选定的树节点是否即使在树视图已失去焦点时仍会保持突出显示。
            </summary>
            <returns>如果选定的树节点在树视图已失去焦点时不突出显示，则为 true；否则为 false。默认为 false。</returns>
        </member>
        <member name="P:App.ControlLibrary.TreeView.HotTracking">
            <summary>
            用以指示当鼠标指针移过树节点标签时，树节点标签是否具有超链接的外观。
            </summary>
            <returns>如果当鼠标指针移过树节点标签时，树节点标签具有超链接的外观，则为 true；否则为 false。默认为 false。</returns>
        </member>
        <member name="P:App.ControlLibrary.TreeView.AutoCheckRelation">
            <summary>
            当用户选择节点复选框时是否自动设置关联的父子节点的复选框选择状态。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.CheckBoxes">
            <summary>
            获取或设置一个值，用以指示是否在树视图控件中的树节点旁显示复选框。
            </summary>
            <returns>如果在树视图控件中的每个树节点旁显示复选框，则为 true；否则为 false。默认值为 false。</returns>
        </member>
        <member name="P:App.ControlLibrary.TreeView.CheckedNodes">
            <summary>
            获取所有选择的子节点集合(子节点非全选的不视为选定节点)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.ImeMode">
            <summary>
            获取或设置控件的输入法编辑器 (IME) 模式。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.TreeView.NodesCountChanged">
            <summary>
            节点总数改变事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnNodesCountChanged(App.ControlLibrary.NodesCountChangeEventArgs)">
            <summary>
            激活节点总数改变事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.TreeView.Selected">
            <summary>
            选择节点时激活的事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnSelected(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            选择节点时激活的事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            鼠标按下事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.TreeView.DragDrop">
            <summary>
            在拖放操作放下时发生的事件。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.TreeView.DragEnter">
            <summary>
            拖放操作进入控件时发生事件
            </summary>
        </member>
        <member name="E:App.ControlLibrary.TreeView.DragCompleted">
            <summary>
            拖放操作完成时发生的事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnDragDrop(App.ControlLibrary.TreeViewDragEventArgs)">
            <summary>
            激活拖放操作放下时发生的事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnDragCompleted(App.ControlLibrary.TreeViewDragEventArgs)">
            <summary>
            激活拖放操作完成时发生的事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnDragEnter(App.ControlLibrary.TreeViewDragEventArgs)">
            <summary>
            激活拖放操作进入控件时发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            节点拖拽事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            拖拽进入控件发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            拖拽进入控件边距发生事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            拖拽完成放下事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            选择之后事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            消息处理
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnDrawNode(System.Windows.Forms.DrawTreeNodeEventArgs)">
            <summary>
            重绘节点
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            激活KeyDown事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.OnGotFocus(System.EventArgs)">
            <summary>
            获取焦点事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.PerformSelected(System.Windows.Forms.TreeNode)">
            <summary>
            生成 Selected 事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.PerformSelected(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            生成 Selected 事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.PerformSelected">
            <summary>
            生成 Selected 事件。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.DataSource">
            <summary>
            获取绑定到控件的数据源
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TreeView.DataSources">
            <summary>
            设置绑定到控件的数据源
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TreeView.ComputeMaxDisplayHeight(System.Int32)">
            <summary>
            计算控件消息指定高度的最大可以呈现的高度。
            </summary>
            <param name="maxHeight">参考的最大显示高度</param>
        </member>
        <member name="T:App.ControlLibrary.AnimationsEditorControl">
            <summary>
            动画类型编辑器控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.AnimationsEditorControl.#ctor(App.ControlLibrary.Animations)">
            <summary>
            初始化动画类型编辑器控件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.AnimationsEditorControl.Value">
            <summary>
            编辑器值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.AnimationsEditorControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            处理对话键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.AnimationsEditorControl.OnLeave(System.EventArgs)">
            <summary>
            离开事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.AnimationsEditorControl.OnLoad(System.EventArgs)">
            <summary>
            加载事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.AnimationsEditor">
            <summary>
            动画类型编辑器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.AnimationsEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取编辑器类型
            </summary>
        </member>
        <member name="M:App.ControlLibrary.AnimationsEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            编辑值
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ImeTypeEditorControl">
            <summary>
            键盘输入字符类型编辑器控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ImeTypeEditorControl.#ctor(App.ControlLibrary.ImeType)">
            <summary>
            初始化键盘输入字符类型编辑器控件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.ImeTypeEditorControl.Value">
            <summary>
            编辑器值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ImeTypeEditorControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            处理对话键
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ImeTypeEditorControl.OnLeave(System.EventArgs)">
            <summary>
            离开事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ImeTypeEditorControl.OnLoad(System.EventArgs)">
            <summary>
            加载事件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ImeTypeEditor">
            <summary>
            键盘输入字符类型编辑器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ImeTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取编辑器类型
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ImeTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            编辑值
            </summary>
        </member>
        <member name="T:App.ControlLibrary.BorderEditorControl">
            <summary>
            边框编辑器控件
            </summary>
        </member>
        <member name="P:App.ControlLibrary.BorderEditorControl.Value">
            <summary>
            编辑器值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.BorderEditorControl.#ctor(App.ControlLibrary.BorderType)">
            <summary>
            初始化边框编辑器控件
            </summary>
        </member>
        <member name="T:App.ControlLibrary.BorderEditor">
            <summary>
            边框编辑器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.BorderEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取编辑器类型
            </summary>
        </member>
        <member name="M:App.ControlLibrary.BorderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            编辑值
            </summary>
        </member>
        <member name="T:App.ControlLibrary.WebBrowser">
            <summary>
            Web浏览器控件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.Load(System.String)">
            <summary>
            根据文件Html格式字符串加载浏览器文档,并且返回Html文档。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.RedrawSuspending">
            <summary>
            恢复控件正常的界面重绘，并在销毁时自动恢复界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            绘制前景
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            绘制背景
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.ProgressBegin">
            <summary>
            开始进度条展示。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.ProgressFinally">
            <summary>
            结束进度条展示。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.WebBrowser.UrlString">
            <summary>
            获取或者设置加载当前网页文档的URL地址字符。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.WebBrowser.Insulate">
            <summary>
            返回或者设置隔离文档加载完毕事件属性
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.Refresh">
            <summary>
            刷新当前文档
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.OnDocumentCompleted(System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
            <summary>
            文档加载完毕事件
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.Filter(System.String,System.String,System.Windows.Forms.HtmlElement)">
            <summary>
            页面过滤器
            </summary>
            <param name="http">需要过滤的网页地址</param>
            <param name="keywords">页面文档中包含的关键字符串</param>
            <param name="element">页面文档中包含关键字符串的元素对象，如果为空则表示全文档查找关键字。</param>
            <returns>符合过滤条件的返回True，否则返回False。</returns>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.Filter(System.String,System.String,System.String)">
            <summary>
            页面过滤器
            </summary>
            <param name="http">需要过滤的网页地址</param>
            <param name="keywords">页面文档中包含的关键字符串</param>
            <param name="keyId">页面文档中包含关键字符串的元素ID或者名称</param>
            <returns>符合过滤条件的返回True，否则返回False。</returns>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.Filter(System.String,System.String,System.Int32)">
            <summary>
            页面过滤器
            </summary>
            <param name="http">需要过滤的网页地址</param>
            <param name="keywords">页面文档中包含的关键字符串</param>
            <param name="keyIndex">页面文档中包含关键字符串的元素索引</param>
            <returns>符合过滤条件的返回True，否则返回False。</returns>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.Filter(System.String,System.String,System.String[])">
            <summary>
            页面过滤器
            </summary>
            <param name="http">需要过滤的网页地址</param>
            <param name="keywords">页面文档中包含的关键字符串</param>
            <param name="tagNames">页面文档中包含关键字符串的元素Tag标记链数组</param>
            <returns>符合过滤条件的返回True，否则返回False。</returns>
        </member>
        <member name="M:App.ControlLibrary.WebBrowser.Filter(System.String,System.String,System.String,System.String)">
            <summary>
            页面过滤器
            </summary>
            <param name="http">需要过滤的网页地址</param>
            <param name="keywords">页面文档中包含的关键字符串</param>
            <param name="tagNameChain">Tag标记名称链。</param>
            <param name="delimiter">Tag标记名称链拆分字符。</param>
        </member>
        <member name="T:App.ControlLibrary.Mapping">
            <summary>
            映射关系
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Mapping.Item(System.Object)">
            <summary>
            获取或设置映射的实体成员值
            </summary>
            <param name="item">实体对象</param>
        </member>
        <member name="T:App.ControlLibrary.BindingMapping">
            <summary>
            绑定关系映射
            </summary>
        </member>
        <member name="M:App.ControlLibrary.BindingMapping.#ctor(System.Windows.Forms.DataGridView,System.Type,System.Boolean)">
            <summary>
            初始化绑定关系映射
            </summary>
            <param name="view">表格</param>
            <param name="type">数据实体类型</param>
            <param name="canWrite">是否要求数据实体字段必须可写</param>
        </member>
        <member name="M:App.ControlLibrary.BindingMapping.#ctor(System.Windows.Forms.DataGridView,System.Data.DataTable)">
            <summary>
            初始化绑定关系映射
            </summary>
            <param name="view">表格</param>
            <param name="table">数据表</param>
        </member>
        <member name="M:App.ControlLibrary.BindingMapping.#ctor(System.Type,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            初始化绑定关系映射
            </summary>
            <param name="type">数据实体类型</param>
            <param name="fields">字段解析绑定的字段</param>
            <param name="canWrite">是否要求数据实体字段必须可写</param>
        </member>
        <member name="T:App.ControlLibrary.DataItem">
            <summary>
            列表控件的数据项
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataItem.#ctor">
            <summary>
            实例化列表数据项
            </summary>
        </member>
        <member name="M:App.ControlLibrary.DataItem.#ctor(System.String,System.Object,System.String,System.Object)">
            <summary>
            实例化列表数据项
            </summary>
            <param name="Text">列表项的文本</param>
            <param name="Code">列表项的编码</param>
            <param name="Spelling">列表项的附加码</param>
            <param name="ExtraCode">列表项的拼音助记码</param>
        </member>
        <member name="M:App.ControlLibrary.DataItem.From(App.ControlLibrary.DataItem)">
            <summary>
            复制数据到当前数据项中
            </summary>
            <param name="item">被复制的数据项</param>
        </member>
        <member name="M:App.ControlLibrary.DataItem.From(System.String,System.Object,System.String,System.String)">
            <summary>
            复制数据到当前数据项中
            </summary>
            <param name="Text">列表项的文本</param>
            <param name="Code">列表项的编码</param>
            <param name="Spelling">列表项的附加码</param>
            <param name="ExtraCode">列表项的拼音助记码</param>
        </member>
        <member name="P:App.ControlLibrary.DataItem.Code">
            <summary>
            列表项的编码
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataItem.Data">
            <summary>
            列表项的附加数据，一般为绑定数据源时使用的数据项。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataItem.ExtraCode">
            <summary>
            列表项的附加码
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataItem.Spelling">
            <summary>
            列表项的拼音助记码
            </summary>
        </member>
        <member name="P:App.ControlLibrary.DataItem.Text">
            <summary>
            列表项的文本
            </summary>
        </member>
        <member name="T:App.ControlLibrary.FlatBorderAppearance">
            <summary>
            对于FlatStyle为FlatStyle.Flat样式时组合框的边框样式
            </summary>
        </member>
        <member name="M:App.ControlLibrary.FlatBorderAppearance.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.FlatBorderAppearance.BorderColor">
            <summary>
            控件边框的颜色。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.FlatBorderAppearance.MouseEnterColor">
            <summary>
            当鼠标进入控件时，控件的边框颜色。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.MsgboxExtension">
            <summary>
            模式对话框扩展函数
            </summary>
        </member>
        <member name="P:App.ControlLibrary.MsgboxExtension.DefaultTitle">
            <summary>
            设置默认对话框的标题。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.MsgboxExtension.ShowBefore">
            <summary>
            对话框展示之前事件。
            </summary>
        </member>
        <member name="E:App.ControlLibrary.MsgboxExtension.ShowAfter">
            <summary>
            对话框展示之后事件。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Object[])">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxIcon,System.String)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.Exception)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Exception,System.Windows.Forms.IWin32Window)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Exception,System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.Exception,System.String)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Exception,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.IWin32Window)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.Exception,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Exception,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.IWin32Window)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Exception,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.IWin32Window)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Exception,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.IWin32Window)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Exception,System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Exception,System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.Exception,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.String)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons,System.String)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxDefaultButton,System.String)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="M:App.ControlLibrary.MsgboxExtension.Msgbox(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.String)">
            <summary>
            模式对话框
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NotCreateHandleException">
            <summary>
            窗口或控件句柄未创建异常。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NotCreateHandleException.#ctor">
            <summary>
            初始化句柄未创建异常实例。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NotCreateHandleException.#ctor(System.String)">
            <summary>
            初始化句柄未创建异常实例。
            </summary>
            <param name="message">描述异常的消息。</param>
        </member>
        <member name="M:App.ControlLibrary.NotCreateHandleException.#ctor(System.String,System.Exception)">
            <summary>
            初始化句柄未创建异常实例。
            </summary>
            <param name="message">描述异常的消息。</param>
            <param name="innerException">导致当前异常的子异常。</param>
        </member>
        <member name="M:App.ControlLibrary.NotCreateHandleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化句柄未创建异常实例。
            </summary>
            <param name="info">它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="T:App.ControlLibrary.ProgressShower">
            <summary>
            进度栏展示器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ProgressShower.#ctor(System.Windows.Forms.Control[])">
            <summary>
            初始化进度栏展示器,并且进入进度显示状态。
            </summary>
            <param name="controls">进度栏宿主的控件</param>
        </member>
        <member name="M:App.ControlLibrary.ProgressShower.Create(System.Windows.Forms.Control)">
            <summary>
            创建进度栏展示器，但不进入进度显示状态。
            </summary>
            <param name="control">进度栏宿主的控件</param>
        </member>
        <member name="M:App.ControlLibrary.ProgressShower.Begin">
            <summary>
            进度开始
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ProgressShower.Finally">
            <summary>
            进度结束
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ProgressShower.Dispose">
            <summary>
            销毁进度栏暂时器，并且结束进度显示。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ProgressShower.ProgressSuspender">
            <summary>
            控件进度显示挂起工具创建器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.ProgressShower.ProgressSuspender.Create(System.Windows.Forms.Control)">
            <summary>
            控件进度显示挂起工具创建器
            </summary>
            <param name="control">宿主控件</param>
        </member>
        <member name="T:App.ControlLibrary.Propertier">
            <summary>
            属性管理器，批量设置控件的各种属性(线程间调用是安全的)。
            </summary>
            <remarks>
             　　　　　　　　   \\\|///
            　　　　　　　　　 \\ - - //
            　　　　　　　　　　( @ @ )
            +-----------oOOo--(_)-oOOo---------------+ 
            | 编制：宋超 
            | 日期：2002-06-18 
            | 说明：批量设置控件的各种属性，达到以最少的代码实现更多的功能
            |                        Oooo
            +-------------oooO------( 　)------------+
            　　　　　　　  ( 　) 　 　 ) /
            　　　　　　　   \ (  　　 (_/
            　　　　　　　 　 \_)
            </remarks>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Enableds(System.Boolean,System.ComponentModel.Component[])">
            <summary>
            设置控件的Enabled属性(线程间调用是安全的)。
            </summary>
            <param name="controls">语法格式：Control1,Control2,...</param>
            <param name="enabled">设置目标组件属性的值。</param>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Enableds(System.Object[])">
            <summary>
            设置控件的Enabled属性(线程间调用是安全的)。
            </summary>
            <param name="params">语法格式：True,Control1,Control2,...,False,Control3,Control4,...</param>
            <remarks>
            设置控件的Enableds的属性值要放在控件名称之前，可以连续设置，第一个元素要求必须是布尔数据类型
            </remarks>    
        </member>
        <member name="M:App.ControlLibrary.Propertier.ReadOnlys(System.Boolean,System.ComponentModel.Component[])">
            <summary>
            设置TextBox控件的OnlyRead属性(线程间调用是安全的)。
            </summary>
            <param name="readonly">设置目标组件属性的值。</param>
            <param name="controls">语法格式：Control1,Control2,...</param>
        </member>
        <member name="M:App.ControlLibrary.Propertier.ReadOnlys(System.Object[])">
            <summary>
            设置TextBox控件的OnlyRead属性(线程间调用是安全的)。
            </summary>
            <param name="params">语法格式：True,Control1,Control2,...,False,Control3,Control4,...</param>
            <remarks>
            设置控件的ReadOnlys的属性值要放在控件名称之前，可以连续设置，第一个元素要求必须是布尔数据类型
            </remarks>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Visibles(System.Boolean,System.ComponentModel.Component[])">
            <summary>
            设置控件的Visible属性(线程间调用是安全的)。
            </summary>
            <param name="visible">设置目标组件属性的值。</param>
            <param name="controls">语法格式：Control1,Control2,...</param>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Visibles(System.Object[])">
            <summary>
            设置控件的Visible属性(线程间调用是安全的)。
            </summary>
            <param name="params">语法格式：True,Control1,Control2,...,False,Control3,Control4,...</param>
            <remarks>
            设置控件的Visibles的属性值要放在控件名称之前，可以连续设置，第一个元素要求必须是布尔数据类型
            </remarks>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Texts(System.String,System.ComponentModel.Component[])">
            <summary>
            批量填充控件的文本内容(线程间调用是安全的)。
            </summary>
            <param name="text">设置目标组件属性的值。</param>
            <param name="controls">语法格式：Control1,Control2,...</param>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Texts(System.Object[])">
            <summary>
            批量填充控件的文本内容(线程间调用是安全的)。
            </summary>
            <param name="params">语法格式：String1,Control1,Control2,...,String2,Control3,Control4,...</param>
            <remarks>
            设置控件的Texts的属性值要放在控件名称之前，可以连续设置，第一个元素要求必须是字符串数据类型
            </remarks>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Indexs(System.Int32,System.ComponentModel.Component[])">
            <summary>
            设置具有列表索引类型的控件的列表索引(兼容SelectedIndex，线程间调用是安全的)。
            </summary>
            <param name="index">设置目标组件属性的值。</param>
            <param name="controls">语法格式：Control1,Control2,...</param>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Indexs(System.Object[])">
            <summary>
            设置具有列表索引类型的控件的列表索引(兼容SelectedIndex，线程间调用是安全的)。
            </summary>
            <param name="params">语法格式：Integer1,Control1,Control2,...,Integer2,Control3,Control4,...</param>
            <remarks>
            设置控件的Indexs的属性值要放在控件名称之前，可以连续设置，第一个元素要求必须是整型数据类型
            </remarks>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Values(System.Object,System.ComponentModel.Component[])">
            <summary>
            设置控件的值类型属性(线程间调用是安全的)。
            </summary>
            <param name="value">设置目标组件属性的值。</param>
            <param name="controls">语法格式：Control1,Control2,...</param>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Checkeds(System.Boolean,System.ComponentModel.Component[])">
            <summary>
            设置控件的Checked属性值(线程间调用是安全的)。
            </summary>
            <param name="checked">设置目标组件属性的值。</param>
            <param name="controls">语法格式：Control1,Control2,...</param>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Checkeds(System.Object[])">
            <summary>
            设置控件的Checked属性值(线程间调用是安全的)。
            </summary>
            <param name="params">语法格式：True,Control1,Control2,...,False,Control3,Control4,...</param>
            <remarks>
            设置控件的Checkeds的属性值要放在控件名称之前，可以连续设置，第一个元素要求必须是布尔数据类型
            </remarks>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Setting(App.ControlLibrary.PropertyType,System.Object,System.ComponentModel.Component[])">
            <summary>
            根据指定的控件属性类型设置控件的属性值(线程间调用是安全的)。
            </summary>
            <param name="propertyType">指定的属性类型</param>
            <param name="value">设置的属性值</param>
            <param name="controls">控件集：Control1,Control2,Control3,Control4,...</param>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Setting(System.String,System.Object,System.ComponentModel.Component[])">
            <summary>
            根据指定的控件属性名称设置控件的属性值(线程间调用是安全的)。
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="value">设置的属性值</param>
            <param name="controls">控件集：Control1,Control2,Control3,Control4,...</param>
        </member>
        <member name="M:App.ControlLibrary.Propertier.Focusing(System.Windows.Forms.Control)">
            <summary>
            设置控件获取到聚焦
            </summary>
            <param name="control">需要设置焦点的控件对象</param> 
        </member>
        <member name="M:App.ControlLibrary.Propertier.Focusing(System.Windows.Forms.Control,System.Int32)">
            <summary>
            设置控件获取到聚焦
            </summary>
            <param name="control">需要设置焦点的控件对象</param>
            <param name="delay">延迟后再次设置焦点的延迟时间(单位：毫秒。)</param> 
        </member>
        <member name="M:App.ControlLibrary.Propertier.Focusing(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            设置控件获取到聚焦
            </summary>
            <param name="control">需要设置焦点的控件对象</param>
            <param name="selectAll">如果是文本输入类控件，控件获取焦点时文本内容是否全部选定状态。</param> 
        </member>
        <member name="M:App.ControlLibrary.Propertier.Focusing(System.Windows.Forms.Control,System.Int32,System.Boolean)">
            <summary>
            设置控件获取到聚焦
            </summary>
            <param name="control">需要设置焦点的控件对象</param>
            <param name="delay">延迟后再次设置焦点的延迟时间(单位：毫秒。)</param>
            <param name="selectAll">如果是文本输入类控件，控件获取焦点时文本内容是否全部选定状态。</param>
            <returns>设置成功返回True，否则返回False</returns>
            <remarks>
            线程间调用是安全的
            使被设置的控件得到焦点，并且如果是文本输入类型的控件，使其文本全选择状态
            可以延时是控件得到焦点，
            如果设置控件的焦点后, 又有其他的代码迫使该控件的焦点丢失, 
            可以设置DelaySecond延时秒数来达到延时设置焦点
            </remarks>
        </member>
        <member name="T:App.ControlLibrary.SuspendDisposer">
            <summary>
            挂起销毁处理器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SuspendDisposer.#ctor(App.ControlLibrary.Suspender)">
            <summary>
            重绘挂起处理器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SuspendDisposer.Dispose">
            <summary>
            恢复控件未挂起之前的状态。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SuspendDisposer.Dispose(System.Boolean)">
            <summary>
            恢复控件未挂起之前的状态。
            </summary>
            <param name="immediate">立即解除所有挂起的状态恢复最初的正常状态。</param>
        </member>
        <member name="T:App.ControlLibrary.SortComparer`1">
            <summary>
            排序比较器
            </summary>
            <typeparam name="T">参与排序比较的实体类型</typeparam>
        </member>
        <member name="M:App.ControlLibrary.SortComparer`1.Compare(`0,`0)">
            <summary>
            对同一类型的两个对象执行不区分大小写的比较，并返回一个值，指示其中一个对象是小于、等于还是大于另一个对象。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.SR.GetSRType">
            <summary>
            程序集资源类型
            </summary>
        </member>
        <member name="T:App.ControlLibrary.TextFormat">
            <summary>
            文件显示的显示格式和规则
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextFormat.Delimiter">
            <summary>
            文本和键值的分割字符
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextFormat.FormatString">
            <summary>
            用于键值编码的格式化字符串。(比如：000000)
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextFormat.FormatChar">
            <summary>
            用户格式化用的字符
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextFormat.FormatLength">
            <summary>
            格式化字符串的长度
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextFormat.FormatFore">
            <summary>
            需要格式化的字符串在前面进行补充格式化字符还是在后面进行补充格式化字符串。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TextFormat.AppendFront">
            <summary>
            键值是否呈现在文本之前。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TextFormat.From(App.ControlLibrary.TextFormat)">
            <summary>
            复制数据到当前规则中
            </summary>
            <param name="item">被复制的规则</param>
        </member>
        <member name="M:App.ControlLibrary.TextFormat.From(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            复制数据到当前规则中
            </summary>
            <param name="delimiter">文本和键值的分割字符</param>
            <param name="format">用于键值编码的格式化字符串。</param>
            <param name="appendFront">键值是否呈现在文本之前。</param>
            <param name="formatFore">需要格式化的字符串在前面进行补充格式化字符还是在后面进行补充格式化字符串。</param>
        </member>
        <member name="M:App.ControlLibrary.TextFormat.#ctor(System.String,System.Boolean)">
            <summary>
            实例化文件显示的呈现规则
            </summary>
            <param name="delimiter">文本和键值的分割字符</param> 
            <param name="appendFront">键值是否呈现在文本之前。</param>
        </member>
        <member name="M:App.ControlLibrary.TextFormat.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            实例化文件显示的呈现规则
            </summary>
            <param name="delimiter">文本和键值的分割字符</param>
            <param name="format">用于键值编码的格式化字符串。</param>
            <param name="appendFront">键值是否呈现在文本之前。</param>
            <param name="formatFore">需要格式化的字符串在前面进行补充格式化字符还是在后面进行补充格式化字符串。</param>
        </member>
        <member name="T:App.ControlLibrary.WindowDC">
            <summary>
            获得窗口的设备环境(覆盖了整个窗口（包括非客户区），例如标题栏、菜单、滚动条，以及边框。这使得程序能够在非客户区域实现自定义图形，例如自定义标题或者边框。)
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WindowDC.#ctor(System.Int32)">
            <summary>
            实例化窗口环境对象
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WindowDC.#ctor(System.IntPtr)">
            <summary>
            实例化窗口环境对象
            </summary>
        </member>
        <member name="P:App.ControlLibrary.WindowDC.Value">
            <summary>
            窗口设备环境句柄
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WindowDC.Dispose">
            <summary>
            释放窗口环境
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WindowDC.CreateGraphics">
            <summary>
            窗口设备环境句柄封装一个 GDI+ 绘图图面。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WindowDC.op_Implicit(App.ControlLibrary.WindowDC)~System.IntPtr">
            <summary>
            窗口环境对象隐形转换为窗口设备环境句柄
            </summary>
        </member>
        <member name="T:App.ControlLibrary.WndProcDispatcher">
            <summary>
            控件所在窗体的消息分发器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WndProcDispatcher.#ctor(System.IntPtr,System.Func{System.Windows.Forms.Message,System.Func{System.Windows.Forms.Message,System.Windows.Forms.Message},System.Windows.Forms.Message})">
            <summary>
            指定窗口句柄的消息分发器。
            </summary>
            <param name="handle">指定的消息句柄。</param>
            <param name="dispatcher">消息分发处理函数</param>
        </member>
        <member name="M:App.ControlLibrary.WndProcDispatcher.Dispose">
            <summary>
            销毁分发器，并且释放所有资源。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.WndProcDispatcher.WndProc(System.Windows.Forms.Message@)">
            <summary />
        </member>
        <member name="T:App.ControlLibrary.RowMovingEventArgs">
            <summary>
            行开始移动参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RowMovingEventArgs.Cancel">
            <summary>
            指示是否放弃继续移动行。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.RowMovedEventArgs">
            <summary>
            行移动完成事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RowMovedEventArgs.OriginalIndex">
            <summary>
            被移动的行原始位置索引。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RowMovedEventArgs.RowIndex">
            <summary>
            被移动的行拖放的目的位置索引。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.RowsCountChangeEventArgs">
            <summary>
            表格行集合改变事件参数集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RowsCountChangeEventArgs.#ctor(App.ControlLibrary.DataGridView,System.ComponentModel.CollectionChangeAction,System.Windows.Forms.DataGridViewRow)">
            <summary>
            表格行集合改变事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RowsCountChangeEventArgs.DataGridViewRow">
            <summary>
             获取引发行集合改变的数据行实例(刷新数据时为null)。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RowsCountChangeEventArgs.Count">
            <summary>
            表格的总行数
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RowsCountChangeEventArgs.Element">
            <summary/>
        </member>
        <member name="T:App.ControlLibrary.TabToCellEventArgs">
            <summary>
            Tab跳转单元格事件参数集
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TabToCellEventArgs.Handled">
            <summary>
            表示用户是否取消事件的后续处理。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.TabToCellEventArgs.Cell">
            <summary>
            触发Tab键跳转的当前单元格。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.TabToCellEventArgs.#ctor(System.Windows.Forms.DataGridViewCell)">
            <summary>
            实例化
            </summary>
            <param name="cell">触发Tab键跳转的当前单元格</param>
        </member>
        <member name="T:App.ControlLibrary.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.ComboBase">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.DataGridViewColumnsDialog_delete">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.DataGridViewColumnsDialog_moveDown">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.DataGridViewColumnsDialog_moveUp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.DataGridViewColumnsDialog_selectedColumns">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.minus">
            <summary>
              查找类似于 (Icon) 的 System.Drawing.Icon 类型的本地化资源。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.plus">
            <summary>
              查找类似于 (Icon) 的 System.Drawing.Icon 类型的本地化资源。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.Separator">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Properties.Resources.TrackBar">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NativeMethods">
            <summary>
            Api函数
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NativeMethods.Keys">
            <summary>
            键盘按键常数
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NativeMethods.Buttons">
            <summary>
            鼠标按键常数
            </summary>
        </member>
        <member name="T:App.ControlLibrary.NativeMethods.Messages">
            <summary>
            消息常数
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NativeMethods.GetDoubleClickTime">
            <summary>
            判断连续两次鼠标单击之间会被处理成双击事件的间隔时间(毫秒)
            </summary>
        </member>
        <member name="M:App.ControlLibrary.NativeMethods.IsWindow(System.IntPtr)">
            <summary>
            判断句柄是否有效
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ComboBoxInfo">
            <summary>
            组合框信息
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBoxInfo.cbSize">
            <summary>
            结构体大小
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBoxInfo.rcEdit">
            <summary>
            编辑器区域矩形
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBoxInfo.rcButton">
            <summary>
            按钮区域矩形
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBoxInfo.stateButton">
            <summary>
            按钮状态
            </summary> 
        </member>
        <member name="F:App.ControlLibrary.ComboBoxInfo.hwndCombo">
            <summary>
            组合框句柄
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBoxInfo.hwndEdit">
            <summary>
            编辑器句柄
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBoxInfo.hwndList">
            <summary>
            弹出列表句柄
            </summary>
        </member>
        <member name="T:App.ControlLibrary.RECT">
            <summary>
            边距结构体
            </summary>
        </member>
        <member name="F:App.ControlLibrary.RECT.Left">
            <summary>
            左边距
            </summary>
        </member>
        <member name="F:App.ControlLibrary.RECT.Top">
            <summary>
            上边距
            </summary>
        </member>
        <member name="F:App.ControlLibrary.RECT.Right">
            <summary>
            右边距
            </summary>
        </member>
        <member name="F:App.ControlLibrary.RECT.Bottom">
            <summary>
            下边距
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RECT.Rectangle">
            <summary>
            输出为Rectangle
            </summary>
        </member>
        <member name="P:App.ControlLibrary.RECT.Size">
            <summary>
            输出为Size
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RECT.Parse(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            解析
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RECT.Parse(System.Drawing.Rectangle)">
            <summary>
            解析
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RECT.op_Implicit(App.ControlLibrary.RECT)~System.Drawing.Size">
            <summary>
            隐形转换为 Size。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RECT.op_Implicit(App.ControlLibrary.RECT)~System.Drawing.Rectangle">
            <summary>
            隐形转换为 Rectangle .
            </summary>
        </member>
        <member name="M:App.ControlLibrary.RECT.op_Implicit(System.Drawing.Rectangle)~App.ControlLibrary.RECT">
            <summary>
            隐形转换为 RECT。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ComboBoxButtonState">
            <summary>
            按钮状态
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ComboBoxButtonState.STATE_SYSTEM_NONE">
            <summary/>
        </member>
        <member name="F:App.ControlLibrary.ComboBoxButtonState.STATE_SYSTEM_INVISIBLE">
            <summary/>
        </member>
        <member name="F:App.ControlLibrary.ComboBoxButtonState.STATE_SYSTEM_PRESSED">
            <summary/>
        </member>
        <member name="T:App.ControlLibrary.Clipboarder">
            <summary>
            剪贴板管理对象(系统剪贴板存在未知的Bug)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Clipboarder.Clear">
            <summary>
            从剪贴板中移除所有数据
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Clipboarder.Text">
            <summary>
            设置或获取剪贴板文本表达式。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Clipboarder.GetData(System.String)">
            <summary>
            获取剪贴板中指定格式的数据
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Clipboarder.SetData(System.String,System.Object)">
            <summary>
            设置剪贴板中指定格式的数据
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Clipboarder.DataObject">
            <summary>
            获取或设置剪贴板中的数据
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Clipboarder.Image">
            <summary>
            获取或设置剪贴板中的图像
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Clipboarder.Audio">
            <summary>
            获取或设置剪贴板中的音频流
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Extends">
            <summary>
            扩展函数
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Find``1(System.Type,System.Func{System.Type,``0})">
            <summary>
            递归查找类型中声明的成员信息
            </summary>
            <param name="type">查找成员定义的类型</param> 
            <param name="selector">成员筛选器</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.FindCaller(System.Reflection.MethodBase)">
            <summary>
            从堆栈中获取调用指定方法的方法。
            </summary>
            <param name="calling">调用的方法</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.ControlsForEach(System.Windows.Forms.Form,System.Action{App.ControlLibrary.IControlBase})">
            <summary>
            窗口子控件枚举器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.SuspendEvents(System.Windows.Forms.Form)">
            <summary>
            临时挂起窗口内所有子控件的事件响应
            </summary>
            <param name="form">设置的窗口对象实例</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.ResumeEvents(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            恢复窗口内所有子控件正常的事件响应，可以选择强制对挂起的事件立即进行响应。
            </summary>
            <param name="form">设置的窗口对象实例</param>
            <param name="performEvent">True表示立即执行事件的响应，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.SuspendRedraw(System.Windows.Forms.Form)">
            <summary>
            临时挂起窗口内所有子控件的界面重绘。
            </summary>
            <param name="form">设置的窗口对象实例</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.ResumeRedraw(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            恢复窗口内所有子控件正常的界面重绘。
            </summary>
            <param name="form">设置的窗口对象实例</param>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.PixelWidth(System.String,System.Drawing.Font)">
            <summary>
            获取字符串指定字体的像素宽度。
            </summary>
            <param name="font">参考字体</param>
            <param name="express">字符串表达式</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.PixelWidth(System.Drawing.Font,System.String)">
            <summary>
            获取字体指定字符串的像素宽度。
            </summary>
            <param name="font">当前字体</param>
            <param name="express">字符串表达式</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.HorizontalAlign(System.Windows.Forms.DataGridViewContentAlignment)">
            <summary>
            对齐方式转换
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.VerticalAlign(System.Windows.Forms.DataGridViewContentAlignment)">
            <summary>
            对齐方式转换
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Alignment(System.Drawing.StringAlignment,System.Drawing.StringAlignment)">
            <summary>
            对齐方式转换
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.TextAlign(System.Windows.Forms.DataGridViewContentAlignment)">
            <summary>
            对齐方式转换
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.TextFormatFlag(System.Windows.Forms.DataGridViewContentAlignment)">
            <summary>
            对齐方式转换
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Copy(System.Drawing.Rectangle)">
            <summary>
            复制一个矩形的精确副本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Copy(System.Drawing.RectangleF)">
            <summary>
            复制一个矩形的精确副本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Copy(System.Drawing.Point)">
            <summary>
            复制一个坐标点的精确副本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Copy(System.Drawing.PointF)">
            <summary>
            复制一个坐标点的精确副本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Copy(System.Drawing.Size)">
            <summary>
            复制一个尺寸的精确副本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Copy(System.Drawing.SizeF)">
            <summary>
            复制一个尺寸的精确副本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Copy(System.Drawing.Bitmap)">
            <summary>
            复制一个位图的精确副本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.AttachStyle(System.Drawing.Font,System.Drawing.FontStyle)">
            <summary>
            在字体上叠加样式。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.DetachStyle(System.Drawing.Font,System.Drawing.FontStyle)">
            <summary>
            在字体上分离样式
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.Copy(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            图像复制
            </summary>
            <param name="img">要复制的源图像</param>
            <param name="x">开始复制的X坐标</param>
            <param name="y">开始复制的Y坐标</param>
            <param name="width">复制的图像宽度</param>
            <param name="height">复制的图像高度</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.Copy(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            图像复制
            </summary>
            <param name="img">要复制的源图像</param>
            <param name="bound">复制图像区域</param>
        </member>
        <member name="M:App.ControlLibrary.Extends.ToCheckState(System.Nullable{System.Boolean})">
            <summary>
            可空布尔型转为三态型。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Extends.ToBoolean(System.Windows.Forms.CheckState)">
            <summary>
            三态型转为可空布尔型。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.IControlBase">
            <summary>
            控件集的基础接口
            </summary>
        </member>
        <member name="P:App.ControlLibrary.IControlBase.EnterSendTab">
            <summary>
            回车自动发送Tab键的模式
            </summary>
        </member>
        <member name="M:App.ControlLibrary.IControlBase.SuspendRedraw">
            <summary>
            临时挂起控件的界面重绘。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.IControlBase.ResumeRedraw(System.Boolean)">
            <summary>
            恢复控件正常的界面重绘。
            </summary>
            <param name="invalidate">使控件工作区内的区域无效立即进行重绘。</param>
        </member>
        <member name="M:App.ControlLibrary.IControlBase.SuspendEvents">
            <summary>
            临时挂起控件的事件响应
            </summary>
        </member>
        <member name="M:App.ControlLibrary.IControlBase.ResumeEvents(System.Boolean)">
            <summary>
            恢复控件正常的事件响应。
            </summary>
            <param name="performEvent">True表示立即恢复所有挂起，False表示恢复上一次的临时挂起。</param>
        </member>
        <member name="M:App.ControlLibrary.IControlBase.SendTab(System.Boolean)">
            <summary>
            发送 Tab 进行焦点的切换。
            </summary>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="P:App.ControlLibrary.IControlBase.RunMode">
            <summary>
            获取一个值，用以指示 System.ComponentModel.Component 当前是否处于运行模式(与设计模式相反，DesignMode 在 Visual Studio 产品中存在 Bug)。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.ImeType">
            <summary>
            键盘可以输入的字符类型
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ImeType.All">
            <summary>
            全部字符(包括中文和特殊字符)。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ImeType.Letter">
            <summary>
            仅字母
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ImeType.Integer">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ImeType.Decimal">
            <summary>
            小数
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ImeType.Symbol">
            <summary>
            正、负符号
            </summary>
        </member>
        <member name="F:App.ControlLibrary.ImeType.Validity">
            <summary>
            合法字符(排除 ' ; -- /* */ )。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Funs">
            <summary>
            公用函数
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.Bindings">
            <summary>
            反射绑定标志(包括私有)
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.Bindings_IgnoreCase">
            <summary>
            反射绑定标志(包括私有和忽略大小写)
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.SendTabKey(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            模拟发送Tab键
            </summary>
            <param name="control">发生Tab键的参考控件</param>
            <param name="shift">Shift+Tab 反向跳转。</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.IsColorEmpty(System.Drawing.Color)">
            <summary>
            颜色是否为空(透明色也空颜色判断)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.IsNumberic(System.Char)">
            <summary>
            判断字符是否为数值型字符
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.IsNumberic(System.String)">
            <summary>
            判断字符串是否为数值型字符串
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对枚举器进行循环操作
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            对枚举器进行循环，查找第一个符合条件的元素。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            对枚举器进行循环，查找第一个符合条件的元素索引。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            对枚举器进行循环，判断是否存在第一个符合条件的元素。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            对枚举器进行循环，查找所有符合条件的元素列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.FindAll(System.Data.DataTable,System.String,System.String)">
            <summary>
            搜索表中符号条件的数据行组
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.FindAll(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.String)">
            <summary>
            搜索行集合中符号条件的数据行组
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            对枚举器的元素用分隔符进行连接。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.ValueEquals(System.Object,System.Object)">
            <summary>
            比较两个值相等(兼容null，忽略大小写)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.LenB(System.String)">
            <summary>
            返回字符串的字节长度
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Format(System.Object,System.Int32,System.Char,System.Boolean)">
            <summary>
            把一个数字格式化为以Char为序列的序列号
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Funs.AppThemed">
            <summary>
            控件是否应用了外观样式
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Funs.DesignAssembly">
            <summary>
            系统设计程序集
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Formatting(System.String,System.Object[])">
            <summary>
            将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。
            </summary>
            <param name="format">复合格式字符串。</param>
            <param name="params">包含零个或多个要设置格式的对象。</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.IsEmpty(System.String)">
            <summary>
            判断字符串是否为空。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.ResetMarquee(System.Windows.Forms.ProgressBar)">
            <summary>
            走马灯进度动画复位
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.GetElementType(System.Collections.IEnumerable)">
            <summary>
            获取枚举器的泛型类型
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Sort(System.Data.DataTable,System.String)">
            <summary>
            排序当前数据表，并且返回排序后的数据表(不改变当前数据表DataTable)。
            </summary>
            <param name="table">排序的表</param>
            <param name="orders">排序条件字符串</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.Value(System.Data.DataRow,System.String)">
            <summary>
            获取字段值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Value(App.ControlLibrary.BindingMapping,System.String,System.Object)">
            <summary>
            获取成员值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.SelectionAll(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            编辑控件获取焦点并且文本区域全选
            </summary>
            <param name="editor">编辑控件</param>
            <param name="forceFocus">是否使编辑控件强行获取焦点</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.SelectionStart(System.Windows.Forms.Control)">
            <summary>
            获取编辑器控件选择的文本开始位置索引。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.SelectionStart(System.Windows.Forms.Control,System.Int32)">
            <summary>
            设置编辑器控件选择的文本开始位置索引。
            </summary>
            <param name="editor">编辑器控件</param>
            <param name="value">设置的新值</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.SelectionLength(System.Windows.Forms.Control)">
            <summary>
            获取编辑器控件选择的文本长度
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.SelectionLength(System.Windows.Forms.Control,System.Int32)">
            <summary>
            设置编辑器控件选择的文本长度
            </summary>
            <param name="editor">编辑器控件</param>
            <param name="value">设置的新值</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.SelectedText(System.Windows.Forms.Control)">
            <summary>
            获取编辑器控件中选择的文本
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.RightToLeft(System.Windows.Forms.Control)">
            <summary>
            获取编辑器文本是否从右往左显示
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Multiline(System.Windows.Forms.Control)">
            <summary>
            获取编辑器是否支持多行文本显示
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Publishing(System.Exception)">
            <summary>
            发布信息到控制台
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Publishing(System.String)">
            <summary>
            发布信息到控制台
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Publishing(System.Windows.Forms.Design.IUIService,System.Exception,System.Windows.Forms.Control)">
            <summary>
            发布信息到控制台
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Publishing(System.Windows.Forms.Design.IUIService,System.String,System.Windows.Forms.Control)">
            <summary>
            发布信息到控制台
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Find(System.Reflection.Assembly,System.String,System.Boolean,System.Boolean)">
            <summary>
            在程序集中查找指定的名称的类型(包括非公开类型)。
            </summary>
            <param name="assembly">程序集</param>
            <param name="name">查找的类型名称</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <param name="throwOnError">发生错误时是否抛出异常(未找到时也会抛出异常)</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeCall(System.Type,System.String,System.Object[])">
            <summary>
            委托调用静态类的方法
            </summary>
            <param name="type">声明方法的类型</param>
            <param name="callName">委托调用的函数名称</param>
            <param name="params">委托时所需要使用的参数组</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeCall``1(System.Type,System.String,System.Object[])">
            <summary>
            委托调用静态类的方法
            </summary>
            <param name="type">声明方法的类型</param>
            <param name="callName">委托调用的函数名称</param>
            <param name="params">委托时所需要使用的参数组</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeCall(System.Object,System.String,System.Type,System.Object[])">
            <summary>
            调用对象的委托(实例化的对象)。
            </summary>
            <param name="control">在其实进行委托的实例化对象。</param>
            <param name="callName">委托调用的函数名称</param>
            <param name="params">委托时所需要使用的参数组</param>
            <param name="declareType">声明方法的类型</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.GetTypeArray(System.Object[],System.Type)">
            <summary>
            获取指定数组中对象的类型
            </summary>
            <param name="args">要确定其类型的对象数组</param>
            <param name="defaultType">当对象为 null 时的默认类型</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeCall(System.Object,System.String,System.Object[])">
            <summary>
            调用对象的委托(实例化的对象)。
            </summary>
            <param name="control">在其实进行委托的实例化对象。</param>
            <param name="callName">委托调用的函数名称</param>
            <param name="params">委托时所需要使用的参数组</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeCall``1(System.Object,System.String,System.Type,System.Object[])">
            <summary>
            调用对象的委托(实例化的对象)。
            </summary>
            <param name="control">在其实进行委托的实例化对象。</param>
            <param name="callName">委托调用的函数名称</param>
            <param name="params">委托时所需要使用的参数组</param>
            <param name="declareType">声明方法的类型</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeCall``1(System.Object,System.String,System.Object[])">
            <summary>
            调用对象的委托(实例化的对象)。
            </summary>
            <param name="control">在其实进行委托的实例化对象。</param>
            <param name="callName">委托调用的函数名称</param>
            <param name="params">委托时所需要使用的参数组</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeGet(System.Object,System.String,System.Boolean)">
            <summary>
            获取字段或属性的值
            </summary>
            <param name="control">在其实进行委托的实例化对象。</param>
            <param name="name">字段或属性的名称</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeGet``1(System.Object,System.String,System.Boolean)">
            <summary>
            获取字段或属性的值
            </summary>
            <param name="control">在其实进行委托的实例化对象。</param>
            <param name="name">字段或属性的名称</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeSet(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            设置属性或字段的值
            </summary>
            <param name="control">在其实进行委托的实例化对象。</param>
            <param name="name">属性或字段名称</param>
            <param name="value">属性或字段的新值</param>
            <param name="ignoreCase">忽略大小写</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.InvokeNew(System.Type,System.Object[])">
            <summary>
            获取指定类型的实例
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.IncludeNullValue(System.Object[])">
            <summary>
            数组是否包括空对象
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.FindMember(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            查找属性或字段成员
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Asc(System.Char)">
            <summary>
            获取字符相对应的字符码。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Asc(System.String)">
            <summary>
            获取字符相对应的字符码。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Convert(System.Object,System.Type)">
            <summary>
            当前对象值转换为目标对象值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Convert``1(System.Object)">
            <summary>
            当前对象值转换为目标对象值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.ToTable(System.Collections.IList,System.String[])">
            <summary>
            由列表获取数据表
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.SetValue(App.ControlLibrary.Funs.DataMapping,System.Object,System.Data.DataRow)">
            <summary>
            由包含数据的数据行设置实体类对象字段值
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.IsEquals``1(``0,System.Object)">
            <summary>
            判断两个对象是否相同(如为字符串则忽略大小写;当同时为空时也视为相同,object.ReferenceEquals仅局限于判断实例对象)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.IsStringEquals(System.String,System.Object)">
            <summary>
            字符串是否相同(null作为空字符串处理)
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.SetValue(System.Reflection.MemberInfo,System.Object,System.Object,System.Boolean)">
            <summary>
            设置字段或者属性值。
            </summary>
            <param name="value">对象实例</param>
            <param name="info">字段或者属性成员信息。</param>
            <param name="obj">实体对象，静态类为 null。</param>
            <param name="unfoundThrow">未发现限定名时指示是抛出异常还是返回null。</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.GetCanCopyDataMappings(System.Data.DataTable,System.Type)">
            <summary>
            获取可进行数据复制的数据映射关系(由数据表往数据实体复制数据)。
            </summary>
            <param name="dstType">源数据实体类型</param>
            <param name="srcTable">目标架构数据表</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.GetDataMappings(System.Type)">
            <summary>
            获取实体字段列表(包括所有公有和做映射的私有字段)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.GetDataMapping(System.Reflection.FieldInfo)">
            <summary>
            获取实体字段类成员的映射关系
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.GetDataMapping(System.Reflection.PropertyInfo)">
            <summary>
            获取实体字段类成员的映射关系
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.IsPubliced(System.Reflection.MethodInfo)">
            <summary>
            获取方法是否为公有方法
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.GetMembers(System.Type,System.Reflection.BindingFlags,System.Reflection.MemberTypes,System.Boolean)">
            <summary>
            在类型中使用指定绑定约束，按成员类型搜索定义的所有成员。
            </summary>
            <param name="type">获取成员的类型</param>
            <param name="bindings">指定绑定约束</param>
            <param name="memberType">成员类型，多个成员可以或运算传入</param>
            <param name="includeBasePrivate">是否包括基类私有成员。</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.ParametersEquals(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            方法参数是否相等。
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Funs.CanCopyDataMapping">
            <summary>
            数据实体之间可复制数据的数据映射关系
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Funs.CanCopyDataMapping.Source">
            <summary>
            源数据实体映射关系
            </summary>
        </member>
        <member name="P:App.ControlLibrary.Funs.CanCopyDataMapping.Destination">
            <summary>
            目标数据实体映射关系
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Funs.DataMapping">
            <summary>
            实体数据映射关系
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.DataMapping.MemberInfo">
            <summary>
            实体声明的字段或者属性信息。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.DataMapping.IsProperty">
            <summary>
            表示实体声明的是否为属性成员(True表示属性、False表示字段)。
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.DataMapping.DeclareName">
            <summary>
            实体声明的名称
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.DataMapping.DeclareType">
            <summary>
            实体声明的数据类型
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.DataMapping.CanRead">
            <summary>
            声明的属性是否可读
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.DataMapping.CanWrite">
            <summary>
            声明的属性是否可写
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.DataMapping.ReadIspublic">
            <summary>
            声明的属性可读是否为公有的
            </summary>
        </member>
        <member name="F:App.ControlLibrary.Funs.DataMapping.WriteIspublic">
            <summary>
            声明的属性可写是否为公有的
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.CDecimal(System.Object)">
            <summary>
            字符串表达式转换为十进制数值。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.CInt(System.Object)">
            <summary>
            字符串表达式转换为整型数值。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.IsSpelling(System.String)">
            <summary>
            判断指定的字符串是否为拼音助记码(不包括空格和空字符)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.Spelling(System.String)">
            <summary>
            获取字符串的声母字符
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.DataSource(System.Windows.Forms.ListBox,System.Object,App.ControlLibrary.DataItem,App.ControlLibrary.TextFormat)">
            <summary>
            泛型数据源分发
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.DataSource(System.Windows.Forms.ListBox,System.Collections.Generic.List{App.ControlLibrary.DataItem},App.ControlLibrary.TextFormat)">
            <summary>
            通过视图列表同步刷新控件列表项
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.ItemsDataSource(System.Windows.Forms.ListBox.ObjectCollection,System.Data.DataTable,App.ControlLibrary.DataItem,App.ControlLibrary.TextFormat)">
            <summary>
            DataTable 数据类型的数据源
            </summary>
            <param name="source">数据源</param>
            <param name="dataMapping">数据映射</param> 
            <param name="formula">文本格式化器</param>
            <param name="boxItems">基础列表对象</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.ItemsDataSource(System.Windows.Forms.ListBox.ObjectCollection,System.Collections.IEnumerable,App.ControlLibrary.DataItem,App.ControlLibrary.TextFormat)">
            <summary>
            List 数据类型的数据源
            </summary>
            <param name="source">数据源</param>
            <param name="dataMapping">数据管映射</param> 
            <param name="formula">文本格式化器</param>
            <param name="boxItems">基础列表对象</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.ItemsDataSource(System.Windows.Forms.ListBox.ObjectCollection,System.String[],App.ControlLibrary.TextFormat)">
            <summary>
            Array 数据类型的数据源(列表项字段顺序:文本|编码|拼音助记码|扩展码)。
            </summary>
            <param name="dataSource">数据源</param>
            <param name="formula">文本格式化器</param>
            <param name="boxItems">基础列表对象</param>
        </member>
        <member name="M:App.ControlLibrary.Funs.IndexOfMultiple(System.Collections.Generic.List{App.ControlLibrary.DataItem},System.String)">
            <summary>
             综合查询(不包括助记码，查询按如下顺序：Text,Code,ExtraCode)。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.FindAllSpelling(System.Collections.Generic.List{App.ControlLibrary.DataItem},System.String)">
            <summary>
            拼音助记码查询数据列表，并且返回符合条件的视图列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.FindAllStartsWith(System.Collections.Generic.List{App.ControlLibrary.DataItem},System.String)">
            <summary>
            查询数据列表，并且返回符合条件的视图列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.FindAllContains(System.Collections.Generic.List{App.ControlLibrary.DataItem},System.String)">
            <summary>
            查询数据列表，并且返回符合条件的视图列表。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.SuspendMenuMode">
            <summary>
            挂起菜单模式
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.ResumeMenuMode">
            <summary>
            恢复菜单模式
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Funs.DrawShowBorder(System.Drawing.Graphics,System.Drawing.Rectangle,App.ControlLibrary.BorderType)">
            <summary>
            绘边框 ShowBorder
            </summary>
        </member>
        <member name="T:App.ControlLibrary.Suspender">
            <summary>
            挂起、恢复挂起操作器
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Suspender.#ctor(System.Action{System.Boolean})">
            <summary>
            实例化挂起恢复操作器
            </summary>
            <param name="responder">挂起恢复响应委托</param>
        </member>
        <member name="P:App.ControlLibrary.Suspender.IsSuspended">
            <summary>
            判断是否已经被挂起
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Suspender.Suspend">
            <summary>
            临时挂起控件的状态。
            </summary>
        </member>
        <member name="M:App.ControlLibrary.Suspender.Resume(System.Boolean)">
            <summary>
            恢复控件未挂起之前的状态。
            </summary>
            <param name="immediate">立即解除所有挂起的状态恢复最初的正常状态。</param>
        </member>
    </members>
</doc>
